
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00004b64  00004bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  0080007c  0080007c  00004c14  2**0
                  ALLOC
  3 .stab         00003768  00000000  00000000  00004c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f8e  00000000  00000000  0000837c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000930a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000946a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000095f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b63e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c73f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d6c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d844  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000db06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e394  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3c       	cpi	r26, 0xCC	; 204
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 24 	call	0x493c	; 0x493c <main>
      8a:	0c 94 b0 25 	jmp	0x4b60	; 0x4b60 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a1 25 	jmp	0x4b42	; 0x4b42 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a1 25 	jmp	0x4b42	; 0x4b42 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 25 	jmp	0x4b02	; 0x4b02 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9d 25 	jmp	0x4b3a	; 0x4b3a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a1 25 	jmp	0x4b42	; 0x4b42 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a1 25 	jmp	0x4b42	; 0x4b42 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a1 25 	jmp	0x4b42	; 0x4b42 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 89 25 	jmp	0x4b12	; 0x4b12 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <isempty>:
u16 top = -1;
u16 stack[20];


u16 isempty()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <isempty+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62

   if(top == -1)
     ca8:	80 91 6a 00 	lds	r24, 0x006A
     cac:	90 91 6b 00 	lds	r25, 0x006B
     cb0:	2f ef       	ldi	r18, 0xFF	; 255
     cb2:	8f 3f       	cpi	r24, 0xFF	; 255
     cb4:	92 07       	cpc	r25, r18
     cb6:	29 f4       	brne	.+10     	; 0xcc2 <isempty+0x24>
      return 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <isempty+0x28>
   else
      return 0;
     cc2:	1a 82       	std	Y+2, r1	; 0x02
     cc4:	19 82       	std	Y+1, r1	; 0x01
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <isfull>:

u16 isfull()
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <isfull+0x6>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62

   if(top == MAXSIZE)
     cde:	20 91 6a 00 	lds	r18, 0x006A
     ce2:	30 91 6b 00 	lds	r19, 0x006B
     ce6:	80 91 68 00 	lds	r24, 0x0068
     cea:	90 91 69 00 	lds	r25, 0x0069
     cee:	28 17       	cp	r18, r24
     cf0:	39 07       	cpc	r19, r25
     cf2:	29 f4       	brne	.+10     	; 0xcfe <isfull+0x2a>
      return 1;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9a 83       	std	Y+2, r25	; 0x02
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <isfull+0x2e>
   else
      return 0;
     cfe:	1a 82       	std	Y+2, r1	; 0x02
     d00:	19 82       	std	Y+1, r1	; 0x01
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <peek>:

u16 peek()
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
   return stack[top];
     d18:	80 91 6a 00 	lds	r24, 0x006A
     d1c:	90 91 6b 00 	lds	r25, 0x006B
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	fc 01       	movw	r30, r24
     d26:	ec 55       	subi	r30, 0x5C	; 92
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
}
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <pop>:

u16 pop()
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	00 d0       	rcall	.+0      	; 0xd3a <pop+0x6>
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <pop+0x8>
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
	u16 data;

   if(!isempty())
     d40:	0e 94 4f 06 	call	0xc9e	; 0xc9e <isempty>
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	d9 f4       	brne	.+54     	; 0xd7e <pop+0x4a>
   {
      data = stack[top];
     d48:	80 91 6a 00 	lds	r24, 0x006A
     d4c:	90 91 6b 00 	lds	r25, 0x006B
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	fc 01       	movw	r30, r24
     d56:	ec 55       	subi	r30, 0x5C	; 92
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	80 81       	ld	r24, Z
     d5c:	91 81       	ldd	r25, Z+1	; 0x01
     d5e:	9a 83       	std	Y+2, r25	; 0x02
     d60:	89 83       	std	Y+1, r24	; 0x01
      top = top - 1;
     d62:	80 91 6a 00 	lds	r24, 0x006A
     d66:	90 91 6b 00 	lds	r25, 0x006B
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	90 93 6b 00 	sts	0x006B, r25
     d70:	80 93 6a 00 	sts	0x006A, r24
      return data;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	9c 83       	std	Y+4, r25	; 0x04
     d7a:	8b 83       	std	Y+3, r24	; 0x03
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <pop+0x4e>
   }
   else
	   return 0;
     d7e:	1c 82       	std	Y+4, r1	; 0x04
     d80:	1b 82       	std	Y+3, r1	; 0x03
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04

}
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <push>:

void push (u16 data)
{
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	00 d0       	rcall	.+0      	; 0xd9a <push+0x6>
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01

   if(!isfull()) {
     da2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <isfull>
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	b1 f4       	brne	.+44     	; 0xdd6 <push+0x42>
      top = top + 1;
     daa:	80 91 6a 00 	lds	r24, 0x006A
     dae:	90 91 6b 00 	lds	r25, 0x006B
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	90 93 6b 00 	sts	0x006B, r25
     db8:	80 93 6a 00 	sts	0x006A, r24
      stack[top] = data;
     dbc:	80 91 6a 00 	lds	r24, 0x006A
     dc0:	90 91 6b 00 	lds	r25, 0x006B
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	fc 01       	movw	r30, r24
     dca:	ec 55       	subi	r30, 0x5C	; 92
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	80 83       	st	Z, r24
   }

}
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <ParseExpression>:

u8 * ParseExpression(u8* Str)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <ParseExpression+0x6>
     de6:	00 d0       	rcall	.+0      	; 0xde8 <ParseExpression+0x8>
     de8:	00 d0       	rcall	.+0      	; 0xdea <ParseExpression+0xa>
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9e 83       	std	Y+6, r25	; 0x06
     df0:	8d 83       	std	Y+5, r24	; 0x05
	u8 Iterator1=0;
     df2:	1c 82       	std	Y+4, r1	; 0x04
	u8 Iterator2=0;
     df4:	1b 82       	std	Y+3, r1	; 0x03
	u16 Cur_Num=0;
     df6:	1a 82       	std	Y+2, r1	; 0x02
     df8:	19 82       	std	Y+1, r1	; 0x01
     dfa:	0a c0       	rjmp	.+20     	; 0xe10 <ParseExpression+0x30>
	static u8 Parssedstr[20];
	while( Iterator1 < 20 )
	{
		Parssedstr[Iterator1]=0;
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	88 2f       	mov	r24, r24
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	fc 01       	movw	r30, r24
     e04:	e4 58       	subi	r30, 0x84	; 132
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	10 82       	st	Z, r1
		Iterator1++;
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	8c 83       	std	Y+4, r24	; 0x04
{
	u8 Iterator1=0;
	u8 Iterator2=0;
	u16 Cur_Num=0;
	static u8 Parssedstr[20];
	while( Iterator1 < 20 )
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	84 31       	cpi	r24, 0x14	; 20
     e14:	98 f3       	brcs	.-26     	; 0xdfc <ParseExpression+0x1c>
	{
		Parssedstr[Iterator1]=0;
		Iterator1++;
	}
	Iterator1=0;
     e16:	1c 82       	std	Y+4, r1	; 0x04
     e18:	70 c0       	rjmp	.+224    	; 0xefa <ParseExpression+0x11a>

	while(Str[Iterator1])
	{
		if( Str[Iterator1] == '*' || Str[Iterator1] == '/' || Str[Iterator1] == '+' || Str[Iterator1] == '-' )
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	8d 81       	ldd	r24, Y+5	; 0x05
     e22:	9e 81       	ldd	r25, Y+6	; 0x06
     e24:	fc 01       	movw	r30, r24
     e26:	e2 0f       	add	r30, r18
     e28:	f3 1f       	adc	r31, r19
     e2a:	80 81       	ld	r24, Z
     e2c:	8a 32       	cpi	r24, 0x2A	; 42
     e2e:	09 f1       	breq	.+66     	; 0xe72 <ParseExpression+0x92>
     e30:	8c 81       	ldd	r24, Y+4	; 0x04
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	8d 81       	ldd	r24, Y+5	; 0x05
     e38:	9e 81       	ldd	r25, Y+6	; 0x06
     e3a:	fc 01       	movw	r30, r24
     e3c:	e2 0f       	add	r30, r18
     e3e:	f3 1f       	adc	r31, r19
     e40:	80 81       	ld	r24, Z
     e42:	8f 32       	cpi	r24, 0x2F	; 47
     e44:	b1 f0       	breq	.+44     	; 0xe72 <ParseExpression+0x92>
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	8d 81       	ldd	r24, Y+5	; 0x05
     e4e:	9e 81       	ldd	r25, Y+6	; 0x06
     e50:	fc 01       	movw	r30, r24
     e52:	e2 0f       	add	r30, r18
     e54:	f3 1f       	adc	r31, r19
     e56:	80 81       	ld	r24, Z
     e58:	8b 32       	cpi	r24, 0x2B	; 43
     e5a:	59 f0       	breq	.+22     	; 0xe72 <ParseExpression+0x92>
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	fc 01       	movw	r30, r24
     e68:	e2 0f       	add	r30, r18
     e6a:	f3 1f       	adc	r31, r19
     e6c:	80 81       	ld	r24, Z
     e6e:	8d 32       	cpi	r24, 0x2D	; 45
     e70:	09 f5       	brne	.+66     	; 0xeb4 <ParseExpression+0xd4>
		{
			Parssedstr[Iterator2++]=Cur_Num;
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	29 81       	ldd	r18, Y+1	; 0x01
     e7a:	fc 01       	movw	r30, r24
     e7c:	e4 58       	subi	r30, 0x84	; 132
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	20 83       	st	Z, r18
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	8b 83       	std	Y+3, r24	; 0x03
			Cur_Num=0;
     e88:	1a 82       	std	Y+2, r1	; 0x02
     e8a:	19 82       	std	Y+1, r1	; 0x01
			Parssedstr[Iterator2++]=Str[Iterator1];
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	48 2f       	mov	r20, r24
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	9e 81       	ldd	r25, Y+6	; 0x06
     e9c:	fc 01       	movw	r30, r24
     e9e:	e2 0f       	add	r30, r18
     ea0:	f3 1f       	adc	r31, r19
     ea2:	80 81       	ld	r24, Z
     ea4:	fa 01       	movw	r30, r20
     ea6:	e4 58       	subi	r30, 0x84	; 132
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	80 83       	st	Z, r24
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	8f 5f       	subi	r24, 0xFF	; 255
     eb0:	8b 83       	std	Y+3, r24	; 0x03
     eb2:	20 c0       	rjmp	.+64     	; 0xef4 <ParseExpression+0x114>

		}
		else
		{
			Cur_Num*=10;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	9c 01       	movw	r18, r24
     eba:	22 0f       	add	r18, r18
     ebc:	33 1f       	adc	r19, r19
     ebe:	c9 01       	movw	r24, r18
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	82 0f       	add	r24, r18
     eca:	93 1f       	adc	r25, r19
     ecc:	9a 83       	std	Y+2, r25	; 0x02
     ece:	89 83       	std	Y+1, r24	; 0x01
			Cur_Num+=Str[Iterator1]-'0';
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	fc 01       	movw	r30, r24
     edc:	e2 0f       	add	r30, r18
     ede:	f3 1f       	adc	r31, r19
     ee0:	80 81       	ld	r24, Z
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	9a 81       	ldd	r25, Y+2	; 0x02
     eea:	82 0f       	add	r24, r18
     eec:	93 1f       	adc	r25, r19
     eee:	c0 97       	sbiw	r24, 0x30	; 48
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
		}
		Iterator1++;
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	8c 83       	std	Y+4, r24	; 0x04
		Parssedstr[Iterator1]=0;
		Iterator1++;
	}
	Iterator1=0;

	while(Str[Iterator1])
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	fc 01       	movw	r30, r24
     f06:	e2 0f       	add	r30, r18
     f08:	f3 1f       	adc	r31, r19
     f0a:	80 81       	ld	r24, Z
     f0c:	88 23       	and	r24, r24
     f0e:	09 f0       	breq	.+2      	; 0xf12 <ParseExpression+0x132>
     f10:	84 cf       	rjmp	.-248    	; 0xe1a <ParseExpression+0x3a>
			Cur_Num+=Str[Iterator1]-'0';
		}
		Iterator1++;
	}

	if(Cur_Num != 0)
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	59 f0       	breq	.+22     	; 0xf30 <ParseExpression+0x150>
        Parssedstr[Iterator2++]=Cur_Num;
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	29 81       	ldd	r18, Y+1	; 0x01
     f22:	fc 01       	movw	r30, r24
     f24:	e4 58       	subi	r30, 0x84	; 132
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	20 83       	st	Z, r18
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	8f 5f       	subi	r24, 0xFF	; 255
     f2e:	8b 83       	std	Y+3, r24	; 0x03

	return Parssedstr;
     f30:	8c e7       	ldi	r24, 0x7C	; 124
     f32:	90 e0       	ldi	r25, 0x00	; 0
}
     f34:	26 96       	adiw	r28, 0x06	; 6
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <OpretionPriority>:

u8 OpretionPriority(u8 op)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <OpretionPriority+0x6>
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	89 83       	std	Y+1, r24	; 0x01
	if(op == '+' || op == '-')
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	8b 32       	cpi	r24, 0x2B	; 43
     f56:	19 f0       	breq	.+6      	; 0xf5e <OpretionPriority+0x18>
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	8d 32       	cpi	r24, 0x2D	; 45
     f5c:	19 f4       	brne	.+6      	; 0xf64 <OpretionPriority+0x1e>
		return 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	0b c0       	rjmp	.+22     	; 0xf7a <OpretionPriority+0x34>
	if(op == '*' || op == '*')
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	8a 32       	cpi	r24, 0x2A	; 42
     f68:	19 f0       	breq	.+6      	; 0xf70 <OpretionPriority+0x2a>
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	8a 32       	cpi	r24, 0x2A	; 42
     f6e:	19 f4       	brne	.+6      	; 0xf76 <OpretionPriority+0x30>
		return 2;
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	8a 83       	std	Y+2, r24	; 0x02
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <OpretionPriority+0x34>
	else return 3;
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	8a 83       	std	Y+2, r24	; 0x02
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <ChangeToPostFix>:

u8 * ChangeToPostFix(u8* Str)
{
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <ChangeToPostFix+0xa>
     f90:	00 d0       	rcall	.+0      	; 0xf92 <ChangeToPostFix+0xc>
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	9c 83       	std	Y+4, r25	; 0x04
     f98:	8b 83       	std	Y+3, r24	; 0x03
	static u8 PFstr[20];
		u8 Iterator1=0;
     f9a:	1a 82       	std	Y+2, r1	; 0x02
		u8 Iterator2=0;
     f9c:	19 82       	std	Y+1, r1	; 0x01
     f9e:	0a c0       	rjmp	.+20     	; 0xfb4 <ChangeToPostFix+0x2e>

		while( Iterator1 < 20 )
		{
			PFstr[Iterator1]=0;
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	fc 01       	movw	r30, r24
     fa8:	e0 57       	subi	r30, 0x70	; 112
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	10 82       	st	Z, r1
			Iterator1++;
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	8a 83       	std	Y+2, r24	; 0x02
{
	static u8 PFstr[20];
		u8 Iterator1=0;
		u8 Iterator2=0;

		while( Iterator1 < 20 )
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	84 31       	cpi	r24, 0x14	; 20
     fb8:	98 f3       	brcs	.-26     	; 0xfa0 <ChangeToPostFix+0x1a>
		{
			PFstr[Iterator1]=0;
			Iterator1++;
		}
		Iterator1=0;
     fba:	1a 82       	std	Y+2, r1	; 0x02
     fbc:	73 c0       	rjmp	.+230    	; 0x10a4 <ChangeToPostFix+0x11e>

		while(Str[Iterator1])
		{
			if(Str[Iterator1] == '+' || Str[Iterator1] == '-' || Str[Iterator1] == '*' || Str[Iterator1] == '/')
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	fc 01       	movw	r30, r24
     fca:	e2 0f       	add	r30, r18
     fcc:	f3 1f       	adc	r31, r19
     fce:	80 81       	ld	r24, Z
     fd0:	8b 32       	cpi	r24, 0x2B	; 43
     fd2:	71 f1       	breq	.+92     	; 0x1030 <ChangeToPostFix+0xaa>
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	9c 81       	ldd	r25, Y+4	; 0x04
     fde:	fc 01       	movw	r30, r24
     fe0:	e2 0f       	add	r30, r18
     fe2:	f3 1f       	adc	r31, r19
     fe4:	80 81       	ld	r24, Z
     fe6:	8d 32       	cpi	r24, 0x2D	; 45
     fe8:	19 f1       	breq	.+70     	; 0x1030 <ChangeToPostFix+0xaa>
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	fc 01       	movw	r30, r24
     ff6:	e2 0f       	add	r30, r18
     ff8:	f3 1f       	adc	r31, r19
     ffa:	80 81       	ld	r24, Z
     ffc:	8a 32       	cpi	r24, 0x2A	; 42
     ffe:	c1 f0       	breq	.+48     	; 0x1030 <ChangeToPostFix+0xaa>
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	fc 01       	movw	r30, r24
    100c:	e2 0f       	add	r30, r18
    100e:	f3 1f       	adc	r31, r19
    1010:	80 81       	ld	r24, Z
    1012:	8f 32       	cpi	r24, 0x2F	; 47
    1014:	89 f5       	brne	.+98     	; 0x1078 <ChangeToPostFix+0xf2>
    1016:	0c c0       	rjmp	.+24     	; 0x1030 <ChangeToPostFix+0xaa>
			{

				while(!isempty() && OpretionPriority(Str[Iterator1]) <= OpretionPriority(peek()) )
				{
					PFstr[Iterator2++] =  pop();;
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	08 2f       	mov	r16, r24
    101c:	10 e0       	ldi	r17, 0x00	; 0
    101e:	0e 94 9a 06 	call	0xd34	; 0xd34 <pop>
    1022:	f8 01       	movw	r30, r16
    1024:	e0 57       	subi	r30, 0x70	; 112
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	80 83       	st	Z, r24
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	89 83       	std	Y+1, r24	; 0x01
		while(Str[Iterator1])
		{
			if(Str[Iterator1] == '+' || Str[Iterator1] == '-' || Str[Iterator1] == '*' || Str[Iterator1] == '/')
			{

				while(!isempty() && OpretionPriority(Str[Iterator1]) <= OpretionPriority(peek()) )
    1030:	0e 94 4f 06 	call	0xc9e	; 0xc9e <isempty>
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	91 f4       	brne	.+36     	; 0x105c <ChangeToPostFix+0xd6>
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	fc 01       	movw	r30, r24
    1044:	e2 0f       	add	r30, r18
    1046:	f3 1f       	adc	r31, r19
    1048:	80 81       	ld	r24, Z
    104a:	0e 94 a3 07 	call	0xf46	; 0xf46 <OpretionPriority>
    104e:	18 2f       	mov	r17, r24
    1050:	0e 94 88 06 	call	0xd10	; 0xd10 <peek>
    1054:	0e 94 a3 07 	call	0xf46	; 0xf46 <OpretionPriority>
    1058:	81 17       	cp	r24, r17
    105a:	f0 f6       	brcc	.-68     	; 0x1018 <ChangeToPostFix+0x92>
				{
					PFstr[Iterator2++] =  pop();;

				}
				push(Str[Iterator1]);
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	9c 81       	ldd	r25, Y+4	; 0x04
    1066:	fc 01       	movw	r30, r24
    1068:	e2 0f       	add	r30, r18
    106a:	f3 1f       	adc	r31, r19
    106c:	80 81       	ld	r24, Z
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 ca 06 	call	0xd94	; 0xd94 <push>
    1076:	13 c0       	rjmp	.+38     	; 0x109e <ChangeToPostFix+0x118>
			}
			else
			{
				PFstr[Iterator2++] =  Str[Iterator1];
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	48 2f       	mov	r20, r24
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	fc 01       	movw	r30, r24
    108a:	e2 0f       	add	r30, r18
    108c:	f3 1f       	adc	r31, r19
    108e:	80 81       	ld	r24, Z
    1090:	fa 01       	movw	r30, r20
    1092:	e0 57       	subi	r30, 0x70	; 112
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	80 83       	st	Z, r24
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	8f 5f       	subi	r24, 0xFF	; 255
    109c:	89 83       	std	Y+1, r24	; 0x01
			}
			Iterator1++;
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	8a 83       	std	Y+2, r24	; 0x02
			PFstr[Iterator1]=0;
			Iterator1++;
		}
		Iterator1=0;

		while(Str[Iterator1])
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	fc 01       	movw	r30, r24
    10b0:	e2 0f       	add	r30, r18
    10b2:	f3 1f       	adc	r31, r19
    10b4:	80 81       	ld	r24, Z
    10b6:	88 23       	and	r24, r24
    10b8:	09 f0       	breq	.+2      	; 0x10bc <ChangeToPostFix+0x136>
    10ba:	81 cf       	rjmp	.-254    	; 0xfbe <ChangeToPostFix+0x38>
    10bc:	0c c0       	rjmp	.+24     	; 0x10d6 <ChangeToPostFix+0x150>
			Iterator1++;
		}

		while(!isempty())
		{
			PFstr[Iterator2++] = pop();
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	08 2f       	mov	r16, r24
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	0e 94 9a 06 	call	0xd34	; 0xd34 <pop>
    10c8:	f8 01       	movw	r30, r16
    10ca:	e0 57       	subi	r30, 0x70	; 112
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	80 83       	st	Z, r24
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	89 83       	std	Y+1, r24	; 0x01
				PFstr[Iterator2++] =  Str[Iterator1];
			}
			Iterator1++;
		}

		while(!isempty())
    10d6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <isempty>
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	81 f3       	breq	.-32     	; 0x10be <ChangeToPostFix+0x138>
		{
			PFstr[Iterator2++] = pop();
		}

	    return PFstr;
    10de:	80 e9       	ldi	r24, 0x90	; 144
    10e0:	90 e0       	ldi	r25, 0x00	; 0

}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	08 95       	ret

000010f4 <CalcExpression>:

u16  CalcExpression(u8* Str)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	29 97       	sbiw	r28, 0x09	; 9
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	9f 83       	std	Y+7, r25	; 0x07
    110a:	8e 83       	std	Y+6, r24	; 0x06
	u8 Iterator=0;
    110c:	1d 82       	std	Y+5, r1	; 0x05
    110e:	99 c0       	rjmp	.+306    	; 0x1242 <CalcExpression+0x14e>
	while(Str[Iterator])
	{
		if(Str[Iterator] == '+' || Str[Iterator] == '-' || Str[Iterator] == '*' || Str[Iterator] == '/')
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	8e 81       	ldd	r24, Y+6	; 0x06
    1118:	9f 81       	ldd	r25, Y+7	; 0x07
    111a:	fc 01       	movw	r30, r24
    111c:	e2 0f       	add	r30, r18
    111e:	f3 1f       	adc	r31, r19
    1120:	80 81       	ld	r24, Z
    1122:	8b 32       	cpi	r24, 0x2B	; 43
    1124:	11 f1       	breq	.+68     	; 0x116a <CalcExpression+0x76>
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8e 81       	ldd	r24, Y+6	; 0x06
    112e:	9f 81       	ldd	r25, Y+7	; 0x07
    1130:	fc 01       	movw	r30, r24
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	80 81       	ld	r24, Z
    1138:	8d 32       	cpi	r24, 0x2D	; 45
    113a:	b9 f0       	breq	.+46     	; 0x116a <CalcExpression+0x76>
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	8e 81       	ldd	r24, Y+6	; 0x06
    1144:	9f 81       	ldd	r25, Y+7	; 0x07
    1146:	fc 01       	movw	r30, r24
    1148:	e2 0f       	add	r30, r18
    114a:	f3 1f       	adc	r31, r19
    114c:	80 81       	ld	r24, Z
    114e:	8a 32       	cpi	r24, 0x2A	; 42
    1150:	61 f0       	breq	.+24     	; 0x116a <CalcExpression+0x76>
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	9f 81       	ldd	r25, Y+7	; 0x07
    115c:	fc 01       	movw	r30, r24
    115e:	e2 0f       	add	r30, r18
    1160:	f3 1f       	adc	r31, r19
    1162:	80 81       	ld	r24, Z
    1164:	8f 32       	cpi	r24, 0x2F	; 47
    1166:	09 f0       	breq	.+2      	; 0x116a <CalcExpression+0x76>
    1168:	5c c0       	rjmp	.+184    	; 0x1222 <CalcExpression+0x12e>
		{
			u16 op1=pop();
    116a:	0e 94 9a 06 	call	0xd34	; 0xd34 <pop>
    116e:	9c 83       	std	Y+4, r25	; 0x04
    1170:	8b 83       	std	Y+3, r24	; 0x03
			u16 op2=pop();
    1172:	0e 94 9a 06 	call	0xd34	; 0xd34 <pop>
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
			switch(Str[Iterator])
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	8e 81       	ldd	r24, Y+6	; 0x06
    1182:	9f 81       	ldd	r25, Y+7	; 0x07
    1184:	fc 01       	movw	r30, r24
    1186:	e2 0f       	add	r30, r18
    1188:	f3 1f       	adc	r31, r19
    118a:	80 81       	ld	r24, Z
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	39 87       	std	Y+9, r19	; 0x09
    1192:	28 87       	std	Y+8, r18	; 0x08
    1194:	48 85       	ldd	r20, Y+8	; 0x08
    1196:	59 85       	ldd	r21, Y+9	; 0x09
    1198:	4b 32       	cpi	r20, 0x2B	; 43
    119a:	51 05       	cpc	r21, r1
    119c:	b1 f0       	breq	.+44     	; 0x11ca <CalcExpression+0xd6>
    119e:	88 85       	ldd	r24, Y+8	; 0x08
    11a0:	99 85       	ldd	r25, Y+9	; 0x09
    11a2:	8c 32       	cpi	r24, 0x2C	; 44
    11a4:	91 05       	cpc	r25, r1
    11a6:	34 f4       	brge	.+12     	; 0x11b4 <CalcExpression+0xc0>
    11a8:	28 85       	ldd	r18, Y+8	; 0x08
    11aa:	39 85       	ldd	r19, Y+9	; 0x09
    11ac:	2a 32       	cpi	r18, 0x2A	; 42
    11ae:	31 05       	cpc	r19, r1
    11b0:	f1 f0       	breq	.+60     	; 0x11ee <CalcExpression+0xfa>
    11b2:	44 c0       	rjmp	.+136    	; 0x123c <CalcExpression+0x148>
    11b4:	48 85       	ldd	r20, Y+8	; 0x08
    11b6:	59 85       	ldd	r21, Y+9	; 0x09
    11b8:	4d 32       	cpi	r20, 0x2D	; 45
    11ba:	51 05       	cpc	r21, r1
    11bc:	79 f0       	breq	.+30     	; 0x11dc <CalcExpression+0xe8>
    11be:	88 85       	ldd	r24, Y+8	; 0x08
    11c0:	99 85       	ldd	r25, Y+9	; 0x09
    11c2:	8f 32       	cpi	r24, 0x2F	; 47
    11c4:	91 05       	cpc	r25, r1
    11c6:	11 f1       	breq	.+68     	; 0x120c <CalcExpression+0x118>
    11c8:	39 c0       	rjmp	.+114    	; 0x123c <CalcExpression+0x148>
			{
				case '+' :   push(op2 + op1); break ;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	9a 81       	ldd	r25, Y+2	; 0x02
    11ce:	2b 81       	ldd	r18, Y+3	; 0x03
    11d0:	3c 81       	ldd	r19, Y+4	; 0x04
    11d2:	82 0f       	add	r24, r18
    11d4:	93 1f       	adc	r25, r19
    11d6:	0e 94 ca 06 	call	0xd94	; 0xd94 <push>
    11da:	30 c0       	rjmp	.+96     	; 0x123c <CalcExpression+0x148>
				case '-' :   push(op2 - op1); break ;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	2b 81       	ldd	r18, Y+3	; 0x03
    11e2:	3c 81       	ldd	r19, Y+4	; 0x04
    11e4:	82 1b       	sub	r24, r18
    11e6:	93 0b       	sbc	r25, r19
    11e8:	0e 94 ca 06 	call	0xd94	; 0xd94 <push>
    11ec:	27 c0       	rjmp	.+78     	; 0x123c <CalcExpression+0x148>
				case '*' :   push(op2 * op1); break ;
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	9a 81       	ldd	r25, Y+2	; 0x02
    11f2:	2b 81       	ldd	r18, Y+3	; 0x03
    11f4:	3c 81       	ldd	r19, Y+4	; 0x04
    11f6:	ac 01       	movw	r20, r24
    11f8:	42 9f       	mul	r20, r18
    11fa:	c0 01       	movw	r24, r0
    11fc:	43 9f       	mul	r20, r19
    11fe:	90 0d       	add	r25, r0
    1200:	52 9f       	mul	r21, r18
    1202:	90 0d       	add	r25, r0
    1204:	11 24       	eor	r1, r1
    1206:	0e 94 ca 06 	call	0xd94	; 0xd94 <push>
    120a:	18 c0       	rjmp	.+48     	; 0x123c <CalcExpression+0x148>
				case '/' :   push(op2 / op1); break ;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	2b 81       	ldd	r18, Y+3	; 0x03
    1212:	3c 81       	ldd	r19, Y+4	; 0x04
    1214:	b9 01       	movw	r22, r18
    1216:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__udivmodhi4>
    121a:	cb 01       	movw	r24, r22
    121c:	0e 94 ca 06 	call	0xd94	; 0xd94 <push>
    1220:	0d c0       	rjmp	.+26     	; 0x123c <CalcExpression+0x148>
			}
		}

		else
		{
			push(Str[Iterator]);
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	8e 81       	ldd	r24, Y+6	; 0x06
    122a:	9f 81       	ldd	r25, Y+7	; 0x07
    122c:	fc 01       	movw	r30, r24
    122e:	e2 0f       	add	r30, r18
    1230:	f3 1f       	adc	r31, r19
    1232:	80 81       	ld	r24, Z
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 ca 06 	call	0xd94	; 0xd94 <push>
		}

		Iterator++;
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	8f 5f       	subi	r24, 0xFF	; 255
    1240:	8d 83       	std	Y+5, r24	; 0x05
}

u16  CalcExpression(u8* Str)
{
	u8 Iterator=0;
	while(Str[Iterator])
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	8e 81       	ldd	r24, Y+6	; 0x06
    124a:	9f 81       	ldd	r25, Y+7	; 0x07
    124c:	fc 01       	movw	r30, r24
    124e:	e2 0f       	add	r30, r18
    1250:	f3 1f       	adc	r31, r19
    1252:	80 81       	ld	r24, Z
    1254:	88 23       	and	r24, r24
    1256:	09 f0       	breq	.+2      	; 0x125a <CalcExpression+0x166>
    1258:	5b cf       	rjmp	.-330    	; 0x1110 <CalcExpression+0x1c>
		}

		Iterator++;
	}

	return pop();
    125a:	0e 94 9a 06 	call	0xd34	; 0xd34 <pop>
}
    125e:	29 96       	adiw	r28, 0x09	; 9
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <GEI_voidEnable>:
#include "EXT_private.h"



void GEI_voidEnable (void)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,7);
    1278:	af e5       	ldi	r26, 0x5F	; 95
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	ef e5       	ldi	r30, 0x5F	; 95
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	80 68       	ori	r24, 0x80	; 128
    1284:	8c 93       	st	X, r24

}
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <GEI_voidDisable>:
void GEI_voidDisable(void)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1294:	af e5       	ldi	r26, 0x5F	; 95
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	ef e5       	ldi	r30, 0x5F	; 95
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8f 77       	andi	r24, 0x7F	; 127
    12a0:	8c 93       	st	X, r24
}
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <EXT_voidEnable_EXT_0>:


void EXT_voidEnable_EXT_0 ( u8 COPY_u8Mode )
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <EXT_voidEnable_EXT_0+0x6>
    12ae:	0f 92       	push	r0
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR,6);
    12b6:	ab e5       	ldi	r26, 0x5B	; 91
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	eb e5       	ldi	r30, 0x5B	; 91
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	80 64       	ori	r24, 0x40	; 64
    12c2:	8c 93       	st	X, r24
	switch( COPY_u8Mode )
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3b 83       	std	Y+3, r19	; 0x03
    12cc:	2a 83       	std	Y+2, r18	; 0x02
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	9b 81       	ldd	r25, Y+3	; 0x03
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	91 05       	cpc	r25, r1
    12d6:	21 f1       	breq	.+72     	; 0x1320 <EXT_voidEnable_EXT_0+0x78>
    12d8:	2a 81       	ldd	r18, Y+2	; 0x02
    12da:	3b 81       	ldd	r19, Y+3	; 0x03
    12dc:	22 30       	cpi	r18, 0x02	; 2
    12de:	31 05       	cpc	r19, r1
    12e0:	2c f4       	brge	.+10     	; 0x12ec <EXT_voidEnable_EXT_0+0x44>
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	9b 81       	ldd	r25, Y+3	; 0x03
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	61 f0       	breq	.+24     	; 0x1302 <EXT_voidEnable_EXT_0+0x5a>
    12ea:	46 c0       	rjmp	.+140    	; 0x1378 <EXT_voidEnable_EXT_0+0xd0>
    12ec:	2a 81       	ldd	r18, Y+2	; 0x02
    12ee:	3b 81       	ldd	r19, Y+3	; 0x03
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	21 f1       	breq	.+72     	; 0x133e <EXT_voidEnable_EXT_0+0x96>
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	91 05       	cpc	r25, r1
    12fe:	71 f1       	breq	.+92     	; 0x135c <EXT_voidEnable_EXT_0+0xb4>
    1300:	3b c0       	rjmp	.+118    	; 0x1378 <EXT_voidEnable_EXT_0+0xd0>
	{
		case Low_level   : CLR_BIT(MCUCR ,0); CLR_BIT(MCUCR ,1); break;
    1302:	a5 e5       	ldi	r26, 0x55	; 85
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e5 e5       	ldi	r30, 0x55	; 85
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	8e 7f       	andi	r24, 0xFE	; 254
    130e:	8c 93       	st	X, r24
    1310:	a5 e5       	ldi	r26, 0x55	; 85
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e5       	ldi	r30, 0x55	; 85
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8d 7f       	andi	r24, 0xFD	; 253
    131c:	8c 93       	st	X, r24
    131e:	2c c0       	rjmp	.+88     	; 0x1378 <EXT_voidEnable_EXT_0+0xd0>
		case Any_change  : SET_BIT(MCUCR ,0); CLR_BIT(MCUCR ,1); break;
    1320:	a5 e5       	ldi	r26, 0x55	; 85
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e5 e5       	ldi	r30, 0x55	; 85
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	81 60       	ori	r24, 0x01	; 1
    132c:	8c 93       	st	X, r24
    132e:	a5 e5       	ldi	r26, 0x55	; 85
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e5 e5       	ldi	r30, 0x55	; 85
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	8d 7f       	andi	r24, 0xFD	; 253
    133a:	8c 93       	st	X, r24
    133c:	1d c0       	rjmp	.+58     	; 0x1378 <EXT_voidEnable_EXT_0+0xd0>
		case Falling_Edge: CLR_BIT(MCUCR ,0); SET_BIT(MCUCR ,1); break;
    133e:	a5 e5       	ldi	r26, 0x55	; 85
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e5 e5       	ldi	r30, 0x55	; 85
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	8e 7f       	andi	r24, 0xFE	; 254
    134a:	8c 93       	st	X, r24
    134c:	a5 e5       	ldi	r26, 0x55	; 85
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e5 e5       	ldi	r30, 0x55	; 85
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	82 60       	ori	r24, 0x02	; 2
    1358:	8c 93       	st	X, r24
    135a:	0e c0       	rjmp	.+28     	; 0x1378 <EXT_voidEnable_EXT_0+0xd0>
		case Rising_Edge : SET_BIT(MCUCR ,0); SET_BIT(MCUCR ,1); break;
    135c:	a5 e5       	ldi	r26, 0x55	; 85
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e5 e5       	ldi	r30, 0x55	; 85
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	81 60       	ori	r24, 0x01	; 1
    1368:	8c 93       	st	X, r24
    136a:	a5 e5       	ldi	r26, 0x55	; 85
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e5       	ldi	r30, 0x55	; 85
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	82 60       	ori	r24, 0x02	; 2
    1376:	8c 93       	st	X, r24

	}

}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <EXT_voidEnable_EXT_1>:
void EXT_voidEnable_EXT_1 ( u8 COPY_u8Mode )
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <EXT_voidEnable_EXT_1+0x6>
    138a:	0f 92       	push	r0
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR , 7);
    1392:	ab e5       	ldi	r26, 0x5B	; 91
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	eb e5       	ldi	r30, 0x5B	; 91
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	80 68       	ori	r24, 0x80	; 128
    139e:	8c 93       	st	X, r24
	switch( COPY_u8Mode )
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	3b 83       	std	Y+3, r19	; 0x03
    13a8:	2a 83       	std	Y+2, r18	; 0x02
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	9b 81       	ldd	r25, Y+3	; 0x03
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	21 f1       	breq	.+72     	; 0x13fc <EXT_voidEnable_EXT_1+0x78>
    13b4:	2a 81       	ldd	r18, Y+2	; 0x02
    13b6:	3b 81       	ldd	r19, Y+3	; 0x03
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <EXT_voidEnable_EXT_1+0x44>
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	9b 81       	ldd	r25, Y+3	; 0x03
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	61 f0       	breq	.+24     	; 0x13de <EXT_voidEnable_EXT_1+0x5a>
    13c6:	46 c0       	rjmp	.+140    	; 0x1454 <EXT_voidEnable_EXT_1+0xd0>
    13c8:	2a 81       	ldd	r18, Y+2	; 0x02
    13ca:	3b 81       	ldd	r19, Y+3	; 0x03
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	21 f1       	breq	.+72     	; 0x141a <EXT_voidEnable_EXT_1+0x96>
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	9b 81       	ldd	r25, Y+3	; 0x03
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	91 05       	cpc	r25, r1
    13da:	71 f1       	breq	.+92     	; 0x1438 <EXT_voidEnable_EXT_1+0xb4>
    13dc:	3b c0       	rjmp	.+118    	; 0x1454 <EXT_voidEnable_EXT_1+0xd0>
	{
		case Low_level   : CLR_BIT(MCUCR , 2); CLR_BIT(MCUCR , 3); break;
    13de:	a5 e5       	ldi	r26, 0x55	; 85
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e5 e5       	ldi	r30, 0x55	; 85
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8b 7f       	andi	r24, 0xFB	; 251
    13ea:	8c 93       	st	X, r24
    13ec:	a5 e5       	ldi	r26, 0x55	; 85
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e5       	ldi	r30, 0x55	; 85
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	87 7f       	andi	r24, 0xF7	; 247
    13f8:	8c 93       	st	X, r24
    13fa:	2c c0       	rjmp	.+88     	; 0x1454 <EXT_voidEnable_EXT_1+0xd0>
		case Any_change  : SET_BIT(MCUCR , 2); CLR_BIT(MCUCR , 3); break;
    13fc:	a5 e5       	ldi	r26, 0x55	; 85
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e5 e5       	ldi	r30, 0x55	; 85
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	84 60       	ori	r24, 0x04	; 4
    1408:	8c 93       	st	X, r24
    140a:	a5 e5       	ldi	r26, 0x55	; 85
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e5       	ldi	r30, 0x55	; 85
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	87 7f       	andi	r24, 0xF7	; 247
    1416:	8c 93       	st	X, r24
    1418:	1d c0       	rjmp	.+58     	; 0x1454 <EXT_voidEnable_EXT_1+0xd0>
		case Falling_Edge: CLR_BIT(MCUCR , 2); SET_BIT(MCUCR , 3); break;
    141a:	a5 e5       	ldi	r26, 0x55	; 85
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e5 e5       	ldi	r30, 0x55	; 85
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8b 7f       	andi	r24, 0xFB	; 251
    1426:	8c 93       	st	X, r24
    1428:	a5 e5       	ldi	r26, 0x55	; 85
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e5 e5       	ldi	r30, 0x55	; 85
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	88 60       	ori	r24, 0x08	; 8
    1434:	8c 93       	st	X, r24
    1436:	0e c0       	rjmp	.+28     	; 0x1454 <EXT_voidEnable_EXT_1+0xd0>
		case Rising_Edge : SET_BIT(MCUCR , 2); SET_BIT(MCUCR , 3); break;
    1438:	a5 e5       	ldi	r26, 0x55	; 85
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e5 e5       	ldi	r30, 0x55	; 85
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	84 60       	ori	r24, 0x04	; 4
    1444:	8c 93       	st	X, r24
    1446:	a5 e5       	ldi	r26, 0x55	; 85
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e5 e5       	ldi	r30, 0x55	; 85
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	88 60       	ori	r24, 0x08	; 8
    1452:	8c 93       	st	X, r24

	}

}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <EXT_voidEnable_EXT_2>:
void EXT_voidEnable_EXT_2 ( u8 COPY_u8Mode )
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <EXT_voidEnable_EXT_2+0x6>
    1466:	0f 92       	push	r0
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR , 5);
    146e:	ab e5       	ldi	r26, 0x5B	; 91
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	eb e5       	ldi	r30, 0x5B	; 91
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	80 62       	ori	r24, 0x20	; 32
    147a:	8c 93       	st	X, r24
	switch( COPY_u8Mode )
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	3b 83       	std	Y+3, r19	; 0x03
    1484:	2a 83       	std	Y+2, r18	; 0x02
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	9b 81       	ldd	r25, Y+3	; 0x03
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	91 05       	cpc	r25, r1
    148e:	31 f0       	breq	.+12     	; 0x149c <EXT_voidEnable_EXT_2+0x3c>
    1490:	2a 81       	ldd	r18, Y+2	; 0x02
    1492:	3b 81       	ldd	r19, Y+3	; 0x03
    1494:	23 30       	cpi	r18, 0x03	; 3
    1496:	31 05       	cpc	r19, r1
    1498:	49 f0       	breq	.+18     	; 0x14ac <EXT_voidEnable_EXT_2+0x4c>
    149a:	0f c0       	rjmp	.+30     	; 0x14ba <EXT_voidEnable_EXT_2+0x5a>
	{
		case Falling_Edge: CLR_BIT(MCUCSR , 6);  break;
    149c:	a4 e5       	ldi	r26, 0x54	; 84
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e4 e5       	ldi	r30, 0x54	; 84
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8f 7b       	andi	r24, 0xBF	; 191
    14a8:	8c 93       	st	X, r24
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <EXT_voidEnable_EXT_2+0x5a>
		case Rising_Edge : SET_BIT(MCUCSR , 6);  break;
    14ac:	a4 e5       	ldi	r26, 0x54	; 84
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e4 e5       	ldi	r30, 0x54	; 84
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 64       	ori	r24, 0x40	; 64
    14b8:	8c 93       	st	X, r24

		default : break;
	}

}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <EXT_voidDisable_EXT_0>:

void EXT_voidDisable_EXT_0(void)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,6);
    14ce:	ab e5       	ldi	r26, 0x5B	; 91
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	eb e5       	ldi	r30, 0x5B	; 91
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8f 7b       	andi	r24, 0xBF	; 191
    14da:	8c 93       	st	X, r24
}
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <EXT_voidDisable_EXT_1>:
void EXT_voidDisable_EXT_1(void)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,7);
    14ea:	ab e5       	ldi	r26, 0x5B	; 91
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	eb e5       	ldi	r30, 0x5B	; 91
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8f 77       	andi	r24, 0x7F	; 127
    14f6:	8c 93       	st	X, r24
}
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <EXT_voidDisable_EXT_2>:
void EXT_voidDisable_EXT_2(void)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,5);
    1506:	ab e5       	ldi	r26, 0x5B	; 91
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	eb e5       	ldi	r30, 0x5B	; 91
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	8f 7d       	andi	r24, 0xDF	; 223
    1512:	8c 93       	st	X, r24
}
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <EXT_voidCLRFlag_EXT_0>:

void EXT_voidCLRFlag_EXT_0(void)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIFR , 6);
    1522:	aa e5       	ldi	r26, 0x5A	; 90
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ea e5       	ldi	r30, 0x5A	; 90
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	80 64       	ori	r24, 0x40	; 64
    152e:	8c 93       	st	X, r24
}
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <EXT_voidCLRFlag_EXT_1>:
void EXT_voidCLRFlag_EXT_1(void)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIFR , 7);
    153e:	aa e5       	ldi	r26, 0x5A	; 90
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ea e5       	ldi	r30, 0x5A	; 90
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	80 68       	ori	r24, 0x80	; 128
    154a:	8c 93       	st	X, r24
}
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <EXT_voidCLRFlag_EXT_2>:
void EXT_voidCLRFlag_EXT_2(void)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIFR , 5);
    155a:	aa e5       	ldi	r26, 0x5A	; 90
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ea e5       	ldi	r30, 0x5A	; 90
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	80 62       	ori	r24, 0x20	; 32
    1566:	8c 93       	st	X, r24
}
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <DIO_voidSetPortDirection>:

#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_voidSetPortDirection(u8 COPY_u8Port, u8 COPY_u8Direction)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	00 d0       	rcall	.+0      	; 0x1574 <DIO_voidSetPortDirection+0x6>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <DIO_voidSetPortDirection+0x8>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	6a 83       	std	Y+2, r22	; 0x02

	switch (COPY_u8Port) {
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3c 83       	std	Y+4, r19	; 0x04
    1586:	2b 83       	std	Y+3, r18	; 0x03
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	91 05       	cpc	r25, r1
    1590:	89 f1       	breq	.+98     	; 0x15f4 <DIO_voidSetPortDirection+0x86>
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	2c f4       	brge	.+10     	; 0x15a6 <DIO_voidSetPortDirection+0x38>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	69 f0       	breq	.+26     	; 0x15be <DIO_voidSetPortDirection+0x50>
    15a4:	74 c0       	rjmp	.+232    	; 0x168e <DIO_voidSetPortDirection+0x120>
    15a6:	2b 81       	ldd	r18, Y+3	; 0x03
    15a8:	3c 81       	ldd	r19, Y+4	; 0x04
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	e1 f1       	breq	.+120    	; 0x1628 <DIO_voidSetPortDirection+0xba>
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	91 05       	cpc	r25, r1
    15b8:	09 f4       	brne	.+2      	; 0x15bc <DIO_voidSetPortDirection+0x4e>
    15ba:	50 c0       	rjmp	.+160    	; 0x165c <DIO_voidSetPortDirection+0xee>
    15bc:	68 c0       	rjmp	.+208    	; 0x168e <DIO_voidSetPortDirection+0x120>
	case DIO_PortA:
		if (COPY_u8Direction == Output)
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	81 30       	cpi	r24, 0x01	; 1
    15c2:	29 f4       	brne	.+10     	; 0x15ce <DIO_voidSetPortDirection+0x60>
			DDRA = 0xff;
    15c4:	ea e3       	ldi	r30, 0x3A	; 58
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	80 83       	st	Z, r24
    15cc:	60 c0       	rjmp	.+192    	; 0x168e <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input)
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	88 23       	and	r24, r24
    15d2:	21 f4       	brne	.+8      	; 0x15dc <DIO_voidSetPortDirection+0x6e>
			DDRA = 0x00;
    15d4:	ea e3       	ldi	r30, 0x3A	; 58
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	10 82       	st	Z, r1
    15da:	59 c0       	rjmp	.+178    	; 0x168e <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input_Pullup)
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <DIO_voidSetPortDirection+0x76>
    15e2:	55 c0       	rjmp	.+170    	; 0x168e <DIO_voidSetPortDirection+0x120>
		{
			DDRA = 0x00;
    15e4:	ea e3       	ldi	r30, 0x3A	; 58
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	10 82       	st	Z, r1
			PORTA = 0xff;
    15ea:	eb e3       	ldi	r30, 0x3B	; 59
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	80 83       	st	Z, r24
    15f2:	4d c0       	rjmp	.+154    	; 0x168e <DIO_voidSetPortDirection+0x120>
		}

		break;

	case DIO_PortB:
		if (COPY_u8Direction == Output)
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	29 f4       	brne	.+10     	; 0x1604 <DIO_voidSetPortDirection+0x96>
			DDRB = 0xff;
    15fa:	e7 e3       	ldi	r30, 0x37	; 55
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	80 83       	st	Z, r24
    1602:	45 c0       	rjmp	.+138    	; 0x168e <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input)
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	88 23       	and	r24, r24
    1608:	21 f4       	brne	.+8      	; 0x1612 <DIO_voidSetPortDirection+0xa4>
			DDRB = 0x00;
    160a:	e7 e3       	ldi	r30, 0x37	; 55
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	10 82       	st	Z, r1
    1610:	3e c0       	rjmp	.+124    	; 0x168e <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input_Pullup)
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	d9 f5       	brne	.+118    	; 0x168e <DIO_voidSetPortDirection+0x120>
		{
			DDRB = 0x00;
    1618:	e7 e3       	ldi	r30, 0x37	; 55
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	10 82       	st	Z, r1
			PORTB = 0xff;
    161e:	e8 e3       	ldi	r30, 0x38	; 56
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8f ef       	ldi	r24, 0xFF	; 255
    1624:	80 83       	st	Z, r24
    1626:	33 c0       	rjmp	.+102    	; 0x168e <DIO_voidSetPortDirection+0x120>
		}

		break;
	case DIO_PortC:
		if (COPY_u8Direction == Output)
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	29 f4       	brne	.+10     	; 0x1638 <DIO_voidSetPortDirection+0xca>
			DDRC = 0xff;
    162e:	e4 e3       	ldi	r30, 0x34	; 52
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8f ef       	ldi	r24, 0xFF	; 255
    1634:	80 83       	st	Z, r24
    1636:	2b c0       	rjmp	.+86     	; 0x168e <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input)
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	88 23       	and	r24, r24
    163c:	21 f4       	brne	.+8      	; 0x1646 <DIO_voidSetPortDirection+0xd8>
			DDRC = 0x00;
    163e:	e4 e3       	ldi	r30, 0x34	; 52
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	10 82       	st	Z, r1
    1644:	24 c0       	rjmp	.+72     	; 0x168e <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input_Pullup)
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	09 f5       	brne	.+66     	; 0x168e <DIO_voidSetPortDirection+0x120>
		{
			DDRC  = 0x00;
    164c:	e4 e3       	ldi	r30, 0x34	; 52
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	10 82       	st	Z, r1
			PORTC = 0xff;
    1652:	e5 e3       	ldi	r30, 0x35	; 53
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	80 83       	st	Z, r24
    165a:	19 c0       	rjmp	.+50     	; 0x168e <DIO_voidSetPortDirection+0x120>
		}
		break;
	case DIO_PortD:
		if (COPY_u8Direction == Output)
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	29 f4       	brne	.+10     	; 0x166c <DIO_voidSetPortDirection+0xfe>
			DDRD = 0xff;
    1662:	e1 e3       	ldi	r30, 0x31	; 49
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	8f ef       	ldi	r24, 0xFF	; 255
    1668:	80 83       	st	Z, r24
    166a:	11 c0       	rjmp	.+34     	; 0x168e <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input)
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	88 23       	and	r24, r24
    1670:	21 f4       	brne	.+8      	; 0x167a <DIO_voidSetPortDirection+0x10c>
			DDRD = 0x00;
    1672:	e1 e3       	ldi	r30, 0x31	; 49
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	10 82       	st	Z, r1
    1678:	0a c0       	rjmp	.+20     	; 0x168e <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input_Pullup)
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	39 f4       	brne	.+14     	; 0x168e <DIO_voidSetPortDirection+0x120>
		{
			DDRD  = 0x00;
    1680:	e1 e3       	ldi	r30, 0x31	; 49
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	10 82       	st	Z, r1
			PORTD = 0xff;
    1686:	e2 e3       	ldi	r30, 0x32	; 50
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8f ef       	ldi	r24, 0xFF	; 255
    168c:	80 83       	st	Z, r24
		}

		break;
	}

}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 COPY_u8Port, u8 COPY_u8Value)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <DIO_voidSetPortValue+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <DIO_voidSetPortValue+0x8>
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	6a 83       	std	Y+2, r22	; 0x02

	switch (COPY_u8Port) {
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	3c 83       	std	Y+4, r19	; 0x04
    16b4:	2b 83       	std	Y+3, r18	; 0x03
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	91 05       	cpc	r25, r1
    16be:	d1 f0       	breq	.+52     	; 0x16f4 <DIO_voidSetPortValue+0x58>
    16c0:	2b 81       	ldd	r18, Y+3	; 0x03
    16c2:	3c 81       	ldd	r19, Y+4	; 0x04
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <DIO_voidSetPortValue+0x38>
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	61 f0       	breq	.+24     	; 0x16ea <DIO_voidSetPortValue+0x4e>
    16d2:	1e c0       	rjmp	.+60     	; 0x1710 <DIO_voidSetPortValue+0x74>
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	81 f0       	breq	.+32     	; 0x16fe <DIO_voidSetPortValue+0x62>
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	83 30       	cpi	r24, 0x03	; 3
    16e4:	91 05       	cpc	r25, r1
    16e6:	81 f0       	breq	.+32     	; 0x1708 <DIO_voidSetPortValue+0x6c>
    16e8:	13 c0       	rjmp	.+38     	; 0x1710 <DIO_voidSetPortValue+0x74>
	case DIO_PortA:
		PORTA = COPY_u8Value;
    16ea:	eb e3       	ldi	r30, 0x3B	; 59
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	80 83       	st	Z, r24
    16f2:	0e c0       	rjmp	.+28     	; 0x1710 <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PortB:
		PORTA = COPY_u8Value;
    16f4:	eb e3       	ldi	r30, 0x3B	; 59
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	80 83       	st	Z, r24
    16fc:	09 c0       	rjmp	.+18     	; 0x1710 <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PortC:
		PORTA = COPY_u8Value;
    16fe:	eb e3       	ldi	r30, 0x3B	; 59
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	80 83       	st	Z, r24
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PortD:
		PORTA = COPY_u8Value;
    1708:	eb e3       	ldi	r30, 0x3B	; 59
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	80 83       	st	Z, r24
		break;
	}

}
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection(u8 COPY_u8Port, u8 COPY_u8PinNumber,u8 COPY_u8Direction)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	29 97       	sbiw	r28, 0x09	; 9
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	6a 83       	std	Y+2, r22	; 0x02
    1736:	4b 83       	std	Y+3, r20	; 0x03

	if (COPY_u8Direction == Output)
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	09 f0       	breq	.+2      	; 0x1740 <DIO_voidSetPinDirection+0x22>
    173e:	6f c0       	rjmp	.+222    	; 0x181e <DIO_voidSetPinDirection+0x100>
	{
		switch (COPY_u8Port) {
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	39 87       	std	Y+9, r19	; 0x09
    1748:	28 87       	std	Y+8, r18	; 0x08
    174a:	88 85       	ldd	r24, Y+8	; 0x08
    174c:	99 85       	ldd	r25, Y+9	; 0x09
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	91 05       	cpc	r25, r1
    1752:	49 f1       	breq	.+82     	; 0x17a6 <DIO_voidSetPinDirection+0x88>
    1754:	28 85       	ldd	r18, Y+8	; 0x08
    1756:	39 85       	ldd	r19, Y+9	; 0x09
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	2c f4       	brge	.+10     	; 0x1768 <DIO_voidSetPinDirection+0x4a>
    175e:	88 85       	ldd	r24, Y+8	; 0x08
    1760:	99 85       	ldd	r25, Y+9	; 0x09
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	61 f0       	breq	.+24     	; 0x177e <DIO_voidSetPinDirection+0x60>
    1766:	90 c1       	rjmp	.+800    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
    1768:	28 85       	ldd	r18, Y+8	; 0x08
    176a:	39 85       	ldd	r19, Y+9	; 0x09
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	71 f1       	breq	.+92     	; 0x17ce <DIO_voidSetPinDirection+0xb0>
    1772:	88 85       	ldd	r24, Y+8	; 0x08
    1774:	99 85       	ldd	r25, Y+9	; 0x09
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	91 05       	cpc	r25, r1
    177a:	e9 f1       	breq	.+122    	; 0x17f6 <DIO_voidSetPinDirection+0xd8>
    177c:	85 c1       	rjmp	.+778    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
		case DIO_PortA:
			SET_BIT(DDRA, COPY_u8PinNumber);
    177e:	aa e3       	ldi	r26, 0x3A	; 58
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	ea e3       	ldi	r30, 0x3A	; 58
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <DIO_voidSetPinDirection+0x7e>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <DIO_voidSetPinDirection+0x7a>
    17a0:	84 2b       	or	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	71 c1       	rjmp	.+738    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
			break;
		case DIO_PortB:
			SET_BIT(DDRB, COPY_u8PinNumber);
    17a6:	a7 e3       	ldi	r26, 0x37	; 55
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e7 e3       	ldi	r30, 0x37	; 55
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_voidSetPinDirection+0xa6>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <DIO_voidSetPinDirection+0xa2>
    17c8:	84 2b       	or	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	5d c1       	rjmp	.+698    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
			break;
		case DIO_PortC:
			SET_BIT(DDRC, COPY_u8PinNumber);
    17ce:	a4 e3       	ldi	r26, 0x34	; 52
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e4 e3       	ldi	r30, 0x34	; 52
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <DIO_voidSetPinDirection+0xce>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <DIO_voidSetPinDirection+0xca>
    17f0:	84 2b       	or	r24, r20
    17f2:	8c 93       	st	X, r24
    17f4:	49 c1       	rjmp	.+658    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
			break;
		case DIO_PortD:
			SET_BIT(DDRD, COPY_u8PinNumber);
    17f6:	a1 e3       	ldi	r26, 0x31	; 49
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e1 e3       	ldi	r30, 0x31	; 49
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <DIO_voidSetPinDirection+0xf6>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <DIO_voidSetPinDirection+0xf2>
    1818:	84 2b       	or	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	35 c1       	rjmp	.+618    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
			break;
		}

	}
	else if( COPY_u8Direction == Input_Pullup )
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	82 30       	cpi	r24, 0x02	; 2
    1822:	09 f0       	breq	.+2      	; 0x1826 <DIO_voidSetPinDirection+0x108>
    1824:	be c0       	rjmp	.+380    	; 0x19a2 <DIO_voidSetPinDirection+0x284>
	{
		switch (COPY_u8Port)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3f 83       	std	Y+7, r19	; 0x07
    182e:	2e 83       	std	Y+6, r18	; 0x06
    1830:	8e 81       	ldd	r24, Y+6	; 0x06
    1832:	9f 81       	ldd	r25, Y+7	; 0x07
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <DIO_voidSetPinDirection+0x11e>
    183a:	3e c0       	rjmp	.+124    	; 0x18b8 <DIO_voidSetPinDirection+0x19a>
    183c:	2e 81       	ldd	r18, Y+6	; 0x06
    183e:	3f 81       	ldd	r19, Y+7	; 0x07
    1840:	22 30       	cpi	r18, 0x02	; 2
    1842:	31 05       	cpc	r19, r1
    1844:	2c f4       	brge	.+10     	; 0x1850 <DIO_voidSetPinDirection+0x132>
    1846:	8e 81       	ldd	r24, Y+6	; 0x06
    1848:	9f 81       	ldd	r25, Y+7	; 0x07
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	71 f0       	breq	.+28     	; 0x186a <DIO_voidSetPinDirection+0x14c>
    184e:	1c c1       	rjmp	.+568    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
    1850:	2e 81       	ldd	r18, Y+6	; 0x06
    1852:	3f 81       	ldd	r19, Y+7	; 0x07
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	09 f4       	brne	.+2      	; 0x185c <DIO_voidSetPinDirection+0x13e>
    185a:	55 c0       	rjmp	.+170    	; 0x1906 <DIO_voidSetPinDirection+0x1e8>
    185c:	8e 81       	ldd	r24, Y+6	; 0x06
    185e:	9f 81       	ldd	r25, Y+7	; 0x07
    1860:	83 30       	cpi	r24, 0x03	; 3
    1862:	91 05       	cpc	r25, r1
    1864:	09 f4       	brne	.+2      	; 0x1868 <DIO_voidSetPinDirection+0x14a>
    1866:	76 c0       	rjmp	.+236    	; 0x1954 <DIO_voidSetPinDirection+0x236>
    1868:	0f c1       	rjmp	.+542    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
		{
		case DIO_PortA:
			CLR_BIT(DDRA , COPY_u8PinNumber);
    186a:	aa e3       	ldi	r26, 0x3A	; 58
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	ea e3       	ldi	r30, 0x3A	; 58
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_voidSetPinDirection+0x168>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	2a 95       	dec	r18
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_voidSetPinDirection+0x164>
    188a:	80 95       	com	r24
    188c:	84 23       	and	r24, r20
    188e:	8c 93       	st	X, r24
			SET_BIT(PORTA, COPY_u8PinNumber);
    1890:	ab e3       	ldi	r26, 0x3B	; 59
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	eb e3       	ldi	r30, 0x3B	; 59
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	48 2f       	mov	r20, r24
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	02 2e       	mov	r0, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <DIO_voidSetPinDirection+0x190>
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	0a 94       	dec	r0
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <DIO_voidSetPinDirection+0x18c>
    18b2:	84 2b       	or	r24, r20
    18b4:	8c 93       	st	X, r24
    18b6:	e8 c0       	rjmp	.+464    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
			break;
		case DIO_PortB:
			CLR_BIT(DDRB , COPY_u8PinNumber);
    18b8:	a7 e3       	ldi	r26, 0x37	; 55
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e7 e3       	ldi	r30, 0x37	; 55
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	48 2f       	mov	r20, r24
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <DIO_voidSetPinDirection+0x1b6>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	2a 95       	dec	r18
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <DIO_voidSetPinDirection+0x1b2>
    18d8:	80 95       	com	r24
    18da:	84 23       	and	r24, r20
    18dc:	8c 93       	st	X, r24
			SET_BIT(PORTB, COPY_u8PinNumber);
    18de:	a8 e3       	ldi	r26, 0x38	; 56
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e8 e3       	ldi	r30, 0x38	; 56
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_voidSetPinDirection+0x1de>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <DIO_voidSetPinDirection+0x1da>
    1900:	84 2b       	or	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	c1 c0       	rjmp	.+386    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
			break;
		case DIO_PortC:
			CLR_BIT(DDRC , COPY_u8PinNumber);
    1906:	a4 e3       	ldi	r26, 0x34	; 52
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e4 e3       	ldi	r30, 0x34	; 52
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <DIO_voidSetPinDirection+0x204>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	2a 95       	dec	r18
    1924:	e2 f7       	brpl	.-8      	; 0x191e <DIO_voidSetPinDirection+0x200>
    1926:	80 95       	com	r24
    1928:	84 23       	and	r24, r20
    192a:	8c 93       	st	X, r24
			SET_BIT(PORTC, COPY_u8PinNumber);
    192c:	a5 e3       	ldi	r26, 0x35	; 53
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e5 e3       	ldi	r30, 0x35	; 53
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	48 2f       	mov	r20, r24
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <DIO_voidSetPinDirection+0x22c>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <DIO_voidSetPinDirection+0x228>
    194e:	84 2b       	or	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	9a c0       	rjmp	.+308    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
			break;
		case DIO_PortD:
			CLR_BIT(DDRD , COPY_u8PinNumber);
    1954:	a1 e3       	ldi	r26, 0x31	; 49
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e1 e3       	ldi	r30, 0x31	; 49
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <DIO_voidSetPinDirection+0x252>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	2a 95       	dec	r18
    1972:	e2 f7       	brpl	.-8      	; 0x196c <DIO_voidSetPinDirection+0x24e>
    1974:	80 95       	com	r24
    1976:	84 23       	and	r24, r20
    1978:	8c 93       	st	X, r24
			SET_BIT(PORTD, COPY_u8PinNumber);
    197a:	a2 e3       	ldi	r26, 0x32	; 50
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e2 e3       	ldi	r30, 0x32	; 50
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	48 2f       	mov	r20, r24
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 2e       	mov	r0, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <DIO_voidSetPinDirection+0x27a>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	0a 94       	dec	r0
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <DIO_voidSetPinDirection+0x276>
    199c:	84 2b       	or	r24, r20
    199e:	8c 93       	st	X, r24
    19a0:	73 c0       	rjmp	.+230    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
			break;
		}
	}
	else
		{
			switch (COPY_u8Port)
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	3d 83       	std	Y+5, r19	; 0x05
    19aa:	2c 83       	std	Y+4, r18	; 0x04
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	9d 81       	ldd	r25, Y+5	; 0x05
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	91 05       	cpc	r25, r1
    19b4:	59 f1       	breq	.+86     	; 0x1a0c <DIO_voidSetPinDirection+0x2ee>
    19b6:	2c 81       	ldd	r18, Y+4	; 0x04
    19b8:	3d 81       	ldd	r19, Y+5	; 0x05
    19ba:	22 30       	cpi	r18, 0x02	; 2
    19bc:	31 05       	cpc	r19, r1
    19be:	2c f4       	brge	.+10     	; 0x19ca <DIO_voidSetPinDirection+0x2ac>
    19c0:	8c 81       	ldd	r24, Y+4	; 0x04
    19c2:	9d 81       	ldd	r25, Y+5	; 0x05
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	69 f0       	breq	.+26     	; 0x19e2 <DIO_voidSetPinDirection+0x2c4>
    19c8:	5f c0       	rjmp	.+190    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
    19ca:	2c 81       	ldd	r18, Y+4	; 0x04
    19cc:	3d 81       	ldd	r19, Y+5	; 0x05
    19ce:	22 30       	cpi	r18, 0x02	; 2
    19d0:	31 05       	cpc	r19, r1
    19d2:	89 f1       	breq	.+98     	; 0x1a36 <DIO_voidSetPinDirection+0x318>
    19d4:	8c 81       	ldd	r24, Y+4	; 0x04
    19d6:	9d 81       	ldd	r25, Y+5	; 0x05
    19d8:	83 30       	cpi	r24, 0x03	; 3
    19da:	91 05       	cpc	r25, r1
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <DIO_voidSetPinDirection+0x2c2>
    19de:	40 c0       	rjmp	.+128    	; 0x1a60 <DIO_voidSetPinDirection+0x342>
    19e0:	53 c0       	rjmp	.+166    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
			{
			case DIO_PortA:
				CLR_BIT(DDRA, COPY_u8PinNumber);
    19e2:	aa e3       	ldi	r26, 0x3A	; 58
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ea e3       	ldi	r30, 0x3A	; 58
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	48 2f       	mov	r20, r24
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 2e       	mov	r0, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <DIO_voidSetPinDirection+0x2e2>
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	0a 94       	dec	r0
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <DIO_voidSetPinDirection+0x2de>
    1a04:	80 95       	com	r24
    1a06:	84 23       	and	r24, r20
    1a08:	8c 93       	st	X, r24
    1a0a:	3e c0       	rjmp	.+124    	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
				break;
			case DIO_PortB:
				CLR_BIT(DDRB, COPY_u8PinNumber);
    1a0c:	a7 e3       	ldi	r26, 0x37	; 55
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e7 e3       	ldi	r30, 0x37	; 55
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	48 2f       	mov	r20, r24
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	02 2e       	mov	r0, r18
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <DIO_voidSetPinDirection+0x30c>
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	0a 94       	dec	r0
    1a2c:	e2 f7       	brpl	.-8      	; 0x1a26 <DIO_voidSetPinDirection+0x308>
    1a2e:	80 95       	com	r24
    1a30:	84 23       	and	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	29 c0       	rjmp	.+82     	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
				break;
			case DIO_PortC:
				CLR_BIT(DDRC, COPY_u8PinNumber);
    1a36:	a4 e3       	ldi	r26, 0x34	; 52
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e4 e3       	ldi	r30, 0x34	; 52
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	48 2f       	mov	r20, r24
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	02 2e       	mov	r0, r18
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <DIO_voidSetPinDirection+0x336>
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	0a 94       	dec	r0
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <DIO_voidSetPinDirection+0x332>
    1a58:	80 95       	com	r24
    1a5a:	84 23       	and	r24, r20
    1a5c:	8c 93       	st	X, r24
    1a5e:	14 c0       	rjmp	.+40     	; 0x1a88 <DIO_voidSetPinDirection+0x36a>
				break;
			case DIO_PortD:
				CLR_BIT(DDRD, COPY_u8PinNumber);
    1a60:	a1 e3       	ldi	r26, 0x31	; 49
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e1 e3       	ldi	r30, 0x31	; 49
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	48 2f       	mov	r20, r24
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	02 2e       	mov	r0, r18
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <DIO_voidSetPinDirection+0x360>
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	0a 94       	dec	r0
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <DIO_voidSetPinDirection+0x35c>
    1a82:	80 95       	com	r24
    1a84:	84 23       	and	r24, r20
    1a86:	8c 93       	st	X, r24
				break;
			}
		}

}
    1a88:	29 96       	adiw	r28, 0x09	; 9
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 COPY_u8Port, u8 COPY_u8PinNumber, u8 COPY_u8Value)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	27 97       	sbiw	r28, 0x07	; 7
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	6a 83       	std	Y+2, r22	; 0x02
    1ab2:	4b 83       	std	Y+3, r20	; 0x03

	if (COPY_u8Value == High) {
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <DIO_voidSetPinValue+0x22>
    1aba:	6f c0       	rjmp	.+222    	; 0x1b9a <DIO_voidSetPinValue+0x100>
		switch (COPY_u8Port) {
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	3f 83       	std	Y+7, r19	; 0x07
    1ac4:	2e 83       	std	Y+6, r18	; 0x06
    1ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	91 05       	cpc	r25, r1
    1ace:	49 f1       	breq	.+82     	; 0x1b22 <DIO_voidSetPinValue+0x88>
    1ad0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ad2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ad4:	22 30       	cpi	r18, 0x02	; 2
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <DIO_voidSetPinValue+0x4a>
    1ada:	8e 81       	ldd	r24, Y+6	; 0x06
    1adc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	61 f0       	breq	.+24     	; 0x1afa <DIO_voidSetPinValue+0x60>
    1ae2:	ce c0       	rjmp	.+412    	; 0x1c80 <DIO_voidSetPinValue+0x1e6>
    1ae4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ae6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	71 f1       	breq	.+92     	; 0x1b4a <DIO_voidSetPinValue+0xb0>
    1aee:	8e 81       	ldd	r24, Y+6	; 0x06
    1af0:	9f 81       	ldd	r25, Y+7	; 0x07
    1af2:	83 30       	cpi	r24, 0x03	; 3
    1af4:	91 05       	cpc	r25, r1
    1af6:	e9 f1       	breq	.+122    	; 0x1b72 <DIO_voidSetPinValue+0xd8>
    1af8:	c3 c0       	rjmp	.+390    	; 0x1c80 <DIO_voidSetPinValue+0x1e6>
		case DIO_PortA:
			SET_BIT(PORTA, COPY_u8PinNumber);
    1afa:	ab e3       	ldi	r26, 0x3B	; 59
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	eb e3       	ldi	r30, 0x3B	; 59
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 2e       	mov	r0, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <DIO_voidSetPinValue+0x7e>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <DIO_voidSetPinValue+0x7a>
    1b1c:	84 2b       	or	r24, r20
    1b1e:	8c 93       	st	X, r24
    1b20:	af c0       	rjmp	.+350    	; 0x1c80 <DIO_voidSetPinValue+0x1e6>
			break;
		case DIO_PortB:
			SET_BIT(PORTB, COPY_u8PinNumber);
    1b22:	a8 e3       	ldi	r26, 0x38	; 56
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e8 e3       	ldi	r30, 0x38	; 56
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2f       	mov	r20, r24
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 2e       	mov	r0, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <DIO_voidSetPinValue+0xa6>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	0a 94       	dec	r0
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <DIO_voidSetPinValue+0xa2>
    1b44:	84 2b       	or	r24, r20
    1b46:	8c 93       	st	X, r24
    1b48:	9b c0       	rjmp	.+310    	; 0x1c80 <DIO_voidSetPinValue+0x1e6>
			break;
		case DIO_PortC:
			SET_BIT(PORTC, COPY_u8PinNumber);
    1b4a:	a5 e3       	ldi	r26, 0x35	; 53
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e5 e3       	ldi	r30, 0x35	; 53
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <DIO_voidSetPinValue+0xce>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <DIO_voidSetPinValue+0xca>
    1b6c:	84 2b       	or	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	87 c0       	rjmp	.+270    	; 0x1c80 <DIO_voidSetPinValue+0x1e6>
			break;
		case DIO_PortD:
			SET_BIT(PORTD, COPY_u8PinNumber);
    1b72:	a2 e3       	ldi	r26, 0x32	; 50
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e2 e3       	ldi	r30, 0x32	; 50
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <DIO_voidSetPinValue+0xf6>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <DIO_voidSetPinValue+0xf2>
    1b94:	84 2b       	or	r24, r20
    1b96:	8c 93       	st	X, r24
    1b98:	73 c0       	rjmp	.+230    	; 0x1c80 <DIO_voidSetPinValue+0x1e6>
			break;
		}

	} else {
		switch (COPY_u8Port) {
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	3d 83       	std	Y+5, r19	; 0x05
    1ba2:	2c 83       	std	Y+4, r18	; 0x04
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	91 05       	cpc	r25, r1
    1bac:	59 f1       	breq	.+86     	; 0x1c04 <DIO_voidSetPinValue+0x16a>
    1bae:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb2:	22 30       	cpi	r18, 0x02	; 2
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <DIO_voidSetPinValue+0x128>
    1bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bba:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	69 f0       	breq	.+26     	; 0x1bda <DIO_voidSetPinValue+0x140>
    1bc0:	5f c0       	rjmp	.+190    	; 0x1c80 <DIO_voidSetPinValue+0x1e6>
    1bc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc6:	22 30       	cpi	r18, 0x02	; 2
    1bc8:	31 05       	cpc	r19, r1
    1bca:	89 f1       	breq	.+98     	; 0x1c2e <DIO_voidSetPinValue+0x194>
    1bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bce:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd0:	83 30       	cpi	r24, 0x03	; 3
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <DIO_voidSetPinValue+0x13e>
    1bd6:	40 c0       	rjmp	.+128    	; 0x1c58 <DIO_voidSetPinValue+0x1be>
    1bd8:	53 c0       	rjmp	.+166    	; 0x1c80 <DIO_voidSetPinValue+0x1e6>
		case DIO_PortA:
			CLR_BIT(PORTA, COPY_u8PinNumber);
    1bda:	ab e3       	ldi	r26, 0x3B	; 59
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	eb e3       	ldi	r30, 0x3B	; 59
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	48 2f       	mov	r20, r24
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	02 2e       	mov	r0, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <DIO_voidSetPinValue+0x15e>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	0a 94       	dec	r0
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <DIO_voidSetPinValue+0x15a>
    1bfc:	80 95       	com	r24
    1bfe:	84 23       	and	r24, r20
    1c00:	8c 93       	st	X, r24
    1c02:	3e c0       	rjmp	.+124    	; 0x1c80 <DIO_voidSetPinValue+0x1e6>
			break;
		case DIO_PortB:
			CLR_BIT(PORTB, COPY_u8PinNumber);
    1c04:	a8 e3       	ldi	r26, 0x38	; 56
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e8 e3       	ldi	r30, 0x38	; 56
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 2e       	mov	r0, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <DIO_voidSetPinValue+0x188>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	0a 94       	dec	r0
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <DIO_voidSetPinValue+0x184>
    1c26:	80 95       	com	r24
    1c28:	84 23       	and	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	29 c0       	rjmp	.+82     	; 0x1c80 <DIO_voidSetPinValue+0x1e6>
			break;
		case DIO_PortC:
			CLR_BIT(PORTC, COPY_u8PinNumber);
    1c2e:	a5 e3       	ldi	r26, 0x35	; 53
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e5 e3       	ldi	r30, 0x35	; 53
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_voidSetPinValue+0x1b2>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <DIO_voidSetPinValue+0x1ae>
    1c50:	80 95       	com	r24
    1c52:	84 23       	and	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <DIO_voidSetPinValue+0x1e6>
			break;
		case DIO_PortD:
			CLR_BIT(PORTD, COPY_u8PinNumber);
    1c58:	a2 e3       	ldi	r26, 0x32	; 50
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e2 e3       	ldi	r30, 0x32	; 50
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <DIO_voidSetPinValue+0x1dc>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <DIO_voidSetPinValue+0x1d8>
    1c7a:	80 95       	com	r24
    1c7c:	84 23       	and	r24, r20
    1c7e:	8c 93       	st	X, r24
			break;
		}
	}

}
    1c80:	27 96       	adiw	r28, 0x07	; 7
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 COPY_u8Port)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <DIO_u8GetPortValue+0x6>
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <DIO_u8GetPortValue+0x8>
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	8a 83       	std	Y+2, r24	; 0x02

	u8 LOC_u8Temp;

	switch (COPY_u8Port) {
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	3c 83       	std	Y+4, r19	; 0x04
    1ca8:	2b 83       	std	Y+3, r18	; 0x03
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	d1 f0       	breq	.+52     	; 0x1ce8 <DIO_u8GetPortValue+0x56>
    1cb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb8:	22 30       	cpi	r18, 0x02	; 2
    1cba:	31 05       	cpc	r19, r1
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <DIO_u8GetPortValue+0x36>
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	61 f0       	breq	.+24     	; 0x1cde <DIO_u8GetPortValue+0x4c>
    1cc6:	1e c0       	rjmp	.+60     	; 0x1d04 <DIO_u8GetPortValue+0x72>
    1cc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ccc:	22 30       	cpi	r18, 0x02	; 2
    1cce:	31 05       	cpc	r19, r1
    1cd0:	81 f0       	breq	.+32     	; 0x1cf2 <DIO_u8GetPortValue+0x60>
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	83 30       	cpi	r24, 0x03	; 3
    1cd8:	91 05       	cpc	r25, r1
    1cda:	81 f0       	breq	.+32     	; 0x1cfc <DIO_u8GetPortValue+0x6a>
    1cdc:	13 c0       	rjmp	.+38     	; 0x1d04 <DIO_u8GetPortValue+0x72>
	case DIO_PortA:
		LOC_u8Temp = PINA;
    1cde:	e9 e3       	ldi	r30, 0x39	; 57
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	0e c0       	rjmp	.+28     	; 0x1d04 <DIO_u8GetPortValue+0x72>
		break;
	case DIO_PortB:
		LOC_u8Temp = PINA;
    1ce8:	e9 e3       	ldi	r30, 0x39	; 57
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	09 c0       	rjmp	.+18     	; 0x1d04 <DIO_u8GetPortValue+0x72>
		break;
	case DIO_PortC:
		LOC_u8Temp = PINA;
    1cf2:	e9 e3       	ldi	r30, 0x39	; 57
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	04 c0       	rjmp	.+8      	; 0x1d04 <DIO_u8GetPortValue+0x72>
		break;
	case DIO_PortD:
		LOC_u8Temp = PINA;
    1cfc:	e9 e3       	ldi	r30, 0x39	; 57
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return LOC_u8Temp;
    1d04:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 COPY_u8Port, u8 COPY_u8PinNumber)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	00 d0       	rcall	.+0      	; 0x1d1a <DIO_u8GetPinValue+0x6>
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <DIO_u8GetPinValue+0x8>
    1d1c:	0f 92       	push	r0
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	8a 83       	std	Y+2, r24	; 0x02
    1d24:	6b 83       	std	Y+3, r22	; 0x03

	u8 LOC_u8Temp;

	switch (COPY_u8Port) {
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	3d 83       	std	Y+5, r19	; 0x05
    1d2e:	2c 83       	std	Y+4, r18	; 0x04
    1d30:	4c 81       	ldd	r20, Y+4	; 0x04
    1d32:	5d 81       	ldd	r21, Y+5	; 0x05
    1d34:	41 30       	cpi	r20, 0x01	; 1
    1d36:	51 05       	cpc	r21, r1
    1d38:	41 f1       	breq	.+80     	; 0x1d8a <DIO_u8GetPinValue+0x76>
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	91 05       	cpc	r25, r1
    1d42:	34 f4       	brge	.+12     	; 0x1d50 <DIO_u8GetPinValue+0x3c>
    1d44:	2c 81       	ldd	r18, Y+4	; 0x04
    1d46:	3d 81       	ldd	r19, Y+5	; 0x05
    1d48:	21 15       	cp	r18, r1
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	61 f0       	breq	.+24     	; 0x1d66 <DIO_u8GetPinValue+0x52>
    1d4e:	52 c0       	rjmp	.+164    	; 0x1df4 <DIO_u8GetPinValue+0xe0>
    1d50:	4c 81       	ldd	r20, Y+4	; 0x04
    1d52:	5d 81       	ldd	r21, Y+5	; 0x05
    1d54:	42 30       	cpi	r20, 0x02	; 2
    1d56:	51 05       	cpc	r21, r1
    1d58:	51 f1       	breq	.+84     	; 0x1dae <DIO_u8GetPinValue+0x9a>
    1d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5e:	83 30       	cpi	r24, 0x03	; 3
    1d60:	91 05       	cpc	r25, r1
    1d62:	b9 f1       	breq	.+110    	; 0x1dd2 <DIO_u8GetPinValue+0xbe>
    1d64:	47 c0       	rjmp	.+142    	; 0x1df4 <DIO_u8GetPinValue+0xe0>
	case DIO_PortA:
		LOC_u8Temp = GET_BIT(PINA, COPY_u8PinNumber);
    1d66:	e9 e3       	ldi	r30, 0x39	; 57
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a9 01       	movw	r20, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <DIO_u8GetPinValue+0x6a>
    1d7a:	55 95       	asr	r21
    1d7c:	47 95       	ror	r20
    1d7e:	8a 95       	dec	r24
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <DIO_u8GetPinValue+0x66>
    1d82:	ca 01       	movw	r24, r20
    1d84:	81 70       	andi	r24, 0x01	; 1
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	35 c0       	rjmp	.+106    	; 0x1df4 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PortB:
		LOC_u8Temp = GET_BIT(PINB, COPY_u8PinNumber);
    1d8a:	e6 e3       	ldi	r30, 0x36	; 54
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a9 01       	movw	r20, r18
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <DIO_u8GetPinValue+0x8e>
    1d9e:	55 95       	asr	r21
    1da0:	47 95       	ror	r20
    1da2:	8a 95       	dec	r24
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <DIO_u8GetPinValue+0x8a>
    1da6:	ca 01       	movw	r24, r20
    1da8:	81 70       	andi	r24, 0x01	; 1
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	23 c0       	rjmp	.+70     	; 0x1df4 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PortC:
		LOC_u8Temp = GET_BIT(PINC, COPY_u8PinNumber);
    1dae:	e3 e3       	ldi	r30, 0x33	; 51
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a9 01       	movw	r20, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_u8GetPinValue+0xb2>
    1dc2:	55 95       	asr	r21
    1dc4:	47 95       	ror	r20
    1dc6:	8a 95       	dec	r24
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_u8GetPinValue+0xae>
    1dca:	ca 01       	movw	r24, r20
    1dcc:	81 70       	andi	r24, 0x01	; 1
    1dce:	89 83       	std	Y+1, r24	; 0x01
    1dd0:	11 c0       	rjmp	.+34     	; 0x1df4 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PortD:
		LOC_u8Temp = GET_BIT(PIND, COPY_u8PinNumber);
    1dd2:	e0 e3       	ldi	r30, 0x30	; 48
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a9 01       	movw	r20, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <DIO_u8GetPinValue+0xd6>
    1de6:	55 95       	asr	r21
    1de8:	47 95       	ror	r20
    1dea:	8a 95       	dec	r24
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <DIO_u8GetPinValue+0xd2>
    1dee:	ca 01       	movw	r24, r20
    1df0:	81 70       	andi	r24, 0x01	; 1
    1df2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return LOC_u8Temp;
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <KEYPAD_voidInit>:
#include "Keypad_private.h"



void KEYPAD_voidInit    (void)
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection( KEYPAD_PORT , ROW1 , Output);
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	60 e0       	ldi	r22, 0x00	; 0
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue    ( KEYPAD_PORT , ROW1 , High  );
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>

	DIO_voidSetPinDirection( KEYPAD_PORT , ROW2 , Output);
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue    ( KEYPAD_PORT , ROW2 , High  );
    1e2c:	82 e0       	ldi	r24, 0x02	; 2
    1e2e:	61 e0       	ldi	r22, 0x01	; 1
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>

	DIO_voidSetPinDirection( KEYPAD_PORT , ROW3 , Output);
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	62 e0       	ldi	r22, 0x02	; 2
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue    ( KEYPAD_PORT , ROW3 , High  );
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	62 e0       	ldi	r22, 0x02	; 2
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>

	DIO_voidSetPinDirection( KEYPAD_PORT , ROW4 , Output);
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	63 e0       	ldi	r22, 0x03	; 3
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue    ( KEYPAD_PORT , ROW4 , High  );
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	63 e0       	ldi	r22, 0x03	; 3
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>

	DIO_voidSetPinDirection( KEYPAD_PORT , COL1 , Input_Pullup);
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	64 e0       	ldi	r22, 0x04	; 4
    1e62:	42 e0       	ldi	r20, 0x02	; 2
    1e64:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( KEYPAD_PORT , COL2 , Input_Pullup);
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	65 e0       	ldi	r22, 0x05	; 5
    1e6c:	42 e0       	ldi	r20, 0x02	; 2
    1e6e:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( KEYPAD_PORT , COL3 , Input_Pullup);
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	66 e0       	ldi	r22, 0x06	; 6
    1e76:	42 e0       	ldi	r20, 0x02	; 2
    1e78:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( KEYPAD_PORT , COL4 , Input_Pullup);
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	67 e0       	ldi	r22, 0x07	; 7
    1e80:	42 e0       	ldi	r20, 0x02	; 2
    1e82:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_voidSetPinDirection>
}
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <KEYPAD_u8ReadButton>:


u8   KEYPAD_u8ReadButton(void)
{
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	c1 5e       	subi	r28, 0xE1	; 225
    1e9a:	d0 40       	sbci	r29, 0x00	; 0
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		//////////////// ROW 1  /////////////


		DIO_voidSetPinValue    ( KEYPAD_PORT , ROW1 , Low  );
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
		if( DIO_u8GetPinValue( KEYPAD_PORT , COL1) == IS_Pressed )
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	64 e0       	ldi	r22, 0x04	; 4
    1eb4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    1eb8:	88 23       	and	r24, r24
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <KEYPAD_u8ReadButton+0x32>
    1ebc:	c2 c0       	rjmp	.+388    	; 0x2042 <KEYPAD_u8ReadButton+0x1b6>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL1) == IS_Pressed) ;
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	64 e0       	ldi	r22, 0x04	; 4
    1ec2:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    1ec6:	88 23       	and	r24, r24
    1ec8:	d1 f3       	breq	.-12     	; 0x1ebe <KEYPAD_u8ReadButton+0x32>
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e3 52       	subi	r30, 0x23	; 35
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a0 e2       	ldi	r26, 0x20	; 32
    1ed6:	b1 e4       	ldi	r27, 0x41	; 65
    1ed8:	80 83       	st	Z, r24
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	a2 83       	std	Z+2, r26	; 0x02
    1ede:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee0:	8e 01       	movw	r16, r28
    1ee2:	07 52       	subi	r16, 0x27	; 39
    1ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e3 52       	subi	r30, 0x23	; 35
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	4a ef       	ldi	r20, 0xFA	; 250
    1efa:	54 e4       	ldi	r21, 0x44	; 68
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	f8 01       	movw	r30, r16
    1f06:	80 83       	st	Z, r24
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	a2 83       	std	Z+2, r26	; 0x02
    1f0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f0e:	fe 01       	movw	r30, r28
    1f10:	e7 52       	subi	r30, 0x27	; 39
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e8       	ldi	r20, 0x80	; 128
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	44 f4       	brge	.+16     	; 0x1f3c <KEYPAD_u8ReadButton+0xb0>
		__ticks = 1;
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e9 52       	subi	r30, 0x29	; 41
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	80 83       	st	Z, r24
    1f3a:	64 c0       	rjmp	.+200    	; 0x2004 <KEYPAD_u8ReadButton+0x178>
	else if (__tmp > 65535)
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e7 52       	subi	r30, 0x27	; 39
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	60 81       	ld	r22, Z
    1f44:	71 81       	ldd	r23, Z+1	; 0x01
    1f46:	82 81       	ldd	r24, Z+2	; 0x02
    1f48:	93 81       	ldd	r25, Z+3	; 0x03
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	57 e4       	ldi	r21, 0x47	; 71
    1f52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	0c f0       	brlt	.+2      	; 0x1f5c <KEYPAD_u8ReadButton+0xd0>
    1f5a:	43 c0       	rjmp	.+134    	; 0x1fe2 <KEYPAD_u8ReadButton+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e3 52       	subi	r30, 0x23	; 35
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	60 81       	ld	r22, Z
    1f64:	71 81       	ldd	r23, Z+1	; 0x01
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	93 81       	ldd	r25, Z+3	; 0x03
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	8e 01       	movw	r16, r28
    1f7c:	09 52       	subi	r16, 0x29	; 41
    1f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	80 83       	st	Z, r24
    1f92:	1f c0       	rjmp	.+62     	; 0x1fd2 <KEYPAD_u8ReadButton+0x146>
    1f94:	fe 01       	movw	r30, r28
    1f96:	eb 52       	subi	r30, 0x2B	; 43
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	88 ec       	ldi	r24, 0xC8	; 200
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	91 83       	std	Z+1, r25	; 0x01
    1fa0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	eb 52       	subi	r30, 0x2B	; 43
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	91 81       	ldd	r25, Z+1	; 0x01
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <KEYPAD_u8ReadButton+0x120>
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	eb 52       	subi	r30, 0x2B	; 43
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fba:	de 01       	movw	r26, r28
    1fbc:	a9 52       	subi	r26, 0x29	; 41
    1fbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e9 52       	subi	r30, 0x29	; 41
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	11 96       	adiw	r26, 0x01	; 1
    1fce:	9c 93       	st	X, r25
    1fd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e9 52       	subi	r30, 0x29	; 41
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	d1 f6       	brne	.-76     	; 0x1f94 <KEYPAD_u8ReadButton+0x108>
    1fe0:	28 c0       	rjmp	.+80     	; 0x2032 <KEYPAD_u8ReadButton+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	8e 01       	movw	r16, r28
    1fe4:	09 52       	subi	r16, 0x29	; 41
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e7 52       	subi	r30, 0x27	; 39
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	f8 01       	movw	r30, r16
    2000:	91 83       	std	Z+1, r25	; 0x01
    2002:	80 83       	st	Z, r24
    2004:	de 01       	movw	r26, r28
    2006:	ad 52       	subi	r26, 0x2D	; 45
    2008:	bf 4f       	sbci	r27, 0xFF	; 255
    200a:	fe 01       	movw	r30, r28
    200c:	e9 52       	subi	r30, 0x29	; 41
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	80 81       	ld	r24, Z
    2012:	91 81       	ldd	r25, Z+1	; 0x01
    2014:	11 96       	adiw	r26, 0x01	; 1
    2016:	9c 93       	st	X, r25
    2018:	8e 93       	st	-X, r24
    201a:	fe 01       	movw	r30, r28
    201c:	ed 52       	subi	r30, 0x2D	; 45
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	80 81       	ld	r24, Z
    2022:	91 81       	ldd	r25, Z+1	; 0x01
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <KEYPAD_u8ReadButton+0x198>
    2028:	fe 01       	movw	r30, r28
    202a:	ed 52       	subi	r30, 0x2D	; 45
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	80 83       	st	Z, r24
			_delay_ms(10);
			return Btn_Num1 ;
    2032:	f1 e0       	ldi	r31, 0x01	; 1
    2034:	cf 51       	subi	r28, 0x1F	; 31
    2036:	df 4f       	sbci	r29, 0xFF	; 255
    2038:	f8 83       	st	Y, r31
    203a:	c1 5e       	subi	r28, 0xE1	; 225
    203c:	d0 40       	sbci	r29, 0x00	; 0
    203e:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		else if( DIO_u8GetPinValue( KEYPAD_PORT , COL2) == IS_Pressed )
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	65 e0       	ldi	r22, 0x05	; 5
    2046:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    204a:	88 23       	and	r24, r24
    204c:	09 f0       	breq	.+2      	; 0x2050 <KEYPAD_u8ReadButton+0x1c4>
    204e:	c2 c0       	rjmp	.+388    	; 0x21d4 <KEYPAD_u8ReadButton+0x348>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL2) == IS_Pressed) ;
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	65 e0       	ldi	r22, 0x05	; 5
    2054:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    2058:	88 23       	and	r24, r24
    205a:	d1 f3       	breq	.-12     	; 0x2050 <KEYPAD_u8ReadButton+0x1c4>
    205c:	fe 01       	movw	r30, r28
    205e:	e1 53       	subi	r30, 0x31	; 49
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	a0 e2       	ldi	r26, 0x20	; 32
    2068:	b1 e4       	ldi	r27, 0x41	; 65
    206a:	80 83       	st	Z, r24
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	a2 83       	std	Z+2, r26	; 0x02
    2070:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2072:	8e 01       	movw	r16, r28
    2074:	05 53       	subi	r16, 0x35	; 53
    2076:	1f 4f       	sbci	r17, 0xFF	; 255
    2078:	fe 01       	movw	r30, r28
    207a:	e1 53       	subi	r30, 0x31	; 49
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	93 81       	ldd	r25, Z+3	; 0x03
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a ef       	ldi	r20, 0xFA	; 250
    208c:	54 e4       	ldi	r21, 0x44	; 68
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	f8 01       	movw	r30, r16
    2098:	80 83       	st	Z, r24
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	a2 83       	std	Z+2, r26	; 0x02
    209e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a0:	fe 01       	movw	r30, r28
    20a2:	e5 53       	subi	r30, 0x35	; 53
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e8       	ldi	r20, 0x80	; 128
    20b4:	5f e3       	ldi	r21, 0x3F	; 63
    20b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ba:	88 23       	and	r24, r24
    20bc:	44 f4       	brge	.+16     	; 0x20ce <KEYPAD_u8ReadButton+0x242>
		__ticks = 1;
    20be:	fe 01       	movw	r30, r28
    20c0:	e7 53       	subi	r30, 0x37	; 55
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	80 83       	st	Z, r24
    20cc:	64 c0       	rjmp	.+200    	; 0x2196 <KEYPAD_u8ReadButton+0x30a>
	else if (__tmp > 65535)
    20ce:	fe 01       	movw	r30, r28
    20d0:	e5 53       	subi	r30, 0x35	; 53
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	0c f0       	brlt	.+2      	; 0x20ee <KEYPAD_u8ReadButton+0x262>
    20ec:	43 c0       	rjmp	.+134    	; 0x2174 <KEYPAD_u8ReadButton+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ee:	fe 01       	movw	r30, r28
    20f0:	e1 53       	subi	r30, 0x31	; 49
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	60 81       	ld	r22, Z
    20f6:	71 81       	ldd	r23, Z+1	; 0x01
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e2       	ldi	r20, 0x20	; 32
    2102:	51 e4       	ldi	r21, 0x41	; 65
    2104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	8e 01       	movw	r16, r28
    210e:	07 53       	subi	r16, 0x37	; 55
    2110:	1f 4f       	sbci	r17, 0xFF	; 255
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	f8 01       	movw	r30, r16
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	80 83       	st	Z, r24
    2124:	1f c0       	rjmp	.+62     	; 0x2164 <KEYPAD_u8ReadButton+0x2d8>
    2126:	fe 01       	movw	r30, r28
    2128:	e9 53       	subi	r30, 0x39	; 57
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	88 ec       	ldi	r24, 0xC8	; 200
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	80 83       	st	Z, r24
    2134:	fe 01       	movw	r30, r28
    2136:	e9 53       	subi	r30, 0x39	; 57
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <KEYPAD_u8ReadButton+0x2b2>
    2142:	fe 01       	movw	r30, r28
    2144:	e9 53       	subi	r30, 0x39	; 57
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	de 01       	movw	r26, r28
    214e:	a7 53       	subi	r26, 0x37	; 55
    2150:	bf 4f       	sbci	r27, 0xFF	; 255
    2152:	fe 01       	movw	r30, r28
    2154:	e7 53       	subi	r30, 0x37	; 55
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	11 96       	adiw	r26, 0x01	; 1
    2160:	9c 93       	st	X, r25
    2162:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2164:	fe 01       	movw	r30, r28
    2166:	e7 53       	subi	r30, 0x37	; 55
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	d1 f6       	brne	.-76     	; 0x2126 <KEYPAD_u8ReadButton+0x29a>
    2172:	28 c0       	rjmp	.+80     	; 0x21c4 <KEYPAD_u8ReadButton+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2174:	8e 01       	movw	r16, r28
    2176:	07 53       	subi	r16, 0x37	; 55
    2178:	1f 4f       	sbci	r17, 0xFF	; 255
    217a:	fe 01       	movw	r30, r28
    217c:	e5 53       	subi	r30, 0x35	; 53
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	f8 01       	movw	r30, r16
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24
    2196:	de 01       	movw	r26, r28
    2198:	ab 53       	subi	r26, 0x3B	; 59
    219a:	bf 4f       	sbci	r27, 0xFF	; 255
    219c:	fe 01       	movw	r30, r28
    219e:	e7 53       	subi	r30, 0x37	; 55
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	80 81       	ld	r24, Z
    21a4:	91 81       	ldd	r25, Z+1	; 0x01
    21a6:	11 96       	adiw	r26, 0x01	; 1
    21a8:	9c 93       	st	X, r25
    21aa:	8e 93       	st	-X, r24
    21ac:	fe 01       	movw	r30, r28
    21ae:	eb 53       	subi	r30, 0x3B	; 59
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <KEYPAD_u8ReadButton+0x32a>
    21ba:	fe 01       	movw	r30, r28
    21bc:	eb 53       	subi	r30, 0x3B	; 59
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
			_delay_ms(10);
			return Btn_Num2 ;
    21c4:	f2 e0       	ldi	r31, 0x02	; 2
    21c6:	cf 51       	subi	r28, 0x1F	; 31
    21c8:	df 4f       	sbci	r29, 0xFF	; 255
    21ca:	f8 83       	st	Y, r31
    21cc:	c1 5e       	subi	r28, 0xE1	; 225
    21ce:	d0 40       	sbci	r29, 0x00	; 0
    21d0:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		else if( DIO_u8GetPinValue( KEYPAD_PORT , COL3) == IS_Pressed )
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	66 e0       	ldi	r22, 0x06	; 6
    21d8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    21dc:	88 23       	and	r24, r24
    21de:	09 f0       	breq	.+2      	; 0x21e2 <KEYPAD_u8ReadButton+0x356>
    21e0:	c2 c0       	rjmp	.+388    	; 0x2366 <KEYPAD_u8ReadButton+0x4da>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL3) == IS_Pressed) ;
    21e2:	82 e0       	ldi	r24, 0x02	; 2
    21e4:	66 e0       	ldi	r22, 0x06	; 6
    21e6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    21ea:	88 23       	and	r24, r24
    21ec:	d1 f3       	breq	.-12     	; 0x21e2 <KEYPAD_u8ReadButton+0x356>
    21ee:	fe 01       	movw	r30, r28
    21f0:	ef 53       	subi	r30, 0x3F	; 63
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	a0 e2       	ldi	r26, 0x20	; 32
    21fa:	b1 e4       	ldi	r27, 0x41	; 65
    21fc:	80 83       	st	Z, r24
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	a2 83       	std	Z+2, r26	; 0x02
    2202:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2204:	8e 01       	movw	r16, r28
    2206:	03 54       	subi	r16, 0x43	; 67
    2208:	1f 4f       	sbci	r17, 0xFF	; 255
    220a:	fe 01       	movw	r30, r28
    220c:	ef 53       	subi	r30, 0x3F	; 63
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	60 81       	ld	r22, Z
    2212:	71 81       	ldd	r23, Z+1	; 0x01
    2214:	82 81       	ldd	r24, Z+2	; 0x02
    2216:	93 81       	ldd	r25, Z+3	; 0x03
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	4a ef       	ldi	r20, 0xFA	; 250
    221e:	54 e4       	ldi	r21, 0x44	; 68
    2220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	f8 01       	movw	r30, r16
    222a:	80 83       	st	Z, r24
    222c:	91 83       	std	Z+1, r25	; 0x01
    222e:	a2 83       	std	Z+2, r26	; 0x02
    2230:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2232:	fe 01       	movw	r30, r28
    2234:	e3 54       	subi	r30, 0x43	; 67
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	60 81       	ld	r22, Z
    223a:	71 81       	ldd	r23, Z+1	; 0x01
    223c:	82 81       	ldd	r24, Z+2	; 0x02
    223e:	93 81       	ldd	r25, Z+3	; 0x03
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e8       	ldi	r20, 0x80	; 128
    2246:	5f e3       	ldi	r21, 0x3F	; 63
    2248:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    224c:	88 23       	and	r24, r24
    224e:	44 f4       	brge	.+16     	; 0x2260 <KEYPAD_u8ReadButton+0x3d4>
		__ticks = 1;
    2250:	fe 01       	movw	r30, r28
    2252:	e5 54       	subi	r30, 0x45	; 69
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
    225e:	64 c0       	rjmp	.+200    	; 0x2328 <KEYPAD_u8ReadButton+0x49c>
	else if (__tmp > 65535)
    2260:	fe 01       	movw	r30, r28
    2262:	e3 54       	subi	r30, 0x43	; 67
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	60 81       	ld	r22, Z
    2268:	71 81       	ldd	r23, Z+1	; 0x01
    226a:	82 81       	ldd	r24, Z+2	; 0x02
    226c:	93 81       	ldd	r25, Z+3	; 0x03
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	0c f0       	brlt	.+2      	; 0x2280 <KEYPAD_u8ReadButton+0x3f4>
    227e:	43 c0       	rjmp	.+134    	; 0x2306 <KEYPAD_u8ReadButton+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2280:	fe 01       	movw	r30, r28
    2282:	ef 53       	subi	r30, 0x3F	; 63
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	60 81       	ld	r22, Z
    2288:	71 81       	ldd	r23, Z+1	; 0x01
    228a:	82 81       	ldd	r24, Z+2	; 0x02
    228c:	93 81       	ldd	r25, Z+3	; 0x03
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	8e 01       	movw	r16, r28
    22a0:	05 54       	subi	r16, 0x45	; 69
    22a2:	1f 4f       	sbci	r17, 0xFF	; 255
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	f8 01       	movw	r30, r16
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	80 83       	st	Z, r24
    22b6:	1f c0       	rjmp	.+62     	; 0x22f6 <KEYPAD_u8ReadButton+0x46a>
    22b8:	fe 01       	movw	r30, r28
    22ba:	e7 54       	subi	r30, 0x47	; 71
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	88 ec       	ldi	r24, 0xC8	; 200
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	80 83       	st	Z, r24
    22c6:	fe 01       	movw	r30, r28
    22c8:	e7 54       	subi	r30, 0x47	; 71
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	91 81       	ldd	r25, Z+1	; 0x01
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <KEYPAD_u8ReadButton+0x444>
    22d4:	fe 01       	movw	r30, r28
    22d6:	e7 54       	subi	r30, 0x47	; 71
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22de:	de 01       	movw	r26, r28
    22e0:	a5 54       	subi	r26, 0x45	; 69
    22e2:	bf 4f       	sbci	r27, 0xFF	; 255
    22e4:	fe 01       	movw	r30, r28
    22e6:	e5 54       	subi	r30, 0x45	; 69
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 81       	ld	r24, Z
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	11 96       	adiw	r26, 0x01	; 1
    22f2:	9c 93       	st	X, r25
    22f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f6:	fe 01       	movw	r30, r28
    22f8:	e5 54       	subi	r30, 0x45	; 69
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	d1 f6       	brne	.-76     	; 0x22b8 <KEYPAD_u8ReadButton+0x42c>
    2304:	28 c0       	rjmp	.+80     	; 0x2356 <KEYPAD_u8ReadButton+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2306:	8e 01       	movw	r16, r28
    2308:	05 54       	subi	r16, 0x45	; 69
    230a:	1f 4f       	sbci	r17, 0xFF	; 255
    230c:	fe 01       	movw	r30, r28
    230e:	e3 54       	subi	r30, 0x43	; 67
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	60 81       	ld	r22, Z
    2314:	71 81       	ldd	r23, Z+1	; 0x01
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	f8 01       	movw	r30, r16
    2324:	91 83       	std	Z+1, r25	; 0x01
    2326:	80 83       	st	Z, r24
    2328:	de 01       	movw	r26, r28
    232a:	a9 54       	subi	r26, 0x49	; 73
    232c:	bf 4f       	sbci	r27, 0xFF	; 255
    232e:	fe 01       	movw	r30, r28
    2330:	e5 54       	subi	r30, 0x45	; 69
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	80 81       	ld	r24, Z
    2336:	91 81       	ldd	r25, Z+1	; 0x01
    2338:	11 96       	adiw	r26, 0x01	; 1
    233a:	9c 93       	st	X, r25
    233c:	8e 93       	st	-X, r24
    233e:	fe 01       	movw	r30, r28
    2340:	e9 54       	subi	r30, 0x49	; 73
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <KEYPAD_u8ReadButton+0x4bc>
    234c:	fe 01       	movw	r30, r28
    234e:	e9 54       	subi	r30, 0x49	; 73
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	91 83       	std	Z+1, r25	; 0x01
    2354:	80 83       	st	Z, r24
			_delay_ms(10);
			return Btn_Num3 ;
    2356:	f3 e0       	ldi	r31, 0x03	; 3
    2358:	cf 51       	subi	r28, 0x1F	; 31
    235a:	df 4f       	sbci	r29, 0xFF	; 255
    235c:	f8 83       	st	Y, r31
    235e:	c1 5e       	subi	r28, 0xE1	; 225
    2360:	d0 40       	sbci	r29, 0x00	; 0
    2362:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		else if( DIO_u8GetPinValue( KEYPAD_PORT , COL4) == IS_Pressed )
    2366:	82 e0       	ldi	r24, 0x02	; 2
    2368:	67 e0       	ldi	r22, 0x07	; 7
    236a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    236e:	88 23       	and	r24, r24
    2370:	09 f0       	breq	.+2      	; 0x2374 <KEYPAD_u8ReadButton+0x4e8>
    2372:	c2 c0       	rjmp	.+388    	; 0x24f8 <KEYPAD_u8ReadButton+0x66c>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL4) == IS_Pressed) ;
    2374:	82 e0       	ldi	r24, 0x02	; 2
    2376:	67 e0       	ldi	r22, 0x07	; 7
    2378:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    237c:	88 23       	and	r24, r24
    237e:	d1 f3       	breq	.-12     	; 0x2374 <KEYPAD_u8ReadButton+0x4e8>
    2380:	fe 01       	movw	r30, r28
    2382:	ed 54       	subi	r30, 0x4D	; 77
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	a0 e2       	ldi	r26, 0x20	; 32
    238c:	b1 e4       	ldi	r27, 0x41	; 65
    238e:	80 83       	st	Z, r24
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	a2 83       	std	Z+2, r26	; 0x02
    2394:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2396:	8e 01       	movw	r16, r28
    2398:	01 55       	subi	r16, 0x51	; 81
    239a:	1f 4f       	sbci	r17, 0xFF	; 255
    239c:	fe 01       	movw	r30, r28
    239e:	ed 54       	subi	r30, 0x4D	; 77
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	60 81       	ld	r22, Z
    23a4:	71 81       	ldd	r23, Z+1	; 0x01
    23a6:	82 81       	ldd	r24, Z+2	; 0x02
    23a8:	93 81       	ldd	r25, Z+3	; 0x03
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4a ef       	ldi	r20, 0xFA	; 250
    23b0:	54 e4       	ldi	r21, 0x44	; 68
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	f8 01       	movw	r30, r16
    23bc:	80 83       	st	Z, r24
    23be:	91 83       	std	Z+1, r25	; 0x01
    23c0:	a2 83       	std	Z+2, r26	; 0x02
    23c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23c4:	fe 01       	movw	r30, r28
    23c6:	e1 55       	subi	r30, 0x51	; 81
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	60 81       	ld	r22, Z
    23cc:	71 81       	ldd	r23, Z+1	; 0x01
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e8       	ldi	r20, 0x80	; 128
    23d8:	5f e3       	ldi	r21, 0x3F	; 63
    23da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23de:	88 23       	and	r24, r24
    23e0:	44 f4       	brge	.+16     	; 0x23f2 <KEYPAD_u8ReadButton+0x566>
		__ticks = 1;
    23e2:	fe 01       	movw	r30, r28
    23e4:	e3 55       	subi	r30, 0x53	; 83
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	80 83       	st	Z, r24
    23f0:	64 c0       	rjmp	.+200    	; 0x24ba <KEYPAD_u8ReadButton+0x62e>
	else if (__tmp > 65535)
    23f2:	fe 01       	movw	r30, r28
    23f4:	e1 55       	subi	r30, 0x51	; 81
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	60 81       	ld	r22, Z
    23fa:	71 81       	ldd	r23, Z+1	; 0x01
    23fc:	82 81       	ldd	r24, Z+2	; 0x02
    23fe:	93 81       	ldd	r25, Z+3	; 0x03
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	3f ef       	ldi	r19, 0xFF	; 255
    2404:	4f e7       	ldi	r20, 0x7F	; 127
    2406:	57 e4       	ldi	r21, 0x47	; 71
    2408:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    240c:	18 16       	cp	r1, r24
    240e:	0c f0       	brlt	.+2      	; 0x2412 <KEYPAD_u8ReadButton+0x586>
    2410:	43 c0       	rjmp	.+134    	; 0x2498 <KEYPAD_u8ReadButton+0x60c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2412:	fe 01       	movw	r30, r28
    2414:	ed 54       	subi	r30, 0x4D	; 77
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	60 81       	ld	r22, Z
    241a:	71 81       	ldd	r23, Z+1	; 0x01
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e2       	ldi	r20, 0x20	; 32
    2426:	51 e4       	ldi	r21, 0x41	; 65
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8e 01       	movw	r16, r28
    2432:	03 55       	subi	r16, 0x53	; 83
    2434:	1f 4f       	sbci	r17, 0xFF	; 255
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	f8 01       	movw	r30, r16
    2444:	91 83       	std	Z+1, r25	; 0x01
    2446:	80 83       	st	Z, r24
    2448:	1f c0       	rjmp	.+62     	; 0x2488 <KEYPAD_u8ReadButton+0x5fc>
    244a:	fe 01       	movw	r30, r28
    244c:	e5 55       	subi	r30, 0x55	; 85
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	88 ec       	ldi	r24, 0xC8	; 200
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	80 83       	st	Z, r24
    2458:	fe 01       	movw	r30, r28
    245a:	e5 55       	subi	r30, 0x55	; 85
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 81       	ld	r24, Z
    2460:	91 81       	ldd	r25, Z+1	; 0x01
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <KEYPAD_u8ReadButton+0x5d6>
    2466:	fe 01       	movw	r30, r28
    2468:	e5 55       	subi	r30, 0x55	; 85
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	91 83       	std	Z+1, r25	; 0x01
    246e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2470:	de 01       	movw	r26, r28
    2472:	a3 55       	subi	r26, 0x53	; 83
    2474:	bf 4f       	sbci	r27, 0xFF	; 255
    2476:	fe 01       	movw	r30, r28
    2478:	e3 55       	subi	r30, 0x53	; 83
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	80 81       	ld	r24, Z
    247e:	91 81       	ldd	r25, Z+1	; 0x01
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	11 96       	adiw	r26, 0x01	; 1
    2484:	9c 93       	st	X, r25
    2486:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2488:	fe 01       	movw	r30, r28
    248a:	e3 55       	subi	r30, 0x53	; 83
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	d1 f6       	brne	.-76     	; 0x244a <KEYPAD_u8ReadButton+0x5be>
    2496:	28 c0       	rjmp	.+80     	; 0x24e8 <KEYPAD_u8ReadButton+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2498:	8e 01       	movw	r16, r28
    249a:	03 55       	subi	r16, 0x53	; 83
    249c:	1f 4f       	sbci	r17, 0xFF	; 255
    249e:	fe 01       	movw	r30, r28
    24a0:	e1 55       	subi	r30, 0x51	; 81
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	82 81       	ldd	r24, Z+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	f8 01       	movw	r30, r16
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	80 83       	st	Z, r24
    24ba:	de 01       	movw	r26, r28
    24bc:	a7 55       	subi	r26, 0x57	; 87
    24be:	bf 4f       	sbci	r27, 0xFF	; 255
    24c0:	fe 01       	movw	r30, r28
    24c2:	e3 55       	subi	r30, 0x53	; 83
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 81       	ld	r24, Z
    24c8:	91 81       	ldd	r25, Z+1	; 0x01
    24ca:	11 96       	adiw	r26, 0x01	; 1
    24cc:	9c 93       	st	X, r25
    24ce:	8e 93       	st	-X, r24
    24d0:	fe 01       	movw	r30, r28
    24d2:	e7 55       	subi	r30, 0x57	; 87
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 81       	ld	r24, Z
    24d8:	91 81       	ldd	r25, Z+1	; 0x01
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <KEYPAD_u8ReadButton+0x64e>
    24de:	fe 01       	movw	r30, r28
    24e0:	e7 55       	subi	r30, 0x57	; 87
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	80 83       	st	Z, r24
			_delay_ms(10);
			return Btn_Num4 ;
    24e8:	f4 e0       	ldi	r31, 0x04	; 4
    24ea:	cf 51       	subi	r28, 0x1F	; 31
    24ec:	df 4f       	sbci	r29, 0xFF	; 255
    24ee:	f8 83       	st	Y, r31
    24f0:	c1 5e       	subi	r28, 0xE1	; 225
    24f2:	d0 40       	sbci	r29, 0x00	; 0
    24f4:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		DIO_voidSetPinValue    ( KEYPAD_PORT , ROW1 , High  );
    24f8:	82 e0       	ldi	r24, 0x02	; 2
    24fa:	60 e0       	ldi	r22, 0x00	; 0
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>

		//////////////// ROW 2  /////////////

		DIO_voidSetPinValue    ( KEYPAD_PORT , ROW2 , Low  );
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	61 e0       	ldi	r22, 0x01	; 1
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
		if( DIO_u8GetPinValue( KEYPAD_PORT , COL1) == IS_Pressed )
    250c:	82 e0       	ldi	r24, 0x02	; 2
    250e:	64 e0       	ldi	r22, 0x04	; 4
    2510:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    2514:	88 23       	and	r24, r24
    2516:	09 f0       	breq	.+2      	; 0x251a <KEYPAD_u8ReadButton+0x68e>
    2518:	c2 c0       	rjmp	.+388    	; 0x269e <KEYPAD_u8ReadButton+0x812>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL1) == IS_Pressed) ;
    251a:	82 e0       	ldi	r24, 0x02	; 2
    251c:	64 e0       	ldi	r22, 0x04	; 4
    251e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    2522:	88 23       	and	r24, r24
    2524:	d1 f3       	breq	.-12     	; 0x251a <KEYPAD_u8ReadButton+0x68e>
    2526:	fe 01       	movw	r30, r28
    2528:	eb 55       	subi	r30, 0x5B	; 91
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	a0 e2       	ldi	r26, 0x20	; 32
    2532:	b1 e4       	ldi	r27, 0x41	; 65
    2534:	80 83       	st	Z, r24
    2536:	91 83       	std	Z+1, r25	; 0x01
    2538:	a2 83       	std	Z+2, r26	; 0x02
    253a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253c:	8e 01       	movw	r16, r28
    253e:	0f 55       	subi	r16, 0x5F	; 95
    2540:	1f 4f       	sbci	r17, 0xFF	; 255
    2542:	fe 01       	movw	r30, r28
    2544:	eb 55       	subi	r30, 0x5B	; 91
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	60 81       	ld	r22, Z
    254a:	71 81       	ldd	r23, Z+1	; 0x01
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	93 81       	ldd	r25, Z+3	; 0x03
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	4a ef       	ldi	r20, 0xFA	; 250
    2556:	54 e4       	ldi	r21, 0x44	; 68
    2558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	f8 01       	movw	r30, r16
    2562:	80 83       	st	Z, r24
    2564:	91 83       	std	Z+1, r25	; 0x01
    2566:	a2 83       	std	Z+2, r26	; 0x02
    2568:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    256a:	fe 01       	movw	r30, r28
    256c:	ef 55       	subi	r30, 0x5F	; 95
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	60 81       	ld	r22, Z
    2572:	71 81       	ldd	r23, Z+1	; 0x01
    2574:	82 81       	ldd	r24, Z+2	; 0x02
    2576:	93 81       	ldd	r25, Z+3	; 0x03
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e8       	ldi	r20, 0x80	; 128
    257e:	5f e3       	ldi	r21, 0x3F	; 63
    2580:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2584:	88 23       	and	r24, r24
    2586:	44 f4       	brge	.+16     	; 0x2598 <KEYPAD_u8ReadButton+0x70c>
		__ticks = 1;
    2588:	fe 01       	movw	r30, r28
    258a:	e1 56       	subi	r30, 0x61	; 97
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	91 83       	std	Z+1, r25	; 0x01
    2594:	80 83       	st	Z, r24
    2596:	64 c0       	rjmp	.+200    	; 0x2660 <KEYPAD_u8ReadButton+0x7d4>
	else if (__tmp > 65535)
    2598:	fe 01       	movw	r30, r28
    259a:	ef 55       	subi	r30, 0x5F	; 95
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	60 81       	ld	r22, Z
    25a0:	71 81       	ldd	r23, Z+1	; 0x01
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	3f ef       	ldi	r19, 0xFF	; 255
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	57 e4       	ldi	r21, 0x47	; 71
    25ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	0c f0       	brlt	.+2      	; 0x25b8 <KEYPAD_u8ReadButton+0x72c>
    25b6:	43 c0       	rjmp	.+134    	; 0x263e <KEYPAD_u8ReadButton+0x7b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b8:	fe 01       	movw	r30, r28
    25ba:	eb 55       	subi	r30, 0x5B	; 91
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	60 81       	ld	r22, Z
    25c0:	71 81       	ldd	r23, Z+1	; 0x01
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e2       	ldi	r20, 0x20	; 32
    25cc:	51 e4       	ldi	r21, 0x41	; 65
    25ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	8e 01       	movw	r16, r28
    25d8:	01 56       	subi	r16, 0x61	; 97
    25da:	1f 4f       	sbci	r17, 0xFF	; 255
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	f8 01       	movw	r30, r16
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
    25ee:	1f c0       	rjmp	.+62     	; 0x262e <KEYPAD_u8ReadButton+0x7a2>
    25f0:	fe 01       	movw	r30, r28
    25f2:	e3 56       	subi	r30, 0x63	; 99
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	88 ec       	ldi	r24, 0xC8	; 200
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
    25fe:	fe 01       	movw	r30, r28
    2600:	e3 56       	subi	r30, 0x63	; 99
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 81       	ld	r24, Z
    2606:	91 81       	ldd	r25, Z+1	; 0x01
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <KEYPAD_u8ReadButton+0x77c>
    260c:	fe 01       	movw	r30, r28
    260e:	e3 56       	subi	r30, 0x63	; 99
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2616:	de 01       	movw	r26, r28
    2618:	a1 56       	subi	r26, 0x61	; 97
    261a:	bf 4f       	sbci	r27, 0xFF	; 255
    261c:	fe 01       	movw	r30, r28
    261e:	e1 56       	subi	r30, 0x61	; 97
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	11 96       	adiw	r26, 0x01	; 1
    262a:	9c 93       	st	X, r25
    262c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262e:	fe 01       	movw	r30, r28
    2630:	e1 56       	subi	r30, 0x61	; 97
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	d1 f6       	brne	.-76     	; 0x25f0 <KEYPAD_u8ReadButton+0x764>
    263c:	28 c0       	rjmp	.+80     	; 0x268e <KEYPAD_u8ReadButton+0x802>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263e:	8e 01       	movw	r16, r28
    2640:	01 56       	subi	r16, 0x61	; 97
    2642:	1f 4f       	sbci	r17, 0xFF	; 255
    2644:	fe 01       	movw	r30, r28
    2646:	ef 55       	subi	r30, 0x5F	; 95
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	60 81       	ld	r22, Z
    264c:	71 81       	ldd	r23, Z+1	; 0x01
    264e:	82 81       	ldd	r24, Z+2	; 0x02
    2650:	93 81       	ldd	r25, Z+3	; 0x03
    2652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	f8 01       	movw	r30, r16
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	80 83       	st	Z, r24
    2660:	de 01       	movw	r26, r28
    2662:	a5 56       	subi	r26, 0x65	; 101
    2664:	bf 4f       	sbci	r27, 0xFF	; 255
    2666:	fe 01       	movw	r30, r28
    2668:	e1 56       	subi	r30, 0x61	; 97
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	91 81       	ldd	r25, Z+1	; 0x01
    2670:	11 96       	adiw	r26, 0x01	; 1
    2672:	9c 93       	st	X, r25
    2674:	8e 93       	st	-X, r24
    2676:	fe 01       	movw	r30, r28
    2678:	e5 56       	subi	r30, 0x65	; 101
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	f1 f7       	brne	.-4      	; 0x2680 <KEYPAD_u8ReadButton+0x7f4>
    2684:	fe 01       	movw	r30, r28
    2686:	e5 56       	subi	r30, 0x65	; 101
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
			_delay_ms(10);
			return Btn_Num5 ;
    268e:	f5 e0       	ldi	r31, 0x05	; 5
    2690:	cf 51       	subi	r28, 0x1F	; 31
    2692:	df 4f       	sbci	r29, 0xFF	; 255
    2694:	f8 83       	st	Y, r31
    2696:	c1 5e       	subi	r28, 0xE1	; 225
    2698:	d0 40       	sbci	r29, 0x00	; 0
    269a:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		else if( DIO_u8GetPinValue( KEYPAD_PORT , COL2) == IS_Pressed )
    269e:	82 e0       	ldi	r24, 0x02	; 2
    26a0:	65 e0       	ldi	r22, 0x05	; 5
    26a2:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    26a6:	88 23       	and	r24, r24
    26a8:	09 f0       	breq	.+2      	; 0x26ac <KEYPAD_u8ReadButton+0x820>
    26aa:	c1 c0       	rjmp	.+386    	; 0x282e <KEYPAD_u8ReadButton+0x9a2>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL2) == IS_Pressed) ;
    26ac:	82 e0       	ldi	r24, 0x02	; 2
    26ae:	65 e0       	ldi	r22, 0x05	; 5
    26b0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    26b4:	88 23       	and	r24, r24
    26b6:	d1 f3       	breq	.-12     	; 0x26ac <KEYPAD_u8ReadButton+0x820>
    26b8:	fe 01       	movw	r30, r28
    26ba:	e9 56       	subi	r30, 0x69	; 105
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	a0 e2       	ldi	r26, 0x20	; 32
    26c4:	b1 e4       	ldi	r27, 0x41	; 65
    26c6:	80 83       	st	Z, r24
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	a2 83       	std	Z+2, r26	; 0x02
    26cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ce:	8e 01       	movw	r16, r28
    26d0:	0d 56       	subi	r16, 0x6D	; 109
    26d2:	1f 4f       	sbci	r17, 0xFF	; 255
    26d4:	fe 01       	movw	r30, r28
    26d6:	e9 56       	subi	r30, 0x69	; 105
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	4a ef       	ldi	r20, 0xFA	; 250
    26e8:	54 e4       	ldi	r21, 0x44	; 68
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	f8 01       	movw	r30, r16
    26f4:	80 83       	st	Z, r24
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	a2 83       	std	Z+2, r26	; 0x02
    26fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26fc:	fe 01       	movw	r30, r28
    26fe:	ed 56       	subi	r30, 0x6D	; 109
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	60 81       	ld	r22, Z
    2704:	71 81       	ldd	r23, Z+1	; 0x01
    2706:	82 81       	ldd	r24, Z+2	; 0x02
    2708:	93 81       	ldd	r25, Z+3	; 0x03
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e8       	ldi	r20, 0x80	; 128
    2710:	5f e3       	ldi	r21, 0x3F	; 63
    2712:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2716:	88 23       	and	r24, r24
    2718:	44 f4       	brge	.+16     	; 0x272a <KEYPAD_u8ReadButton+0x89e>
		__ticks = 1;
    271a:	fe 01       	movw	r30, r28
    271c:	ef 56       	subi	r30, 0x6F	; 111
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
    2728:	64 c0       	rjmp	.+200    	; 0x27f2 <KEYPAD_u8ReadButton+0x966>
	else if (__tmp > 65535)
    272a:	fe 01       	movw	r30, r28
    272c:	ed 56       	subi	r30, 0x6D	; 109
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	82 81       	ldd	r24, Z+2	; 0x02
    2736:	93 81       	ldd	r25, Z+3	; 0x03
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	3f ef       	ldi	r19, 0xFF	; 255
    273c:	4f e7       	ldi	r20, 0x7F	; 127
    273e:	57 e4       	ldi	r21, 0x47	; 71
    2740:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2744:	18 16       	cp	r1, r24
    2746:	0c f0       	brlt	.+2      	; 0x274a <KEYPAD_u8ReadButton+0x8be>
    2748:	43 c0       	rjmp	.+134    	; 0x27d0 <KEYPAD_u8ReadButton+0x944>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274a:	fe 01       	movw	r30, r28
    274c:	e9 56       	subi	r30, 0x69	; 105
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	60 81       	ld	r22, Z
    2752:	71 81       	ldd	r23, Z+1	; 0x01
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e2       	ldi	r20, 0x20	; 32
    275e:	51 e4       	ldi	r21, 0x41	; 65
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	8e 01       	movw	r16, r28
    276a:	0f 56       	subi	r16, 0x6F	; 111
    276c:	1f 4f       	sbci	r17, 0xFF	; 255
    276e:	bc 01       	movw	r22, r24
    2770:	cd 01       	movw	r24, r26
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	f8 01       	movw	r30, r16
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	80 83       	st	Z, r24
    2780:	1f c0       	rjmp	.+62     	; 0x27c0 <KEYPAD_u8ReadButton+0x934>
    2782:	fe 01       	movw	r30, r28
    2784:	e1 57       	subi	r30, 0x71	; 113
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	88 ec       	ldi	r24, 0xC8	; 200
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	80 83       	st	Z, r24
    2790:	fe 01       	movw	r30, r28
    2792:	e1 57       	subi	r30, 0x71	; 113
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	f1 f7       	brne	.-4      	; 0x279a <KEYPAD_u8ReadButton+0x90e>
    279e:	fe 01       	movw	r30, r28
    27a0:	e1 57       	subi	r30, 0x71	; 113
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	91 83       	std	Z+1, r25	; 0x01
    27a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a8:	de 01       	movw	r26, r28
    27aa:	af 56       	subi	r26, 0x6F	; 111
    27ac:	bf 4f       	sbci	r27, 0xFF	; 255
    27ae:	fe 01       	movw	r30, r28
    27b0:	ef 56       	subi	r30, 0x6F	; 111
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 81       	ld	r24, Z
    27b6:	91 81       	ldd	r25, Z+1	; 0x01
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	11 96       	adiw	r26, 0x01	; 1
    27bc:	9c 93       	st	X, r25
    27be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c0:	fe 01       	movw	r30, r28
    27c2:	ef 56       	subi	r30, 0x6F	; 111
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	80 81       	ld	r24, Z
    27c8:	91 81       	ldd	r25, Z+1	; 0x01
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	d1 f6       	brne	.-76     	; 0x2782 <KEYPAD_u8ReadButton+0x8f6>
    27ce:	28 c0       	rjmp	.+80     	; 0x2820 <KEYPAD_u8ReadButton+0x994>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d0:	8e 01       	movw	r16, r28
    27d2:	0f 56       	subi	r16, 0x6F	; 111
    27d4:	1f 4f       	sbci	r17, 0xFF	; 255
    27d6:	fe 01       	movw	r30, r28
    27d8:	ed 56       	subi	r30, 0x6D	; 109
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	60 81       	ld	r22, Z
    27de:	71 81       	ldd	r23, Z+1	; 0x01
    27e0:	82 81       	ldd	r24, Z+2	; 0x02
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	f8 01       	movw	r30, r16
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	80 83       	st	Z, r24
    27f2:	de 01       	movw	r26, r28
    27f4:	a3 57       	subi	r26, 0x73	; 115
    27f6:	bf 4f       	sbci	r27, 0xFF	; 255
    27f8:	fe 01       	movw	r30, r28
    27fa:	ef 56       	subi	r30, 0x6F	; 111
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	80 81       	ld	r24, Z
    2800:	91 81       	ldd	r25, Z+1	; 0x01
    2802:	11 96       	adiw	r26, 0x01	; 1
    2804:	9c 93       	st	X, r25
    2806:	8e 93       	st	-X, r24
    2808:	fe 01       	movw	r30, r28
    280a:	e3 57       	subi	r30, 0x73	; 115
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	80 81       	ld	r24, Z
    2810:	91 81       	ldd	r25, Z+1	; 0x01
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <KEYPAD_u8ReadButton+0x986>
    2816:	fe 01       	movw	r30, r28
    2818:	e3 57       	subi	r30, 0x73	; 115
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	91 83       	std	Z+1, r25	; 0x01
    281e:	80 83       	st	Z, r24
			_delay_ms(10);
			return Btn_Num6 ;
    2820:	f6 e0       	ldi	r31, 0x06	; 6
    2822:	cf 51       	subi	r28, 0x1F	; 31
    2824:	df 4f       	sbci	r29, 0xFF	; 255
    2826:	f8 83       	st	Y, r31
    2828:	c1 5e       	subi	r28, 0xE1	; 225
    282a:	d0 40       	sbci	r29, 0x00	; 0
    282c:	b4 c6       	rjmp	.+3432   	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		else if( DIO_u8GetPinValue( KEYPAD_PORT , COL3) == IS_Pressed )
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	66 e0       	ldi	r22, 0x06	; 6
    2832:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    2836:	88 23       	and	r24, r24
    2838:	09 f0       	breq	.+2      	; 0x283c <KEYPAD_u8ReadButton+0x9b0>
    283a:	c1 c0       	rjmp	.+386    	; 0x29be <KEYPAD_u8ReadButton+0xb32>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL3) == IS_Pressed) ;
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	66 e0       	ldi	r22, 0x06	; 6
    2840:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    2844:	88 23       	and	r24, r24
    2846:	d1 f3       	breq	.-12     	; 0x283c <KEYPAD_u8ReadButton+0x9b0>
    2848:	fe 01       	movw	r30, r28
    284a:	e7 57       	subi	r30, 0x77	; 119
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	a0 e2       	ldi	r26, 0x20	; 32
    2854:	b1 e4       	ldi	r27, 0x41	; 65
    2856:	80 83       	st	Z, r24
    2858:	91 83       	std	Z+1, r25	; 0x01
    285a:	a2 83       	std	Z+2, r26	; 0x02
    285c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285e:	8e 01       	movw	r16, r28
    2860:	0b 57       	subi	r16, 0x7B	; 123
    2862:	1f 4f       	sbci	r17, 0xFF	; 255
    2864:	fe 01       	movw	r30, r28
    2866:	e7 57       	subi	r30, 0x77	; 119
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	60 81       	ld	r22, Z
    286c:	71 81       	ldd	r23, Z+1	; 0x01
    286e:	82 81       	ldd	r24, Z+2	; 0x02
    2870:	93 81       	ldd	r25, Z+3	; 0x03
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	4a ef       	ldi	r20, 0xFA	; 250
    2878:	54 e4       	ldi	r21, 0x44	; 68
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	f8 01       	movw	r30, r16
    2884:	80 83       	st	Z, r24
    2886:	91 83       	std	Z+1, r25	; 0x01
    2888:	a2 83       	std	Z+2, r26	; 0x02
    288a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    288c:	fe 01       	movw	r30, r28
    288e:	eb 57       	subi	r30, 0x7B	; 123
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	60 81       	ld	r22, Z
    2894:	71 81       	ldd	r23, Z+1	; 0x01
    2896:	82 81       	ldd	r24, Z+2	; 0x02
    2898:	93 81       	ldd	r25, Z+3	; 0x03
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e8       	ldi	r20, 0x80	; 128
    28a0:	5f e3       	ldi	r21, 0x3F	; 63
    28a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28a6:	88 23       	and	r24, r24
    28a8:	44 f4       	brge	.+16     	; 0x28ba <KEYPAD_u8ReadButton+0xa2e>
		__ticks = 1;
    28aa:	fe 01       	movw	r30, r28
    28ac:	ed 57       	subi	r30, 0x7D	; 125
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	91 83       	std	Z+1, r25	; 0x01
    28b6:	80 83       	st	Z, r24
    28b8:	64 c0       	rjmp	.+200    	; 0x2982 <KEYPAD_u8ReadButton+0xaf6>
	else if (__tmp > 65535)
    28ba:	fe 01       	movw	r30, r28
    28bc:	eb 57       	subi	r30, 0x7B	; 123
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	60 81       	ld	r22, Z
    28c2:	71 81       	ldd	r23, Z+1	; 0x01
    28c4:	82 81       	ldd	r24, Z+2	; 0x02
    28c6:	93 81       	ldd	r25, Z+3	; 0x03
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	3f ef       	ldi	r19, 0xFF	; 255
    28cc:	4f e7       	ldi	r20, 0x7F	; 127
    28ce:	57 e4       	ldi	r21, 0x47	; 71
    28d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d4:	18 16       	cp	r1, r24
    28d6:	0c f0       	brlt	.+2      	; 0x28da <KEYPAD_u8ReadButton+0xa4e>
    28d8:	43 c0       	rjmp	.+134    	; 0x2960 <KEYPAD_u8ReadButton+0xad4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28da:	fe 01       	movw	r30, r28
    28dc:	e7 57       	subi	r30, 0x77	; 119
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	8e 01       	movw	r16, r28
    28fa:	0d 57       	subi	r16, 0x7D	; 125
    28fc:	1f 4f       	sbci	r17, 0xFF	; 255
    28fe:	bc 01       	movw	r22, r24
    2900:	cd 01       	movw	r24, r26
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	f8 01       	movw	r30, r16
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
    2910:	1f c0       	rjmp	.+62     	; 0x2950 <KEYPAD_u8ReadButton+0xac4>
    2912:	fe 01       	movw	r30, r28
    2914:	ef 57       	subi	r30, 0x7F	; 127
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	88 ec       	ldi	r24, 0xC8	; 200
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	80 83       	st	Z, r24
    2920:	fe 01       	movw	r30, r28
    2922:	ef 57       	subi	r30, 0x7F	; 127
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	80 81       	ld	r24, Z
    2928:	91 81       	ldd	r25, Z+1	; 0x01
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <KEYPAD_u8ReadButton+0xa9e>
    292e:	fe 01       	movw	r30, r28
    2930:	ef 57       	subi	r30, 0x7F	; 127
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2938:	de 01       	movw	r26, r28
    293a:	ad 57       	subi	r26, 0x7D	; 125
    293c:	bf 4f       	sbci	r27, 0xFF	; 255
    293e:	fe 01       	movw	r30, r28
    2940:	ed 57       	subi	r30, 0x7D	; 125
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	80 81       	ld	r24, Z
    2946:	91 81       	ldd	r25, Z+1	; 0x01
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	11 96       	adiw	r26, 0x01	; 1
    294c:	9c 93       	st	X, r25
    294e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2950:	fe 01       	movw	r30, r28
    2952:	ed 57       	subi	r30, 0x7D	; 125
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	d1 f6       	brne	.-76     	; 0x2912 <KEYPAD_u8ReadButton+0xa86>
    295e:	28 c0       	rjmp	.+80     	; 0x29b0 <KEYPAD_u8ReadButton+0xb24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2960:	8e 01       	movw	r16, r28
    2962:	0d 57       	subi	r16, 0x7D	; 125
    2964:	1f 4f       	sbci	r17, 0xFF	; 255
    2966:	fe 01       	movw	r30, r28
    2968:	eb 57       	subi	r30, 0x7B	; 123
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	f8 01       	movw	r30, r16
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	80 83       	st	Z, r24
    2982:	de 01       	movw	r26, r28
    2984:	a1 58       	subi	r26, 0x81	; 129
    2986:	bf 4f       	sbci	r27, 0xFF	; 255
    2988:	fe 01       	movw	r30, r28
    298a:	ed 57       	subi	r30, 0x7D	; 125
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	11 96       	adiw	r26, 0x01	; 1
    2994:	9c 93       	st	X, r25
    2996:	8e 93       	st	-X, r24
    2998:	fe 01       	movw	r30, r28
    299a:	e1 58       	subi	r30, 0x81	; 129
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 81       	ld	r24, Z
    29a0:	91 81       	ldd	r25, Z+1	; 0x01
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <KEYPAD_u8ReadButton+0xb16>
    29a6:	fe 01       	movw	r30, r28
    29a8:	e1 58       	subi	r30, 0x81	; 129
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
			_delay_ms(10);
			return Btn_Num7 ;
    29b0:	f7 e0       	ldi	r31, 0x07	; 7
    29b2:	cf 51       	subi	r28, 0x1F	; 31
    29b4:	df 4f       	sbci	r29, 0xFF	; 255
    29b6:	f8 83       	st	Y, r31
    29b8:	c1 5e       	subi	r28, 0xE1	; 225
    29ba:	d0 40       	sbci	r29, 0x00	; 0
    29bc:	ec c5       	rjmp	.+3032   	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		else if( DIO_u8GetPinValue( KEYPAD_PORT , COL4) == IS_Pressed )
    29be:	82 e0       	ldi	r24, 0x02	; 2
    29c0:	67 e0       	ldi	r22, 0x07	; 7
    29c2:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    29c6:	88 23       	and	r24, r24
    29c8:	09 f0       	breq	.+2      	; 0x29cc <KEYPAD_u8ReadButton+0xb40>
    29ca:	c1 c0       	rjmp	.+386    	; 0x2b4e <KEYPAD_u8ReadButton+0xcc2>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL4) == IS_Pressed) ;
    29cc:	82 e0       	ldi	r24, 0x02	; 2
    29ce:	67 e0       	ldi	r22, 0x07	; 7
    29d0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    29d4:	88 23       	and	r24, r24
    29d6:	d1 f3       	breq	.-12     	; 0x29cc <KEYPAD_u8ReadButton+0xb40>
    29d8:	fe 01       	movw	r30, r28
    29da:	e5 58       	subi	r30, 0x85	; 133
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	a0 e2       	ldi	r26, 0x20	; 32
    29e4:	b1 e4       	ldi	r27, 0x41	; 65
    29e6:	80 83       	st	Z, r24
    29e8:	91 83       	std	Z+1, r25	; 0x01
    29ea:	a2 83       	std	Z+2, r26	; 0x02
    29ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ee:	8e 01       	movw	r16, r28
    29f0:	09 58       	subi	r16, 0x89	; 137
    29f2:	1f 4f       	sbci	r17, 0xFF	; 255
    29f4:	fe 01       	movw	r30, r28
    29f6:	e5 58       	subi	r30, 0x85	; 133
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	60 81       	ld	r22, Z
    29fc:	71 81       	ldd	r23, Z+1	; 0x01
    29fe:	82 81       	ldd	r24, Z+2	; 0x02
    2a00:	93 81       	ldd	r25, Z+3	; 0x03
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	4a ef       	ldi	r20, 0xFA	; 250
    2a08:	54 e4       	ldi	r21, 0x44	; 68
    2a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	f8 01       	movw	r30, r16
    2a14:	80 83       	st	Z, r24
    2a16:	91 83       	std	Z+1, r25	; 0x01
    2a18:	a2 83       	std	Z+2, r26	; 0x02
    2a1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e9 58       	subi	r30, 0x89	; 137
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	60 81       	ld	r22, Z
    2a24:	71 81       	ldd	r23, Z+1	; 0x01
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e8       	ldi	r20, 0x80	; 128
    2a30:	5f e3       	ldi	r21, 0x3F	; 63
    2a32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a36:	88 23       	and	r24, r24
    2a38:	44 f4       	brge	.+16     	; 0x2a4a <KEYPAD_u8ReadButton+0xbbe>
		__ticks = 1;
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	eb 58       	subi	r30, 0x8B	; 139
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	80 83       	st	Z, r24
    2a48:	64 c0       	rjmp	.+200    	; 0x2b12 <KEYPAD_u8ReadButton+0xc86>
	else if (__tmp > 65535)
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e9 58       	subi	r30, 0x89	; 137
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	60 81       	ld	r22, Z
    2a52:	71 81       	ldd	r23, Z+1	; 0x01
    2a54:	82 81       	ldd	r24, Z+2	; 0x02
    2a56:	93 81       	ldd	r25, Z+3	; 0x03
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	3f ef       	ldi	r19, 0xFF	; 255
    2a5c:	4f e7       	ldi	r20, 0x7F	; 127
    2a5e:	57 e4       	ldi	r21, 0x47	; 71
    2a60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a64:	18 16       	cp	r1, r24
    2a66:	0c f0       	brlt	.+2      	; 0x2a6a <KEYPAD_u8ReadButton+0xbde>
    2a68:	43 c0       	rjmp	.+134    	; 0x2af0 <KEYPAD_u8ReadButton+0xc64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e5 58       	subi	r30, 0x85	; 133
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	60 81       	ld	r22, Z
    2a72:	71 81       	ldd	r23, Z+1	; 0x01
    2a74:	82 81       	ldd	r24, Z+2	; 0x02
    2a76:	93 81       	ldd	r25, Z+3	; 0x03
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e2       	ldi	r20, 0x20	; 32
    2a7e:	51 e4       	ldi	r21, 0x41	; 65
    2a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	8e 01       	movw	r16, r28
    2a8a:	0b 58       	subi	r16, 0x8B	; 139
    2a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	f8 01       	movw	r30, r16
    2a9c:	91 83       	std	Z+1, r25	; 0x01
    2a9e:	80 83       	st	Z, r24
    2aa0:	1f c0       	rjmp	.+62     	; 0x2ae0 <KEYPAD_u8ReadButton+0xc54>
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	ed 58       	subi	r30, 0x8D	; 141
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	88 ec       	ldi	r24, 0xC8	; 200
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	91 83       	std	Z+1, r25	; 0x01
    2aae:	80 83       	st	Z, r24
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ed 58       	subi	r30, 0x8D	; 141
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	80 81       	ld	r24, Z
    2ab8:	91 81       	ldd	r25, Z+1	; 0x01
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <KEYPAD_u8ReadButton+0xc2e>
    2abe:	fe 01       	movw	r30, r28
    2ac0:	ed 58       	subi	r30, 0x8D	; 141
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac8:	de 01       	movw	r26, r28
    2aca:	ab 58       	subi	r26, 0x8B	; 139
    2acc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ace:	fe 01       	movw	r30, r28
    2ad0:	eb 58       	subi	r30, 0x8B	; 139
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	91 81       	ldd	r25, Z+1	; 0x01
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	11 96       	adiw	r26, 0x01	; 1
    2adc:	9c 93       	st	X, r25
    2ade:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	eb 58       	subi	r30, 0x8B	; 139
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	91 81       	ldd	r25, Z+1	; 0x01
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	d1 f6       	brne	.-76     	; 0x2aa2 <KEYPAD_u8ReadButton+0xc16>
    2aee:	28 c0       	rjmp	.+80     	; 0x2b40 <KEYPAD_u8ReadButton+0xcb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af0:	8e 01       	movw	r16, r28
    2af2:	0b 58       	subi	r16, 0x8B	; 139
    2af4:	1f 4f       	sbci	r17, 0xFF	; 255
    2af6:	fe 01       	movw	r30, r28
    2af8:	e9 58       	subi	r30, 0x89	; 137
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	f8 01       	movw	r30, r16
    2b0e:	91 83       	std	Z+1, r25	; 0x01
    2b10:	80 83       	st	Z, r24
    2b12:	de 01       	movw	r26, r28
    2b14:	af 58       	subi	r26, 0x8F	; 143
    2b16:	bf 4f       	sbci	r27, 0xFF	; 255
    2b18:	fe 01       	movw	r30, r28
    2b1a:	eb 58       	subi	r30, 0x8B	; 139
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	80 81       	ld	r24, Z
    2b20:	91 81       	ldd	r25, Z+1	; 0x01
    2b22:	11 96       	adiw	r26, 0x01	; 1
    2b24:	9c 93       	st	X, r25
    2b26:	8e 93       	st	-X, r24
    2b28:	fe 01       	movw	r30, r28
    2b2a:	ef 58       	subi	r30, 0x8F	; 143
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 81       	ld	r24, Z
    2b30:	91 81       	ldd	r25, Z+1	; 0x01
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	f1 f7       	brne	.-4      	; 0x2b32 <KEYPAD_u8ReadButton+0xca6>
    2b36:	fe 01       	movw	r30, r28
    2b38:	ef 58       	subi	r30, 0x8F	; 143
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	91 83       	std	Z+1, r25	; 0x01
    2b3e:	80 83       	st	Z, r24
			_delay_ms(10);
			return Btn_Num8 ;
    2b40:	f8 e0       	ldi	r31, 0x08	; 8
    2b42:	cf 51       	subi	r28, 0x1F	; 31
    2b44:	df 4f       	sbci	r29, 0xFF	; 255
    2b46:	f8 83       	st	Y, r31
    2b48:	c1 5e       	subi	r28, 0xE1	; 225
    2b4a:	d0 40       	sbci	r29, 0x00	; 0
    2b4c:	24 c5       	rjmp	.+2632   	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		DIO_voidSetPinValue    ( KEYPAD_PORT , ROW2 , High  );
    2b4e:	82 e0       	ldi	r24, 0x02	; 2
    2b50:	61 e0       	ldi	r22, 0x01	; 1
    2b52:	41 e0       	ldi	r20, 0x01	; 1
    2b54:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>

		//////////////// ROW 3  /////////////

		DIO_voidSetPinValue    ( KEYPAD_PORT , ROW3 , Low  );
    2b58:	82 e0       	ldi	r24, 0x02	; 2
    2b5a:	62 e0       	ldi	r22, 0x02	; 2
    2b5c:	40 e0       	ldi	r20, 0x00	; 0
    2b5e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
		if( DIO_u8GetPinValue( KEYPAD_PORT , COL1) == IS_Pressed )
    2b62:	82 e0       	ldi	r24, 0x02	; 2
    2b64:	64 e0       	ldi	r22, 0x04	; 4
    2b66:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    2b6a:	88 23       	and	r24, r24
    2b6c:	09 f0       	breq	.+2      	; 0x2b70 <KEYPAD_u8ReadButton+0xce4>
    2b6e:	c1 c0       	rjmp	.+386    	; 0x2cf2 <KEYPAD_u8ReadButton+0xe66>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL1) == IS_Pressed) ;
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	64 e0       	ldi	r22, 0x04	; 4
    2b74:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    2b78:	88 23       	and	r24, r24
    2b7a:	d1 f3       	breq	.-12     	; 0x2b70 <KEYPAD_u8ReadButton+0xce4>
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e3 59       	subi	r30, 0x93	; 147
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	a0 e2       	ldi	r26, 0x20	; 32
    2b88:	b1 e4       	ldi	r27, 0x41	; 65
    2b8a:	80 83       	st	Z, r24
    2b8c:	91 83       	std	Z+1, r25	; 0x01
    2b8e:	a2 83       	std	Z+2, r26	; 0x02
    2b90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b92:	8e 01       	movw	r16, r28
    2b94:	07 59       	subi	r16, 0x97	; 151
    2b96:	1f 4f       	sbci	r17, 0xFF	; 255
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e3 59       	subi	r30, 0x93	; 147
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	4a ef       	ldi	r20, 0xFA	; 250
    2bac:	54 e4       	ldi	r21, 0x44	; 68
    2bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	80 83       	st	Z, r24
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	a2 83       	std	Z+2, r26	; 0x02
    2bbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e7 59       	subi	r30, 0x97	; 151
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	60 81       	ld	r22, Z
    2bc8:	71 81       	ldd	r23, Z+1	; 0x01
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e8       	ldi	r20, 0x80	; 128
    2bd4:	5f e3       	ldi	r21, 0x3F	; 63
    2bd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bda:	88 23       	and	r24, r24
    2bdc:	44 f4       	brge	.+16     	; 0x2bee <KEYPAD_u8ReadButton+0xd62>
		__ticks = 1;
    2bde:	fe 01       	movw	r30, r28
    2be0:	e9 59       	subi	r30, 0x99	; 153
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
    2bec:	64 c0       	rjmp	.+200    	; 0x2cb6 <KEYPAD_u8ReadButton+0xe2a>
	else if (__tmp > 65535)
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e7 59       	subi	r30, 0x97	; 151
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	60 81       	ld	r22, Z
    2bf6:	71 81       	ldd	r23, Z+1	; 0x01
    2bf8:	82 81       	ldd	r24, Z+2	; 0x02
    2bfa:	93 81       	ldd	r25, Z+3	; 0x03
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	3f ef       	ldi	r19, 0xFF	; 255
    2c00:	4f e7       	ldi	r20, 0x7F	; 127
    2c02:	57 e4       	ldi	r21, 0x47	; 71
    2c04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c08:	18 16       	cp	r1, r24
    2c0a:	0c f0       	brlt	.+2      	; 0x2c0e <KEYPAD_u8ReadButton+0xd82>
    2c0c:	43 c0       	rjmp	.+134    	; 0x2c94 <KEYPAD_u8ReadButton+0xe08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e3 59       	subi	r30, 0x93	; 147
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e2       	ldi	r20, 0x20	; 32
    2c22:	51 e4       	ldi	r21, 0x41	; 65
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	8e 01       	movw	r16, r28
    2c2e:	09 59       	subi	r16, 0x99	; 153
    2c30:	1f 4f       	sbci	r17, 0xFF	; 255
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	f8 01       	movw	r30, r16
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	80 83       	st	Z, r24
    2c44:	1f c0       	rjmp	.+62     	; 0x2c84 <KEYPAD_u8ReadButton+0xdf8>
    2c46:	fe 01       	movw	r30, r28
    2c48:	eb 59       	subi	r30, 0x9B	; 155
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	88 ec       	ldi	r24, 0xC8	; 200
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	80 83       	st	Z, r24
    2c54:	fe 01       	movw	r30, r28
    2c56:	eb 59       	subi	r30, 0x9B	; 155
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	f1 f7       	brne	.-4      	; 0x2c5e <KEYPAD_u8ReadButton+0xdd2>
    2c62:	fe 01       	movw	r30, r28
    2c64:	eb 59       	subi	r30, 0x9B	; 155
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6c:	de 01       	movw	r26, r28
    2c6e:	a9 59       	subi	r26, 0x99	; 153
    2c70:	bf 4f       	sbci	r27, 0xFF	; 255
    2c72:	fe 01       	movw	r30, r28
    2c74:	e9 59       	subi	r30, 0x99	; 153
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	80 81       	ld	r24, Z
    2c7a:	91 81       	ldd	r25, Z+1	; 0x01
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	11 96       	adiw	r26, 0x01	; 1
    2c80:	9c 93       	st	X, r25
    2c82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c84:	fe 01       	movw	r30, r28
    2c86:	e9 59       	subi	r30, 0x99	; 153
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 81       	ld	r24, Z
    2c8c:	91 81       	ldd	r25, Z+1	; 0x01
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	d1 f6       	brne	.-76     	; 0x2c46 <KEYPAD_u8ReadButton+0xdba>
    2c92:	28 c0       	rjmp	.+80     	; 0x2ce4 <KEYPAD_u8ReadButton+0xe58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c94:	8e 01       	movw	r16, r28
    2c96:	09 59       	subi	r16, 0x99	; 153
    2c98:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e7 59       	subi	r30, 0x97	; 151
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	f8 01       	movw	r30, r16
    2cb2:	91 83       	std	Z+1, r25	; 0x01
    2cb4:	80 83       	st	Z, r24
    2cb6:	de 01       	movw	r26, r28
    2cb8:	ad 59       	subi	r26, 0x9D	; 157
    2cba:	bf 4f       	sbci	r27, 0xFF	; 255
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e9 59       	subi	r30, 0x99	; 153
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	11 96       	adiw	r26, 0x01	; 1
    2cc8:	9c 93       	st	X, r25
    2cca:	8e 93       	st	-X, r24
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ed 59       	subi	r30, 0x9D	; 157
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 81       	ld	r24, Z
    2cd4:	91 81       	ldd	r25, Z+1	; 0x01
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <KEYPAD_u8ReadButton+0xe4a>
    2cda:	fe 01       	movw	r30, r28
    2cdc:	ed 59       	subi	r30, 0x9D	; 157
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	91 83       	std	Z+1, r25	; 0x01
    2ce2:	80 83       	st	Z, r24
			_delay_ms(10);
			return Btn_Num9 ;
    2ce4:	f9 e0       	ldi	r31, 0x09	; 9
    2ce6:	cf 51       	subi	r28, 0x1F	; 31
    2ce8:	df 4f       	sbci	r29, 0xFF	; 255
    2cea:	f8 83       	st	Y, r31
    2cec:	c1 5e       	subi	r28, 0xE1	; 225
    2cee:	d0 40       	sbci	r29, 0x00	; 0
    2cf0:	52 c4       	rjmp	.+2212   	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		else if( DIO_u8GetPinValue( KEYPAD_PORT , COL2) == IS_Pressed )
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	65 e0       	ldi	r22, 0x05	; 5
    2cf6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    2cfa:	88 23       	and	r24, r24
    2cfc:	09 f0       	breq	.+2      	; 0x2d00 <KEYPAD_u8ReadButton+0xe74>
    2cfe:	c1 c0       	rjmp	.+386    	; 0x2e82 <KEYPAD_u8ReadButton+0xff6>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL2) == IS_Pressed) ;
    2d00:	82 e0       	ldi	r24, 0x02	; 2
    2d02:	65 e0       	ldi	r22, 0x05	; 5
    2d04:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    2d08:	88 23       	and	r24, r24
    2d0a:	d1 f3       	breq	.-12     	; 0x2d00 <KEYPAD_u8ReadButton+0xe74>
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e1 5a       	subi	r30, 0xA1	; 161
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	a0 e2       	ldi	r26, 0x20	; 32
    2d18:	b1 e4       	ldi	r27, 0x41	; 65
    2d1a:	80 83       	st	Z, r24
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	a2 83       	std	Z+2, r26	; 0x02
    2d20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d22:	8e 01       	movw	r16, r28
    2d24:	05 5a       	subi	r16, 0xA5	; 165
    2d26:	1f 4f       	sbci	r17, 0xFF	; 255
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e1 5a       	subi	r30, 0xA1	; 161
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	4a ef       	ldi	r20, 0xFA	; 250
    2d3c:	54 e4       	ldi	r21, 0x44	; 68
    2d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	f8 01       	movw	r30, r16
    2d48:	80 83       	st	Z, r24
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	a2 83       	std	Z+2, r26	; 0x02
    2d4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d50:	fe 01       	movw	r30, r28
    2d52:	e5 5a       	subi	r30, 0xA5	; 165
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	60 81       	ld	r22, Z
    2d58:	71 81       	ldd	r23, Z+1	; 0x01
    2d5a:	82 81       	ldd	r24, Z+2	; 0x02
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e8       	ldi	r20, 0x80	; 128
    2d64:	5f e3       	ldi	r21, 0x3F	; 63
    2d66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d6a:	88 23       	and	r24, r24
    2d6c:	44 f4       	brge	.+16     	; 0x2d7e <KEYPAD_u8ReadButton+0xef2>
		__ticks = 1;
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e7 5a       	subi	r30, 0xA7	; 167
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	80 83       	st	Z, r24
    2d7c:	64 c0       	rjmp	.+200    	; 0x2e46 <KEYPAD_u8ReadButton+0xfba>
	else if (__tmp > 65535)
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e5 5a       	subi	r30, 0xA5	; 165
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	60 81       	ld	r22, Z
    2d86:	71 81       	ldd	r23, Z+1	; 0x01
    2d88:	82 81       	ldd	r24, Z+2	; 0x02
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	3f ef       	ldi	r19, 0xFF	; 255
    2d90:	4f e7       	ldi	r20, 0x7F	; 127
    2d92:	57 e4       	ldi	r21, 0x47	; 71
    2d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d98:	18 16       	cp	r1, r24
    2d9a:	0c f0       	brlt	.+2      	; 0x2d9e <KEYPAD_u8ReadButton+0xf12>
    2d9c:	43 c0       	rjmp	.+134    	; 0x2e24 <KEYPAD_u8ReadButton+0xf98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e1 5a       	subi	r30, 0xA1	; 161
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	60 81       	ld	r22, Z
    2da6:	71 81       	ldd	r23, Z+1	; 0x01
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	93 81       	ldd	r25, Z+3	; 0x03
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e2       	ldi	r20, 0x20	; 32
    2db2:	51 e4       	ldi	r21, 0x41	; 65
    2db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	8e 01       	movw	r16, r28
    2dbe:	07 5a       	subi	r16, 0xA7	; 167
    2dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	cd 01       	movw	r24, r26
    2dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	f8 01       	movw	r30, r16
    2dd0:	91 83       	std	Z+1, r25	; 0x01
    2dd2:	80 83       	st	Z, r24
    2dd4:	1f c0       	rjmp	.+62     	; 0x2e14 <KEYPAD_u8ReadButton+0xf88>
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e9 5a       	subi	r30, 0xA9	; 169
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	88 ec       	ldi	r24, 0xC8	; 200
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	80 83       	st	Z, r24
    2de4:	fe 01       	movw	r30, r28
    2de6:	e9 5a       	subi	r30, 0xA9	; 169
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 81       	ld	r24, Z
    2dec:	91 81       	ldd	r25, Z+1	; 0x01
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <KEYPAD_u8ReadButton+0xf62>
    2df2:	fe 01       	movw	r30, r28
    2df4:	e9 5a       	subi	r30, 0xA9	; 169
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfc:	de 01       	movw	r26, r28
    2dfe:	a7 5a       	subi	r26, 0xA7	; 167
    2e00:	bf 4f       	sbci	r27, 0xFF	; 255
    2e02:	fe 01       	movw	r30, r28
    2e04:	e7 5a       	subi	r30, 0xA7	; 167
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	11 96       	adiw	r26, 0x01	; 1
    2e10:	9c 93       	st	X, r25
    2e12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e14:	fe 01       	movw	r30, r28
    2e16:	e7 5a       	subi	r30, 0xA7	; 167
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 81       	ld	r24, Z
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	d1 f6       	brne	.-76     	; 0x2dd6 <KEYPAD_u8ReadButton+0xf4a>
    2e22:	28 c0       	rjmp	.+80     	; 0x2e74 <KEYPAD_u8ReadButton+0xfe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e24:	8e 01       	movw	r16, r28
    2e26:	07 5a       	subi	r16, 0xA7	; 167
    2e28:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e5 5a       	subi	r30, 0xA5	; 165
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	60 81       	ld	r22, Z
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	93 81       	ldd	r25, Z+3	; 0x03
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	f8 01       	movw	r30, r16
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
    2e46:	de 01       	movw	r26, r28
    2e48:	ab 5a       	subi	r26, 0xAB	; 171
    2e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e7 5a       	subi	r30, 0xA7	; 167
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 81       	ld	r24, Z
    2e54:	91 81       	ldd	r25, Z+1	; 0x01
    2e56:	11 96       	adiw	r26, 0x01	; 1
    2e58:	9c 93       	st	X, r25
    2e5a:	8e 93       	st	-X, r24
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	eb 5a       	subi	r30, 0xAB	; 171
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 81       	ld	r24, Z
    2e64:	91 81       	ldd	r25, Z+1	; 0x01
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	f1 f7       	brne	.-4      	; 0x2e66 <KEYPAD_u8ReadButton+0xfda>
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	eb 5a       	subi	r30, 0xAB	; 171
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	80 83       	st	Z, r24
			_delay_ms(10);
			return Btn_Num10 ;
    2e74:	fa e0       	ldi	r31, 0x0A	; 10
    2e76:	cf 51       	subi	r28, 0x1F	; 31
    2e78:	df 4f       	sbci	r29, 0xFF	; 255
    2e7a:	f8 83       	st	Y, r31
    2e7c:	c1 5e       	subi	r28, 0xE1	; 225
    2e7e:	d0 40       	sbci	r29, 0x00	; 0
    2e80:	8a c3       	rjmp	.+1812   	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		else if( DIO_u8GetPinValue( KEYPAD_PORT , COL3) == IS_Pressed )
    2e82:	82 e0       	ldi	r24, 0x02	; 2
    2e84:	66 e0       	ldi	r22, 0x06	; 6
    2e86:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    2e8a:	88 23       	and	r24, r24
    2e8c:	09 f0       	breq	.+2      	; 0x2e90 <KEYPAD_u8ReadButton+0x1004>
    2e8e:	c1 c0       	rjmp	.+386    	; 0x3012 <KEYPAD_u8ReadButton+0x1186>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL3) == IS_Pressed) ;
    2e90:	82 e0       	ldi	r24, 0x02	; 2
    2e92:	66 e0       	ldi	r22, 0x06	; 6
    2e94:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    2e98:	88 23       	and	r24, r24
    2e9a:	d1 f3       	breq	.-12     	; 0x2e90 <KEYPAD_u8ReadButton+0x1004>
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	ef 5a       	subi	r30, 0xAF	; 175
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	a0 e2       	ldi	r26, 0x20	; 32
    2ea8:	b1 e4       	ldi	r27, 0x41	; 65
    2eaa:	80 83       	st	Z, r24
    2eac:	91 83       	std	Z+1, r25	; 0x01
    2eae:	a2 83       	std	Z+2, r26	; 0x02
    2eb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb2:	8e 01       	movw	r16, r28
    2eb4:	03 5b       	subi	r16, 0xB3	; 179
    2eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb8:	fe 01       	movw	r30, r28
    2eba:	ef 5a       	subi	r30, 0xAF	; 175
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	60 81       	ld	r22, Z
    2ec0:	71 81       	ldd	r23, Z+1	; 0x01
    2ec2:	82 81       	ldd	r24, Z+2	; 0x02
    2ec4:	93 81       	ldd	r25, Z+3	; 0x03
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	4a ef       	ldi	r20, 0xFA	; 250
    2ecc:	54 e4       	ldi	r21, 0x44	; 68
    2ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	f8 01       	movw	r30, r16
    2ed8:	80 83       	st	Z, r24
    2eda:	91 83       	std	Z+1, r25	; 0x01
    2edc:	a2 83       	std	Z+2, r26	; 0x02
    2ede:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e3 5b       	subi	r30, 0xB3	; 179
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	60 81       	ld	r22, Z
    2ee8:	71 81       	ldd	r23, Z+1	; 0x01
    2eea:	82 81       	ldd	r24, Z+2	; 0x02
    2eec:	93 81       	ldd	r25, Z+3	; 0x03
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e8       	ldi	r20, 0x80	; 128
    2ef4:	5f e3       	ldi	r21, 0x3F	; 63
    2ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2efa:	88 23       	and	r24, r24
    2efc:	44 f4       	brge	.+16     	; 0x2f0e <KEYPAD_u8ReadButton+0x1082>
		__ticks = 1;
    2efe:	fe 01       	movw	r30, r28
    2f00:	e5 5b       	subi	r30, 0xB5	; 181
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
    2f0c:	64 c0       	rjmp	.+200    	; 0x2fd6 <KEYPAD_u8ReadButton+0x114a>
	else if (__tmp > 65535)
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e3 5b       	subi	r30, 0xB3	; 179
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	60 81       	ld	r22, Z
    2f16:	71 81       	ldd	r23, Z+1	; 0x01
    2f18:	82 81       	ldd	r24, Z+2	; 0x02
    2f1a:	93 81       	ldd	r25, Z+3	; 0x03
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	3f ef       	ldi	r19, 0xFF	; 255
    2f20:	4f e7       	ldi	r20, 0x7F	; 127
    2f22:	57 e4       	ldi	r21, 0x47	; 71
    2f24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f28:	18 16       	cp	r1, r24
    2f2a:	0c f0       	brlt	.+2      	; 0x2f2e <KEYPAD_u8ReadButton+0x10a2>
    2f2c:	43 c0       	rjmp	.+134    	; 0x2fb4 <KEYPAD_u8ReadButton+0x1128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2e:	fe 01       	movw	r30, r28
    2f30:	ef 5a       	subi	r30, 0xAF	; 175
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	60 81       	ld	r22, Z
    2f36:	71 81       	ldd	r23, Z+1	; 0x01
    2f38:	82 81       	ldd	r24, Z+2	; 0x02
    2f3a:	93 81       	ldd	r25, Z+3	; 0x03
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 e2       	ldi	r20, 0x20	; 32
    2f42:	51 e4       	ldi	r21, 0x41	; 65
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	8e 01       	movw	r16, r28
    2f4e:	05 5b       	subi	r16, 0xB5	; 181
    2f50:	1f 4f       	sbci	r17, 0xFF	; 255
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	f8 01       	movw	r30, r16
    2f60:	91 83       	std	Z+1, r25	; 0x01
    2f62:	80 83       	st	Z, r24
    2f64:	1f c0       	rjmp	.+62     	; 0x2fa4 <KEYPAD_u8ReadButton+0x1118>
    2f66:	fe 01       	movw	r30, r28
    2f68:	e7 5b       	subi	r30, 0xB7	; 183
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	88 ec       	ldi	r24, 0xC8	; 200
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	91 83       	std	Z+1, r25	; 0x01
    2f72:	80 83       	st	Z, r24
    2f74:	fe 01       	movw	r30, r28
    2f76:	e7 5b       	subi	r30, 0xB7	; 183
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	80 81       	ld	r24, Z
    2f7c:	91 81       	ldd	r25, Z+1	; 0x01
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	f1 f7       	brne	.-4      	; 0x2f7e <KEYPAD_u8ReadButton+0x10f2>
    2f82:	fe 01       	movw	r30, r28
    2f84:	e7 5b       	subi	r30, 0xB7	; 183
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	91 83       	std	Z+1, r25	; 0x01
    2f8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8c:	de 01       	movw	r26, r28
    2f8e:	a5 5b       	subi	r26, 0xB5	; 181
    2f90:	bf 4f       	sbci	r27, 0xFF	; 255
    2f92:	fe 01       	movw	r30, r28
    2f94:	e5 5b       	subi	r30, 0xB5	; 181
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	80 81       	ld	r24, Z
    2f9a:	91 81       	ldd	r25, Z+1	; 0x01
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	11 96       	adiw	r26, 0x01	; 1
    2fa0:	9c 93       	st	X, r25
    2fa2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e5 5b       	subi	r30, 0xB5	; 181
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	d1 f6       	brne	.-76     	; 0x2f66 <KEYPAD_u8ReadButton+0x10da>
    2fb2:	28 c0       	rjmp	.+80     	; 0x3004 <KEYPAD_u8ReadButton+0x1178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb4:	8e 01       	movw	r16, r28
    2fb6:	05 5b       	subi	r16, 0xB5	; 181
    2fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fba:	fe 01       	movw	r30, r28
    2fbc:	e3 5b       	subi	r30, 0xB3	; 179
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	60 81       	ld	r22, Z
    2fc2:	71 81       	ldd	r23, Z+1	; 0x01
    2fc4:	82 81       	ldd	r24, Z+2	; 0x02
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	91 83       	std	Z+1, r25	; 0x01
    2fd4:	80 83       	st	Z, r24
    2fd6:	de 01       	movw	r26, r28
    2fd8:	a9 5b       	subi	r26, 0xB9	; 185
    2fda:	bf 4f       	sbci	r27, 0xFF	; 255
    2fdc:	fe 01       	movw	r30, r28
    2fde:	e5 5b       	subi	r30, 0xB5	; 181
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	80 81       	ld	r24, Z
    2fe4:	91 81       	ldd	r25, Z+1	; 0x01
    2fe6:	11 96       	adiw	r26, 0x01	; 1
    2fe8:	9c 93       	st	X, r25
    2fea:	8e 93       	st	-X, r24
    2fec:	fe 01       	movw	r30, r28
    2fee:	e9 5b       	subi	r30, 0xB9	; 185
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	80 81       	ld	r24, Z
    2ff4:	91 81       	ldd	r25, Z+1	; 0x01
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <KEYPAD_u8ReadButton+0x116a>
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e9 5b       	subi	r30, 0xB9	; 185
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	80 83       	st	Z, r24
			_delay_ms(10);
			return Btn_Num11 ;
    3004:	fb e0       	ldi	r31, 0x0B	; 11
    3006:	cf 51       	subi	r28, 0x1F	; 31
    3008:	df 4f       	sbci	r29, 0xFF	; 255
    300a:	f8 83       	st	Y, r31
    300c:	c1 5e       	subi	r28, 0xE1	; 225
    300e:	d0 40       	sbci	r29, 0x00	; 0
    3010:	c2 c2       	rjmp	.+1412   	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		else if( DIO_u8GetPinValue( KEYPAD_PORT , COL4) == IS_Pressed )
    3012:	82 e0       	ldi	r24, 0x02	; 2
    3014:	67 e0       	ldi	r22, 0x07	; 7
    3016:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    301a:	88 23       	and	r24, r24
    301c:	09 f0       	breq	.+2      	; 0x3020 <KEYPAD_u8ReadButton+0x1194>
    301e:	92 c0       	rjmp	.+292    	; 0x3144 <KEYPAD_u8ReadButton+0x12b8>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL4) == IS_Pressed) ;
    3020:	82 e0       	ldi	r24, 0x02	; 2
    3022:	67 e0       	ldi	r22, 0x07	; 7
    3024:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    3028:	88 23       	and	r24, r24
    302a:	d1 f3       	breq	.-12     	; 0x3020 <KEYPAD_u8ReadButton+0x1194>
    302c:	fe 01       	movw	r30, r28
    302e:	ed 5b       	subi	r30, 0xBD	; 189
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	a0 e2       	ldi	r26, 0x20	; 32
    3038:	b1 e4       	ldi	r27, 0x41	; 65
    303a:	80 83       	st	Z, r24
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	a2 83       	std	Z+2, r26	; 0x02
    3040:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3042:	8e 01       	movw	r16, r28
    3044:	01 5c       	subi	r16, 0xC1	; 193
    3046:	1f 4f       	sbci	r17, 0xFF	; 255
    3048:	fe 01       	movw	r30, r28
    304a:	ed 5b       	subi	r30, 0xBD	; 189
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	60 81       	ld	r22, Z
    3050:	71 81       	ldd	r23, Z+1	; 0x01
    3052:	82 81       	ldd	r24, Z+2	; 0x02
    3054:	93 81       	ldd	r25, Z+3	; 0x03
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4a ef       	ldi	r20, 0xFA	; 250
    305c:	54 e4       	ldi	r21, 0x44	; 68
    305e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	f8 01       	movw	r30, r16
    3068:	80 83       	st	Z, r24
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	a2 83       	std	Z+2, r26	; 0x02
    306e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3070:	fe 01       	movw	r30, r28
    3072:	ff 96       	adiw	r30, 0x3f	; 63
    3074:	60 81       	ld	r22, Z
    3076:	71 81       	ldd	r23, Z+1	; 0x01
    3078:	82 81       	ldd	r24, Z+2	; 0x02
    307a:	93 81       	ldd	r25, Z+3	; 0x03
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e8       	ldi	r20, 0x80	; 128
    3082:	5f e3       	ldi	r21, 0x3F	; 63
    3084:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3088:	88 23       	and	r24, r24
    308a:	2c f4       	brge	.+10     	; 0x3096 <KEYPAD_u8ReadButton+0x120a>
		__ticks = 1;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	9e af       	std	Y+62, r25	; 0x3e
    3092:	8d af       	std	Y+61, r24	; 0x3d
    3094:	46 c0       	rjmp	.+140    	; 0x3122 <KEYPAD_u8ReadButton+0x1296>
	else if (__tmp > 65535)
    3096:	fe 01       	movw	r30, r28
    3098:	ff 96       	adiw	r30, 0x3f	; 63
    309a:	60 81       	ld	r22, Z
    309c:	71 81       	ldd	r23, Z+1	; 0x01
    309e:	82 81       	ldd	r24, Z+2	; 0x02
    30a0:	93 81       	ldd	r25, Z+3	; 0x03
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	3f ef       	ldi	r19, 0xFF	; 255
    30a6:	4f e7       	ldi	r20, 0x7F	; 127
    30a8:	57 e4       	ldi	r21, 0x47	; 71
    30aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ae:	18 16       	cp	r1, r24
    30b0:	64 f5       	brge	.+88     	; 0x310a <KEYPAD_u8ReadButton+0x127e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b2:	fe 01       	movw	r30, r28
    30b4:	ed 5b       	subi	r30, 0xBD	; 189
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	60 81       	ld	r22, Z
    30ba:	71 81       	ldd	r23, Z+1	; 0x01
    30bc:	82 81       	ldd	r24, Z+2	; 0x02
    30be:	93 81       	ldd	r25, Z+3	; 0x03
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e2       	ldi	r20, 0x20	; 32
    30c6:	51 e4       	ldi	r21, 0x41	; 65
    30c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	bc 01       	movw	r22, r24
    30d2:	cd 01       	movw	r24, r26
    30d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	9e af       	std	Y+62, r25	; 0x3e
    30de:	8d af       	std	Y+61, r24	; 0x3d
    30e0:	0f c0       	rjmp	.+30     	; 0x3100 <KEYPAD_u8ReadButton+0x1274>
    30e2:	88 ec       	ldi	r24, 0xC8	; 200
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	9c af       	std	Y+60, r25	; 0x3c
    30e8:	8b af       	std	Y+59, r24	; 0x3b
    30ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    30ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	f1 f7       	brne	.-4      	; 0x30ee <KEYPAD_u8ReadButton+0x1262>
    30f2:	9c af       	std	Y+60, r25	; 0x3c
    30f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    30f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	9e af       	std	Y+62, r25	; 0x3e
    30fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3100:	8d ad       	ldd	r24, Y+61	; 0x3d
    3102:	9e ad       	ldd	r25, Y+62	; 0x3e
    3104:	00 97       	sbiw	r24, 0x00	; 0
    3106:	69 f7       	brne	.-38     	; 0x30e2 <KEYPAD_u8ReadButton+0x1256>
    3108:	16 c0       	rjmp	.+44     	; 0x3136 <KEYPAD_u8ReadButton+0x12aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    310a:	fe 01       	movw	r30, r28
    310c:	ff 96       	adiw	r30, 0x3f	; 63
    310e:	60 81       	ld	r22, Z
    3110:	71 81       	ldd	r23, Z+1	; 0x01
    3112:	82 81       	ldd	r24, Z+2	; 0x02
    3114:	93 81       	ldd	r25, Z+3	; 0x03
    3116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	9e af       	std	Y+62, r25	; 0x3e
    3120:	8d af       	std	Y+61, r24	; 0x3d
    3122:	8d ad       	ldd	r24, Y+61	; 0x3d
    3124:	9e ad       	ldd	r25, Y+62	; 0x3e
    3126:	9a af       	std	Y+58, r25	; 0x3a
    3128:	89 af       	std	Y+57, r24	; 0x39
    312a:	89 ad       	ldd	r24, Y+57	; 0x39
    312c:	9a ad       	ldd	r25, Y+58	; 0x3a
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	f1 f7       	brne	.-4      	; 0x312e <KEYPAD_u8ReadButton+0x12a2>
    3132:	9a af       	std	Y+58, r25	; 0x3a
    3134:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(10);
			return Btn_Num12 ;
    3136:	fc e0       	ldi	r31, 0x0C	; 12
    3138:	cf 51       	subi	r28, 0x1F	; 31
    313a:	df 4f       	sbci	r29, 0xFF	; 255
    313c:	f8 83       	st	Y, r31
    313e:	c1 5e       	subi	r28, 0xE1	; 225
    3140:	d0 40       	sbci	r29, 0x00	; 0
    3142:	29 c2       	rjmp	.+1106   	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		DIO_voidSetPinValue    ( KEYPAD_PORT , ROW3 , High  );
    3144:	82 e0       	ldi	r24, 0x02	; 2
    3146:	62 e0       	ldi	r22, 0x02	; 2
    3148:	41 e0       	ldi	r20, 0x01	; 1
    314a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>


		//////////////// ROW 4  /////////////

		DIO_voidSetPinValue    ( KEYPAD_PORT , ROW4 , Low  );
    314e:	82 e0       	ldi	r24, 0x02	; 2
    3150:	63 e0       	ldi	r22, 0x03	; 3
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
		if( DIO_u8GetPinValue( KEYPAD_PORT , COL1) == IS_Pressed )
    3158:	82 e0       	ldi	r24, 0x02	; 2
    315a:	64 e0       	ldi	r22, 0x04	; 4
    315c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    3160:	88 23       	and	r24, r24
    3162:	09 f0       	breq	.+2      	; 0x3166 <KEYPAD_u8ReadButton+0x12da>
    3164:	7f c0       	rjmp	.+254    	; 0x3264 <KEYPAD_u8ReadButton+0x13d8>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL1) == IS_Pressed) ;
    3166:	82 e0       	ldi	r24, 0x02	; 2
    3168:	64 e0       	ldi	r22, 0x04	; 4
    316a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    316e:	88 23       	and	r24, r24
    3170:	d1 f3       	breq	.-12     	; 0x3166 <KEYPAD_u8ReadButton+0x12da>
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	a0 e2       	ldi	r26, 0x20	; 32
    3178:	b1 e4       	ldi	r27, 0x41	; 65
    317a:	8d ab       	std	Y+53, r24	; 0x35
    317c:	9e ab       	std	Y+54, r25	; 0x36
    317e:	af ab       	std	Y+55, r26	; 0x37
    3180:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3182:	6d a9       	ldd	r22, Y+53	; 0x35
    3184:	7e a9       	ldd	r23, Y+54	; 0x36
    3186:	8f a9       	ldd	r24, Y+55	; 0x37
    3188:	98 ad       	ldd	r25, Y+56	; 0x38
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	4a ef       	ldi	r20, 0xFA	; 250
    3190:	54 e4       	ldi	r21, 0x44	; 68
    3192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	89 ab       	std	Y+49, r24	; 0x31
    319c:	9a ab       	std	Y+50, r25	; 0x32
    319e:	ab ab       	std	Y+51, r26	; 0x33
    31a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31a2:	69 a9       	ldd	r22, Y+49	; 0x31
    31a4:	7a a9       	ldd	r23, Y+50	; 0x32
    31a6:	8b a9       	ldd	r24, Y+51	; 0x33
    31a8:	9c a9       	ldd	r25, Y+52	; 0x34
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	40 e8       	ldi	r20, 0x80	; 128
    31b0:	5f e3       	ldi	r21, 0x3F	; 63
    31b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b6:	88 23       	and	r24, r24
    31b8:	2c f4       	brge	.+10     	; 0x31c4 <KEYPAD_u8ReadButton+0x1338>
		__ticks = 1;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	98 ab       	std	Y+48, r25	; 0x30
    31c0:	8f a7       	std	Y+47, r24	; 0x2f
    31c2:	3f c0       	rjmp	.+126    	; 0x3242 <KEYPAD_u8ReadButton+0x13b6>
	else if (__tmp > 65535)
    31c4:	69 a9       	ldd	r22, Y+49	; 0x31
    31c6:	7a a9       	ldd	r23, Y+50	; 0x32
    31c8:	8b a9       	ldd	r24, Y+51	; 0x33
    31ca:	9c a9       	ldd	r25, Y+52	; 0x34
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	3f ef       	ldi	r19, 0xFF	; 255
    31d0:	4f e7       	ldi	r20, 0x7F	; 127
    31d2:	57 e4       	ldi	r21, 0x47	; 71
    31d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d8:	18 16       	cp	r1, r24
    31da:	4c f5       	brge	.+82     	; 0x322e <KEYPAD_u8ReadButton+0x13a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31dc:	6d a9       	ldd	r22, Y+53	; 0x35
    31de:	7e a9       	ldd	r23, Y+54	; 0x36
    31e0:	8f a9       	ldd	r24, Y+55	; 0x37
    31e2:	98 ad       	ldd	r25, Y+56	; 0x38
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e2       	ldi	r20, 0x20	; 32
    31ea:	51 e4       	ldi	r21, 0x41	; 65
    31ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	bc 01       	movw	r22, r24
    31f6:	cd 01       	movw	r24, r26
    31f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	98 ab       	std	Y+48, r25	; 0x30
    3202:	8f a7       	std	Y+47, r24	; 0x2f
    3204:	0f c0       	rjmp	.+30     	; 0x3224 <KEYPAD_u8ReadButton+0x1398>
    3206:	88 ec       	ldi	r24, 0xC8	; 200
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	9e a7       	std	Y+46, r25	; 0x2e
    320c:	8d a7       	std	Y+45, r24	; 0x2d
    320e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3210:	9e a5       	ldd	r25, Y+46	; 0x2e
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	f1 f7       	brne	.-4      	; 0x3212 <KEYPAD_u8ReadButton+0x1386>
    3216:	9e a7       	std	Y+46, r25	; 0x2e
    3218:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321a:	8f a5       	ldd	r24, Y+47	; 0x2f
    321c:	98 a9       	ldd	r25, Y+48	; 0x30
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	98 ab       	std	Y+48, r25	; 0x30
    3222:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3224:	8f a5       	ldd	r24, Y+47	; 0x2f
    3226:	98 a9       	ldd	r25, Y+48	; 0x30
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	69 f7       	brne	.-38     	; 0x3206 <KEYPAD_u8ReadButton+0x137a>
    322c:	14 c0       	rjmp	.+40     	; 0x3256 <KEYPAD_u8ReadButton+0x13ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322e:	69 a9       	ldd	r22, Y+49	; 0x31
    3230:	7a a9       	ldd	r23, Y+50	; 0x32
    3232:	8b a9       	ldd	r24, Y+51	; 0x33
    3234:	9c a9       	ldd	r25, Y+52	; 0x34
    3236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	98 ab       	std	Y+48, r25	; 0x30
    3240:	8f a7       	std	Y+47, r24	; 0x2f
    3242:	8f a5       	ldd	r24, Y+47	; 0x2f
    3244:	98 a9       	ldd	r25, Y+48	; 0x30
    3246:	9c a7       	std	Y+44, r25	; 0x2c
    3248:	8b a7       	std	Y+43, r24	; 0x2b
    324a:	8b a5       	ldd	r24, Y+43	; 0x2b
    324c:	9c a5       	ldd	r25, Y+44	; 0x2c
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	f1 f7       	brne	.-4      	; 0x324e <KEYPAD_u8ReadButton+0x13c2>
    3252:	9c a7       	std	Y+44, r25	; 0x2c
    3254:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			return Btn_Num13 ;
    3256:	8d e0       	ldi	r24, 0x0D	; 13
    3258:	cf 51       	subi	r28, 0x1F	; 31
    325a:	df 4f       	sbci	r29, 0xFF	; 255
    325c:	88 83       	st	Y, r24
    325e:	c1 5e       	subi	r28, 0xE1	; 225
    3260:	d0 40       	sbci	r29, 0x00	; 0
    3262:	99 c1       	rjmp	.+818    	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		else if( DIO_u8GetPinValue( KEYPAD_PORT , COL2) == IS_Pressed )
    3264:	82 e0       	ldi	r24, 0x02	; 2
    3266:	65 e0       	ldi	r22, 0x05	; 5
    3268:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    326c:	88 23       	and	r24, r24
    326e:	09 f0       	breq	.+2      	; 0x3272 <KEYPAD_u8ReadButton+0x13e6>
    3270:	7f c0       	rjmp	.+254    	; 0x3370 <KEYPAD_u8ReadButton+0x14e4>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL2) == IS_Pressed) ;
    3272:	82 e0       	ldi	r24, 0x02	; 2
    3274:	65 e0       	ldi	r22, 0x05	; 5
    3276:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    327a:	88 23       	and	r24, r24
    327c:	d1 f3       	breq	.-12     	; 0x3272 <KEYPAD_u8ReadButton+0x13e6>
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	a0 e2       	ldi	r26, 0x20	; 32
    3284:	b1 e4       	ldi	r27, 0x41	; 65
    3286:	8f a3       	std	Y+39, r24	; 0x27
    3288:	98 a7       	std	Y+40, r25	; 0x28
    328a:	a9 a7       	std	Y+41, r26	; 0x29
    328c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328e:	6f a1       	ldd	r22, Y+39	; 0x27
    3290:	78 a5       	ldd	r23, Y+40	; 0x28
    3292:	89 a5       	ldd	r24, Y+41	; 0x29
    3294:	9a a5       	ldd	r25, Y+42	; 0x2a
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	4a ef       	ldi	r20, 0xFA	; 250
    329c:	54 e4       	ldi	r21, 0x44	; 68
    329e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	8b a3       	std	Y+35, r24	; 0x23
    32a8:	9c a3       	std	Y+36, r25	; 0x24
    32aa:	ad a3       	std	Y+37, r26	; 0x25
    32ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32ae:	6b a1       	ldd	r22, Y+35	; 0x23
    32b0:	7c a1       	ldd	r23, Y+36	; 0x24
    32b2:	8d a1       	ldd	r24, Y+37	; 0x25
    32b4:	9e a1       	ldd	r25, Y+38	; 0x26
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	40 e8       	ldi	r20, 0x80	; 128
    32bc:	5f e3       	ldi	r21, 0x3F	; 63
    32be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32c2:	88 23       	and	r24, r24
    32c4:	2c f4       	brge	.+10     	; 0x32d0 <KEYPAD_u8ReadButton+0x1444>
		__ticks = 1;
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	9a a3       	std	Y+34, r25	; 0x22
    32cc:	89 a3       	std	Y+33, r24	; 0x21
    32ce:	3f c0       	rjmp	.+126    	; 0x334e <KEYPAD_u8ReadButton+0x14c2>
	else if (__tmp > 65535)
    32d0:	6b a1       	ldd	r22, Y+35	; 0x23
    32d2:	7c a1       	ldd	r23, Y+36	; 0x24
    32d4:	8d a1       	ldd	r24, Y+37	; 0x25
    32d6:	9e a1       	ldd	r25, Y+38	; 0x26
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	3f ef       	ldi	r19, 0xFF	; 255
    32dc:	4f e7       	ldi	r20, 0x7F	; 127
    32de:	57 e4       	ldi	r21, 0x47	; 71
    32e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32e4:	18 16       	cp	r1, r24
    32e6:	4c f5       	brge	.+82     	; 0x333a <KEYPAD_u8ReadButton+0x14ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e8:	6f a1       	ldd	r22, Y+39	; 0x27
    32ea:	78 a5       	ldd	r23, Y+40	; 0x28
    32ec:	89 a5       	ldd	r24, Y+41	; 0x29
    32ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e2       	ldi	r20, 0x20	; 32
    32f6:	51 e4       	ldi	r21, 0x41	; 65
    32f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	bc 01       	movw	r22, r24
    3302:	cd 01       	movw	r24, r26
    3304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	9a a3       	std	Y+34, r25	; 0x22
    330e:	89 a3       	std	Y+33, r24	; 0x21
    3310:	0f c0       	rjmp	.+30     	; 0x3330 <KEYPAD_u8ReadButton+0x14a4>
    3312:	88 ec       	ldi	r24, 0xC8	; 200
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	98 a3       	std	Y+32, r25	; 0x20
    3318:	8f 8f       	std	Y+31, r24	; 0x1f
    331a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    331c:	98 a1       	ldd	r25, Y+32	; 0x20
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <KEYPAD_u8ReadButton+0x1492>
    3322:	98 a3       	std	Y+32, r25	; 0x20
    3324:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3326:	89 a1       	ldd	r24, Y+33	; 0x21
    3328:	9a a1       	ldd	r25, Y+34	; 0x22
    332a:	01 97       	sbiw	r24, 0x01	; 1
    332c:	9a a3       	std	Y+34, r25	; 0x22
    332e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3330:	89 a1       	ldd	r24, Y+33	; 0x21
    3332:	9a a1       	ldd	r25, Y+34	; 0x22
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	69 f7       	brne	.-38     	; 0x3312 <KEYPAD_u8ReadButton+0x1486>
    3338:	14 c0       	rjmp	.+40     	; 0x3362 <KEYPAD_u8ReadButton+0x14d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    333a:	6b a1       	ldd	r22, Y+35	; 0x23
    333c:	7c a1       	ldd	r23, Y+36	; 0x24
    333e:	8d a1       	ldd	r24, Y+37	; 0x25
    3340:	9e a1       	ldd	r25, Y+38	; 0x26
    3342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	9a a3       	std	Y+34, r25	; 0x22
    334c:	89 a3       	std	Y+33, r24	; 0x21
    334e:	89 a1       	ldd	r24, Y+33	; 0x21
    3350:	9a a1       	ldd	r25, Y+34	; 0x22
    3352:	9e 8f       	std	Y+30, r25	; 0x1e
    3354:	8d 8f       	std	Y+29, r24	; 0x1d
    3356:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3358:	9e 8d       	ldd	r25, Y+30	; 0x1e
    335a:	01 97       	sbiw	r24, 0x01	; 1
    335c:	f1 f7       	brne	.-4      	; 0x335a <KEYPAD_u8ReadButton+0x14ce>
    335e:	9e 8f       	std	Y+30, r25	; 0x1e
    3360:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			return Btn_Num14 ;
    3362:	ee e0       	ldi	r30, 0x0E	; 14
    3364:	cf 51       	subi	r28, 0x1F	; 31
    3366:	df 4f       	sbci	r29, 0xFF	; 255
    3368:	e8 83       	st	Y, r30
    336a:	c1 5e       	subi	r28, 0xE1	; 225
    336c:	d0 40       	sbci	r29, 0x00	; 0
    336e:	13 c1       	rjmp	.+550    	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		else if( DIO_u8GetPinValue( KEYPAD_PORT , COL3) == IS_Pressed )
    3370:	82 e0       	ldi	r24, 0x02	; 2
    3372:	66 e0       	ldi	r22, 0x06	; 6
    3374:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    3378:	88 23       	and	r24, r24
    337a:	09 f0       	breq	.+2      	; 0x337e <KEYPAD_u8ReadButton+0x14f2>
    337c:	7f c0       	rjmp	.+254    	; 0x347c <KEYPAD_u8ReadButton+0x15f0>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL3) == IS_Pressed) ;
    337e:	82 e0       	ldi	r24, 0x02	; 2
    3380:	66 e0       	ldi	r22, 0x06	; 6
    3382:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    3386:	88 23       	and	r24, r24
    3388:	d1 f3       	breq	.-12     	; 0x337e <KEYPAD_u8ReadButton+0x14f2>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	a0 e2       	ldi	r26, 0x20	; 32
    3390:	b1 e4       	ldi	r27, 0x41	; 65
    3392:	89 8f       	std	Y+25, r24	; 0x19
    3394:	9a 8f       	std	Y+26, r25	; 0x1a
    3396:	ab 8f       	std	Y+27, r26	; 0x1b
    3398:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    339a:	69 8d       	ldd	r22, Y+25	; 0x19
    339c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    339e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	4a ef       	ldi	r20, 0xFA	; 250
    33a8:	54 e4       	ldi	r21, 0x44	; 68
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	8d 8b       	std	Y+21, r24	; 0x15
    33b4:	9e 8b       	std	Y+22, r25	; 0x16
    33b6:	af 8b       	std	Y+23, r26	; 0x17
    33b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33ba:	6d 89       	ldd	r22, Y+21	; 0x15
    33bc:	7e 89       	ldd	r23, Y+22	; 0x16
    33be:	8f 89       	ldd	r24, Y+23	; 0x17
    33c0:	98 8d       	ldd	r25, Y+24	; 0x18
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e8       	ldi	r20, 0x80	; 128
    33c8:	5f e3       	ldi	r21, 0x3F	; 63
    33ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ce:	88 23       	and	r24, r24
    33d0:	2c f4       	brge	.+10     	; 0x33dc <KEYPAD_u8ReadButton+0x1550>
		__ticks = 1;
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	9c 8b       	std	Y+20, r25	; 0x14
    33d8:	8b 8b       	std	Y+19, r24	; 0x13
    33da:	3f c0       	rjmp	.+126    	; 0x345a <KEYPAD_u8ReadButton+0x15ce>
	else if (__tmp > 65535)
    33dc:	6d 89       	ldd	r22, Y+21	; 0x15
    33de:	7e 89       	ldd	r23, Y+22	; 0x16
    33e0:	8f 89       	ldd	r24, Y+23	; 0x17
    33e2:	98 8d       	ldd	r25, Y+24	; 0x18
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	3f ef       	ldi	r19, 0xFF	; 255
    33e8:	4f e7       	ldi	r20, 0x7F	; 127
    33ea:	57 e4       	ldi	r21, 0x47	; 71
    33ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f0:	18 16       	cp	r1, r24
    33f2:	4c f5       	brge	.+82     	; 0x3446 <KEYPAD_u8ReadButton+0x15ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f4:	69 8d       	ldd	r22, Y+25	; 0x19
    33f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e2       	ldi	r20, 0x20	; 32
    3402:	51 e4       	ldi	r21, 0x41	; 65
    3404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	bc 01       	movw	r22, r24
    340e:	cd 01       	movw	r24, r26
    3410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	9c 8b       	std	Y+20, r25	; 0x14
    341a:	8b 8b       	std	Y+19, r24	; 0x13
    341c:	0f c0       	rjmp	.+30     	; 0x343c <KEYPAD_u8ReadButton+0x15b0>
    341e:	88 ec       	ldi	r24, 0xC8	; 200
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	9a 8b       	std	Y+18, r25	; 0x12
    3424:	89 8b       	std	Y+17, r24	; 0x11
    3426:	89 89       	ldd	r24, Y+17	; 0x11
    3428:	9a 89       	ldd	r25, Y+18	; 0x12
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	f1 f7       	brne	.-4      	; 0x342a <KEYPAD_u8ReadButton+0x159e>
    342e:	9a 8b       	std	Y+18, r25	; 0x12
    3430:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3432:	8b 89       	ldd	r24, Y+19	; 0x13
    3434:	9c 89       	ldd	r25, Y+20	; 0x14
    3436:	01 97       	sbiw	r24, 0x01	; 1
    3438:	9c 8b       	std	Y+20, r25	; 0x14
    343a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343c:	8b 89       	ldd	r24, Y+19	; 0x13
    343e:	9c 89       	ldd	r25, Y+20	; 0x14
    3440:	00 97       	sbiw	r24, 0x00	; 0
    3442:	69 f7       	brne	.-38     	; 0x341e <KEYPAD_u8ReadButton+0x1592>
    3444:	14 c0       	rjmp	.+40     	; 0x346e <KEYPAD_u8ReadButton+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3446:	6d 89       	ldd	r22, Y+21	; 0x15
    3448:	7e 89       	ldd	r23, Y+22	; 0x16
    344a:	8f 89       	ldd	r24, Y+23	; 0x17
    344c:	98 8d       	ldd	r25, Y+24	; 0x18
    344e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	9c 8b       	std	Y+20, r25	; 0x14
    3458:	8b 8b       	std	Y+19, r24	; 0x13
    345a:	8b 89       	ldd	r24, Y+19	; 0x13
    345c:	9c 89       	ldd	r25, Y+20	; 0x14
    345e:	98 8b       	std	Y+16, r25	; 0x10
    3460:	8f 87       	std	Y+15, r24	; 0x0f
    3462:	8f 85       	ldd	r24, Y+15	; 0x0f
    3464:	98 89       	ldd	r25, Y+16	; 0x10
    3466:	01 97       	sbiw	r24, 0x01	; 1
    3468:	f1 f7       	brne	.-4      	; 0x3466 <KEYPAD_u8ReadButton+0x15da>
    346a:	98 8b       	std	Y+16, r25	; 0x10
    346c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			return Btn_Num15 ;
    346e:	ff e0       	ldi	r31, 0x0F	; 15
    3470:	cf 51       	subi	r28, 0x1F	; 31
    3472:	df 4f       	sbci	r29, 0xFF	; 255
    3474:	f8 83       	st	Y, r31
    3476:	c1 5e       	subi	r28, 0xE1	; 225
    3478:	d0 40       	sbci	r29, 0x00	; 0
    347a:	8d c0       	rjmp	.+282    	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		else if( DIO_u8GetPinValue( KEYPAD_PORT , COL4) == IS_Pressed )
    347c:	82 e0       	ldi	r24, 0x02	; 2
    347e:	67 e0       	ldi	r22, 0x07	; 7
    3480:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    3484:	88 23       	and	r24, r24
    3486:	09 f0       	breq	.+2      	; 0x348a <KEYPAD_u8ReadButton+0x15fe>
    3488:	7f c0       	rjmp	.+254    	; 0x3588 <KEYPAD_u8ReadButton+0x16fc>
		{
			while(DIO_u8GetPinValue( KEYPAD_PORT , COL4) == IS_Pressed) ;
    348a:	82 e0       	ldi	r24, 0x02	; 2
    348c:	67 e0       	ldi	r22, 0x07	; 7
    348e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <DIO_u8GetPinValue>
    3492:	88 23       	and	r24, r24
    3494:	d1 f3       	breq	.-12     	; 0x348a <KEYPAD_u8ReadButton+0x15fe>
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	a0 e2       	ldi	r26, 0x20	; 32
    349c:	b1 e4       	ldi	r27, 0x41	; 65
    349e:	8b 87       	std	Y+11, r24	; 0x0b
    34a0:	9c 87       	std	Y+12, r25	; 0x0c
    34a2:	ad 87       	std	Y+13, r26	; 0x0d
    34a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	4a ef       	ldi	r20, 0xFA	; 250
    34b4:	54 e4       	ldi	r21, 0x44	; 68
    34b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	8f 83       	std	Y+7, r24	; 0x07
    34c0:	98 87       	std	Y+8, r25	; 0x08
    34c2:	a9 87       	std	Y+9, r26	; 0x09
    34c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34c6:	6f 81       	ldd	r22, Y+7	; 0x07
    34c8:	78 85       	ldd	r23, Y+8	; 0x08
    34ca:	89 85       	ldd	r24, Y+9	; 0x09
    34cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	40 e8       	ldi	r20, 0x80	; 128
    34d4:	5f e3       	ldi	r21, 0x3F	; 63
    34d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34da:	88 23       	and	r24, r24
    34dc:	2c f4       	brge	.+10     	; 0x34e8 <KEYPAD_u8ReadButton+0x165c>
		__ticks = 1;
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	9e 83       	std	Y+6, r25	; 0x06
    34e4:	8d 83       	std	Y+5, r24	; 0x05
    34e6:	3f c0       	rjmp	.+126    	; 0x3566 <KEYPAD_u8ReadButton+0x16da>
	else if (__tmp > 65535)
    34e8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ea:	78 85       	ldd	r23, Y+8	; 0x08
    34ec:	89 85       	ldd	r24, Y+9	; 0x09
    34ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	3f ef       	ldi	r19, 0xFF	; 255
    34f4:	4f e7       	ldi	r20, 0x7F	; 127
    34f6:	57 e4       	ldi	r21, 0x47	; 71
    34f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34fc:	18 16       	cp	r1, r24
    34fe:	4c f5       	brge	.+82     	; 0x3552 <KEYPAD_u8ReadButton+0x16c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3500:	6b 85       	ldd	r22, Y+11	; 0x0b
    3502:	7c 85       	ldd	r23, Y+12	; 0x0c
    3504:	8d 85       	ldd	r24, Y+13	; 0x0d
    3506:	9e 85       	ldd	r25, Y+14	; 0x0e
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	40 e2       	ldi	r20, 0x20	; 32
    350e:	51 e4       	ldi	r21, 0x41	; 65
    3510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	bc 01       	movw	r22, r24
    351a:	cd 01       	movw	r24, r26
    351c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	9e 83       	std	Y+6, r25	; 0x06
    3526:	8d 83       	std	Y+5, r24	; 0x05
    3528:	0f c0       	rjmp	.+30     	; 0x3548 <KEYPAD_u8ReadButton+0x16bc>
    352a:	88 ec       	ldi	r24, 0xC8	; 200
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	9c 83       	std	Y+4, r25	; 0x04
    3530:	8b 83       	std	Y+3, r24	; 0x03
    3532:	8b 81       	ldd	r24, Y+3	; 0x03
    3534:	9c 81       	ldd	r25, Y+4	; 0x04
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	f1 f7       	brne	.-4      	; 0x3536 <KEYPAD_u8ReadButton+0x16aa>
    353a:	9c 83       	std	Y+4, r25	; 0x04
    353c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    353e:	8d 81       	ldd	r24, Y+5	; 0x05
    3540:	9e 81       	ldd	r25, Y+6	; 0x06
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	9e 83       	std	Y+6, r25	; 0x06
    3546:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3548:	8d 81       	ldd	r24, Y+5	; 0x05
    354a:	9e 81       	ldd	r25, Y+6	; 0x06
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	69 f7       	brne	.-38     	; 0x352a <KEYPAD_u8ReadButton+0x169e>
    3550:	14 c0       	rjmp	.+40     	; 0x357a <KEYPAD_u8ReadButton+0x16ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3552:	6f 81       	ldd	r22, Y+7	; 0x07
    3554:	78 85       	ldd	r23, Y+8	; 0x08
    3556:	89 85       	ldd	r24, Y+9	; 0x09
    3558:	9a 85       	ldd	r25, Y+10	; 0x0a
    355a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	9e 83       	std	Y+6, r25	; 0x06
    3564:	8d 83       	std	Y+5, r24	; 0x05
    3566:	8d 81       	ldd	r24, Y+5	; 0x05
    3568:	9e 81       	ldd	r25, Y+6	; 0x06
    356a:	9a 83       	std	Y+2, r25	; 0x02
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	9a 81       	ldd	r25, Y+2	; 0x02
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	f1 f7       	brne	.-4      	; 0x3572 <KEYPAD_u8ReadButton+0x16e6>
    3576:	9a 83       	std	Y+2, r25	; 0x02
    3578:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			return Btn_Num16 ;
    357a:	80 e1       	ldi	r24, 0x10	; 16
    357c:	cf 51       	subi	r28, 0x1F	; 31
    357e:	df 4f       	sbci	r29, 0xFF	; 255
    3580:	88 83       	st	Y, r24
    3582:	c1 5e       	subi	r28, 0xE1	; 225
    3584:	d0 40       	sbci	r29, 0x00	; 0
    3586:	07 c0       	rjmp	.+14     	; 0x3596 <KEYPAD_u8ReadButton+0x170a>
		}
		DIO_voidSetPinValue    ( KEYPAD_PORT , ROW4 , High  );
    3588:	82 e0       	ldi	r24, 0x02	; 2
    358a:	63 e0       	ldi	r22, 0x03	; 3
    358c:	41 e0       	ldi	r20, 0x01	; 1
    358e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
    3592:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <KEYPAD_u8ReadButton+0x1a>


	}
    3596:	cf 51       	subi	r28, 0x1F	; 31
    3598:	df 4f       	sbci	r29, 0xFF	; 255
    359a:	88 81       	ld	r24, Y
    359c:	c1 5e       	subi	r28, 0xE1	; 225
    359e:	d0 40       	sbci	r29, 0x00	; 0

}
    35a0:	cf 51       	subi	r28, 0x1F	; 31
    35a2:	df 4f       	sbci	r29, 0xFF	; 255
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
    35b6:	08 95       	ret

000035b8 <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"


void LCD_voidInit(void)
{
    35b8:	0f 93       	push	r16
    35ba:	1f 93       	push	r17
    35bc:	df 93       	push	r29
    35be:	cf 93       	push	r28
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62
    35c4:	c6 59       	subi	r28, 0x96	; 150
    35c6:	d0 40       	sbci	r29, 0x00	; 0
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPortDirection(LCD_PORT , Output);
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	61 e0       	ldi	r22, 0x01	; 1
    35d6:	0e 94 b7 0a 	call	0x156e	; 0x156e <DIO_voidSetPortDirection>
	DIO_voidSetPortValue    (LCD_PORT , Low);
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	60 e0       	ldi	r22, 0x00	; 0
    35de:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_voidSetPortValue>
    35e2:	fe 01       	movw	r30, r28
    35e4:	ed 56       	subi	r30, 0x6D	; 109
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	a8 e4       	ldi	r26, 0x48	; 72
    35ee:	b2 e4       	ldi	r27, 0x42	; 66
    35f0:	80 83       	st	Z, r24
    35f2:	91 83       	std	Z+1, r25	; 0x01
    35f4:	a2 83       	std	Z+2, r26	; 0x02
    35f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f8:	8e 01       	movw	r16, r28
    35fa:	01 57       	subi	r16, 0x71	; 113
    35fc:	1f 4f       	sbci	r17, 0xFF	; 255
    35fe:	fe 01       	movw	r30, r28
    3600:	ed 56       	subi	r30, 0x6D	; 109
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	60 81       	ld	r22, Z
    3606:	71 81       	ldd	r23, Z+1	; 0x01
    3608:	82 81       	ldd	r24, Z+2	; 0x02
    360a:	93 81       	ldd	r25, Z+3	; 0x03
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	4a ef       	ldi	r20, 0xFA	; 250
    3612:	54 e4       	ldi	r21, 0x44	; 68
    3614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	f8 01       	movw	r30, r16
    361e:	80 83       	st	Z, r24
    3620:	91 83       	std	Z+1, r25	; 0x01
    3622:	a2 83       	std	Z+2, r26	; 0x02
    3624:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3626:	fe 01       	movw	r30, r28
    3628:	e1 57       	subi	r30, 0x71	; 113
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	60 81       	ld	r22, Z
    362e:	71 81       	ldd	r23, Z+1	; 0x01
    3630:	82 81       	ldd	r24, Z+2	; 0x02
    3632:	93 81       	ldd	r25, Z+3	; 0x03
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	40 e8       	ldi	r20, 0x80	; 128
    363a:	5f e3       	ldi	r21, 0x3F	; 63
    363c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3640:	88 23       	and	r24, r24
    3642:	44 f4       	brge	.+16     	; 0x3654 <LCD_voidInit+0x9c>
		__ticks = 1;
    3644:	fe 01       	movw	r30, r28
    3646:	e3 57       	subi	r30, 0x73	; 115
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	91 83       	std	Z+1, r25	; 0x01
    3650:	80 83       	st	Z, r24
    3652:	64 c0       	rjmp	.+200    	; 0x371c <LCD_voidInit+0x164>
	else if (__tmp > 65535)
    3654:	fe 01       	movw	r30, r28
    3656:	e1 57       	subi	r30, 0x71	; 113
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	60 81       	ld	r22, Z
    365c:	71 81       	ldd	r23, Z+1	; 0x01
    365e:	82 81       	ldd	r24, Z+2	; 0x02
    3660:	93 81       	ldd	r25, Z+3	; 0x03
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	3f ef       	ldi	r19, 0xFF	; 255
    3666:	4f e7       	ldi	r20, 0x7F	; 127
    3668:	57 e4       	ldi	r21, 0x47	; 71
    366a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    366e:	18 16       	cp	r1, r24
    3670:	0c f0       	brlt	.+2      	; 0x3674 <LCD_voidInit+0xbc>
    3672:	43 c0       	rjmp	.+134    	; 0x36fa <LCD_voidInit+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3674:	fe 01       	movw	r30, r28
    3676:	ed 56       	subi	r30, 0x6D	; 109
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	60 81       	ld	r22, Z
    367c:	71 81       	ldd	r23, Z+1	; 0x01
    367e:	82 81       	ldd	r24, Z+2	; 0x02
    3680:	93 81       	ldd	r25, Z+3	; 0x03
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	40 e2       	ldi	r20, 0x20	; 32
    3688:	51 e4       	ldi	r21, 0x41	; 65
    368a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	8e 01       	movw	r16, r28
    3694:	03 57       	subi	r16, 0x73	; 115
    3696:	1f 4f       	sbci	r17, 0xFF	; 255
    3698:	bc 01       	movw	r22, r24
    369a:	cd 01       	movw	r24, r26
    369c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a0:	dc 01       	movw	r26, r24
    36a2:	cb 01       	movw	r24, r22
    36a4:	f8 01       	movw	r30, r16
    36a6:	91 83       	std	Z+1, r25	; 0x01
    36a8:	80 83       	st	Z, r24
    36aa:	1f c0       	rjmp	.+62     	; 0x36ea <LCD_voidInit+0x132>
    36ac:	fe 01       	movw	r30, r28
    36ae:	e5 57       	subi	r30, 0x75	; 117
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	88 ec       	ldi	r24, 0xC8	; 200
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	91 83       	std	Z+1, r25	; 0x01
    36b8:	80 83       	st	Z, r24
    36ba:	fe 01       	movw	r30, r28
    36bc:	e5 57       	subi	r30, 0x75	; 117
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	80 81       	ld	r24, Z
    36c2:	91 81       	ldd	r25, Z+1	; 0x01
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	f1 f7       	brne	.-4      	; 0x36c4 <LCD_voidInit+0x10c>
    36c8:	fe 01       	movw	r30, r28
    36ca:	e5 57       	subi	r30, 0x75	; 117
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	91 83       	std	Z+1, r25	; 0x01
    36d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d2:	de 01       	movw	r26, r28
    36d4:	a3 57       	subi	r26, 0x73	; 115
    36d6:	bf 4f       	sbci	r27, 0xFF	; 255
    36d8:	fe 01       	movw	r30, r28
    36da:	e3 57       	subi	r30, 0x73	; 115
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	80 81       	ld	r24, Z
    36e0:	91 81       	ldd	r25, Z+1	; 0x01
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	11 96       	adiw	r26, 0x01	; 1
    36e6:	9c 93       	st	X, r25
    36e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ea:	fe 01       	movw	r30, r28
    36ec:	e3 57       	subi	r30, 0x73	; 115
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	80 81       	ld	r24, Z
    36f2:	91 81       	ldd	r25, Z+1	; 0x01
    36f4:	00 97       	sbiw	r24, 0x00	; 0
    36f6:	d1 f6       	brne	.-76     	; 0x36ac <LCD_voidInit+0xf4>
    36f8:	27 c0       	rjmp	.+78     	; 0x3748 <LCD_voidInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36fa:	8e 01       	movw	r16, r28
    36fc:	03 57       	subi	r16, 0x73	; 115
    36fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3700:	fe 01       	movw	r30, r28
    3702:	e1 57       	subi	r30, 0x71	; 113
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	60 81       	ld	r22, Z
    3708:	71 81       	ldd	r23, Z+1	; 0x01
    370a:	82 81       	ldd	r24, Z+2	; 0x02
    370c:	93 81       	ldd	r25, Z+3	; 0x03
    370e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	f8 01       	movw	r30, r16
    3718:	91 83       	std	Z+1, r25	; 0x01
    371a:	80 83       	st	Z, r24
    371c:	de 01       	movw	r26, r28
    371e:	a7 57       	subi	r26, 0x77	; 119
    3720:	bf 4f       	sbci	r27, 0xFF	; 255
    3722:	fe 01       	movw	r30, r28
    3724:	e3 57       	subi	r30, 0x73	; 115
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	80 81       	ld	r24, Z
    372a:	91 81       	ldd	r25, Z+1	; 0x01
    372c:	8d 93       	st	X+, r24
    372e:	9c 93       	st	X, r25
    3730:	fe 01       	movw	r30, r28
    3732:	e7 57       	subi	r30, 0x77	; 119
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	80 81       	ld	r24, Z
    3738:	91 81       	ldd	r25, Z+1	; 0x01
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	f1 f7       	brne	.-4      	; 0x373a <LCD_voidInit+0x182>
    373e:	fe 01       	movw	r30, r28
    3740:	e7 57       	subi	r30, 0x77	; 119
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	91 83       	std	Z+1, r25	; 0x01
    3746:	80 83       	st	Z, r24

	_delay_ms(50);

	DIO_voidSetPinValue(LCD_PORT,LCD_RS,Low);
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	64 e0       	ldi	r22, 0x04	; 4
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
    3752:	fe 01       	movw	r30, r28
    3754:	eb 57       	subi	r30, 0x7B	; 123
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	a0 e8       	ldi	r26, 0x80	; 128
    375e:	bf e3       	ldi	r27, 0x3F	; 63
    3760:	80 83       	st	Z, r24
    3762:	91 83       	std	Z+1, r25	; 0x01
    3764:	a2 83       	std	Z+2, r26	; 0x02
    3766:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3768:	8e 01       	movw	r16, r28
    376a:	0f 57       	subi	r16, 0x7F	; 127
    376c:	1f 4f       	sbci	r17, 0xFF	; 255
    376e:	fe 01       	movw	r30, r28
    3770:	eb 57       	subi	r30, 0x7B	; 123
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	60 81       	ld	r22, Z
    3776:	71 81       	ldd	r23, Z+1	; 0x01
    3778:	82 81       	ldd	r24, Z+2	; 0x02
    377a:	93 81       	ldd	r25, Z+3	; 0x03
    377c:	2b ea       	ldi	r18, 0xAB	; 171
    377e:	3a ea       	ldi	r19, 0xAA	; 170
    3780:	4a e2       	ldi	r20, 0x2A	; 42
    3782:	50 e4       	ldi	r21, 0x40	; 64
    3784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	f8 01       	movw	r30, r16
    378e:	80 83       	st	Z, r24
    3790:	91 83       	std	Z+1, r25	; 0x01
    3792:	a2 83       	std	Z+2, r26	; 0x02
    3794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3796:	fe 01       	movw	r30, r28
    3798:	ef 57       	subi	r30, 0x7F	; 127
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	60 81       	ld	r22, Z
    379e:	71 81       	ldd	r23, Z+1	; 0x01
    37a0:	82 81       	ldd	r24, Z+2	; 0x02
    37a2:	93 81       	ldd	r25, Z+3	; 0x03
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	40 e8       	ldi	r20, 0x80	; 128
    37aa:	5f e3       	ldi	r21, 0x3F	; 63
    37ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37b0:	88 23       	and	r24, r24
    37b2:	34 f4       	brge	.+12     	; 0x37c0 <LCD_voidInit+0x208>
		__ticks = 1;
    37b4:	fe 01       	movw	r30, r28
    37b6:	e0 58       	subi	r30, 0x80	; 128
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	80 83       	st	Z, r24
    37be:	e0 c0       	rjmp	.+448    	; 0x3980 <LCD_voidInit+0x3c8>
	else if (__tmp > 255)
    37c0:	fe 01       	movw	r30, r28
    37c2:	ef 57       	subi	r30, 0x7F	; 127
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	60 81       	ld	r22, Z
    37c8:	71 81       	ldd	r23, Z+1	; 0x01
    37ca:	82 81       	ldd	r24, Z+2	; 0x02
    37cc:	93 81       	ldd	r25, Z+3	; 0x03
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	4f e7       	ldi	r20, 0x7F	; 127
    37d4:	53 e4       	ldi	r21, 0x43	; 67
    37d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37da:	18 16       	cp	r1, r24
    37dc:	0c f0       	brlt	.+2      	; 0x37e0 <LCD_voidInit+0x228>
    37de:	c0 c0       	rjmp	.+384    	; 0x3960 <LCD_voidInit+0x3a8>
	{
		_delay_ms(__us / 1000.0);
    37e0:	fe 01       	movw	r30, r28
    37e2:	eb 57       	subi	r30, 0x7B	; 123
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	60 81       	ld	r22, Z
    37e8:	71 81       	ldd	r23, Z+1	; 0x01
    37ea:	82 81       	ldd	r24, Z+2	; 0x02
    37ec:	93 81       	ldd	r25, Z+3	; 0x03
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	4a e7       	ldi	r20, 0x7A	; 122
    37f4:	54 e4       	ldi	r21, 0x44	; 68
    37f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	fe 01       	movw	r30, r28
    3800:	e4 58       	subi	r30, 0x84	; 132
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	80 83       	st	Z, r24
    3806:	91 83       	std	Z+1, r25	; 0x01
    3808:	a2 83       	std	Z+2, r26	; 0x02
    380a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380c:	8e 01       	movw	r16, r28
    380e:	08 58       	subi	r16, 0x88	; 136
    3810:	1f 4f       	sbci	r17, 0xFF	; 255
    3812:	fe 01       	movw	r30, r28
    3814:	e4 58       	subi	r30, 0x84	; 132
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	60 81       	ld	r22, Z
    381a:	71 81       	ldd	r23, Z+1	; 0x01
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	93 81       	ldd	r25, Z+3	; 0x03
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	4a ef       	ldi	r20, 0xFA	; 250
    3826:	54 e4       	ldi	r21, 0x44	; 68
    3828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	f8 01       	movw	r30, r16
    3832:	80 83       	st	Z, r24
    3834:	91 83       	std	Z+1, r25	; 0x01
    3836:	a2 83       	std	Z+2, r26	; 0x02
    3838:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    383a:	fe 01       	movw	r30, r28
    383c:	e8 58       	subi	r30, 0x88	; 136
    383e:	ff 4f       	sbci	r31, 0xFF	; 255
    3840:	60 81       	ld	r22, Z
    3842:	71 81       	ldd	r23, Z+1	; 0x01
    3844:	82 81       	ldd	r24, Z+2	; 0x02
    3846:	93 81       	ldd	r25, Z+3	; 0x03
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	40 e8       	ldi	r20, 0x80	; 128
    384e:	5f e3       	ldi	r21, 0x3F	; 63
    3850:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3854:	88 23       	and	r24, r24
    3856:	44 f4       	brge	.+16     	; 0x3868 <LCD_voidInit+0x2b0>
		__ticks = 1;
    3858:	fe 01       	movw	r30, r28
    385a:	ea 58       	subi	r30, 0x8A	; 138
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	91 83       	std	Z+1, r25	; 0x01
    3864:	80 83       	st	Z, r24
    3866:	64 c0       	rjmp	.+200    	; 0x3930 <LCD_voidInit+0x378>
	else if (__tmp > 65535)
    3868:	fe 01       	movw	r30, r28
    386a:	e8 58       	subi	r30, 0x88	; 136
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	60 81       	ld	r22, Z
    3870:	71 81       	ldd	r23, Z+1	; 0x01
    3872:	82 81       	ldd	r24, Z+2	; 0x02
    3874:	93 81       	ldd	r25, Z+3	; 0x03
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	3f ef       	ldi	r19, 0xFF	; 255
    387a:	4f e7       	ldi	r20, 0x7F	; 127
    387c:	57 e4       	ldi	r21, 0x47	; 71
    387e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3882:	18 16       	cp	r1, r24
    3884:	0c f0       	brlt	.+2      	; 0x3888 <LCD_voidInit+0x2d0>
    3886:	43 c0       	rjmp	.+134    	; 0x390e <LCD_voidInit+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3888:	fe 01       	movw	r30, r28
    388a:	e4 58       	subi	r30, 0x84	; 132
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	60 81       	ld	r22, Z
    3890:	71 81       	ldd	r23, Z+1	; 0x01
    3892:	82 81       	ldd	r24, Z+2	; 0x02
    3894:	93 81       	ldd	r25, Z+3	; 0x03
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	40 e2       	ldi	r20, 0x20	; 32
    389c:	51 e4       	ldi	r21, 0x41	; 65
    389e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	8e 01       	movw	r16, r28
    38a8:	0a 58       	subi	r16, 0x8A	; 138
    38aa:	1f 4f       	sbci	r17, 0xFF	; 255
    38ac:	bc 01       	movw	r22, r24
    38ae:	cd 01       	movw	r24, r26
    38b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	f8 01       	movw	r30, r16
    38ba:	91 83       	std	Z+1, r25	; 0x01
    38bc:	80 83       	st	Z, r24
    38be:	1f c0       	rjmp	.+62     	; 0x38fe <LCD_voidInit+0x346>
    38c0:	fe 01       	movw	r30, r28
    38c2:	ec 58       	subi	r30, 0x8C	; 140
    38c4:	ff 4f       	sbci	r31, 0xFF	; 255
    38c6:	88 ec       	ldi	r24, 0xC8	; 200
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	91 83       	std	Z+1, r25	; 0x01
    38cc:	80 83       	st	Z, r24
    38ce:	fe 01       	movw	r30, r28
    38d0:	ec 58       	subi	r30, 0x8C	; 140
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 81       	ld	r24, Z
    38d6:	91 81       	ldd	r25, Z+1	; 0x01
    38d8:	01 97       	sbiw	r24, 0x01	; 1
    38da:	f1 f7       	brne	.-4      	; 0x38d8 <LCD_voidInit+0x320>
    38dc:	fe 01       	movw	r30, r28
    38de:	ec 58       	subi	r30, 0x8C	; 140
    38e0:	ff 4f       	sbci	r31, 0xFF	; 255
    38e2:	91 83       	std	Z+1, r25	; 0x01
    38e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e6:	de 01       	movw	r26, r28
    38e8:	aa 58       	subi	r26, 0x8A	; 138
    38ea:	bf 4f       	sbci	r27, 0xFF	; 255
    38ec:	fe 01       	movw	r30, r28
    38ee:	ea 58       	subi	r30, 0x8A	; 138
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	80 81       	ld	r24, Z
    38f4:	91 81       	ldd	r25, Z+1	; 0x01
    38f6:	01 97       	sbiw	r24, 0x01	; 1
    38f8:	11 96       	adiw	r26, 0x01	; 1
    38fa:	9c 93       	st	X, r25
    38fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38fe:	fe 01       	movw	r30, r28
    3900:	ea 58       	subi	r30, 0x8A	; 138
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	80 81       	ld	r24, Z
    3906:	91 81       	ldd	r25, Z+1	; 0x01
    3908:	00 97       	sbiw	r24, 0x00	; 0
    390a:	d1 f6       	brne	.-76     	; 0x38c0 <LCD_voidInit+0x308>
    390c:	4b c0       	rjmp	.+150    	; 0x39a4 <LCD_voidInit+0x3ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    390e:	8e 01       	movw	r16, r28
    3910:	0a 58       	subi	r16, 0x8A	; 138
    3912:	1f 4f       	sbci	r17, 0xFF	; 255
    3914:	fe 01       	movw	r30, r28
    3916:	e8 58       	subi	r30, 0x88	; 136
    3918:	ff 4f       	sbci	r31, 0xFF	; 255
    391a:	60 81       	ld	r22, Z
    391c:	71 81       	ldd	r23, Z+1	; 0x01
    391e:	82 81       	ldd	r24, Z+2	; 0x02
    3920:	93 81       	ldd	r25, Z+3	; 0x03
    3922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	f8 01       	movw	r30, r16
    392c:	91 83       	std	Z+1, r25	; 0x01
    392e:	80 83       	st	Z, r24
    3930:	de 01       	movw	r26, r28
    3932:	ae 58       	subi	r26, 0x8E	; 142
    3934:	bf 4f       	sbci	r27, 0xFF	; 255
    3936:	fe 01       	movw	r30, r28
    3938:	ea 58       	subi	r30, 0x8A	; 138
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	80 81       	ld	r24, Z
    393e:	91 81       	ldd	r25, Z+1	; 0x01
    3940:	11 96       	adiw	r26, 0x01	; 1
    3942:	9c 93       	st	X, r25
    3944:	8e 93       	st	-X, r24
    3946:	fe 01       	movw	r30, r28
    3948:	ee 58       	subi	r30, 0x8E	; 142
    394a:	ff 4f       	sbci	r31, 0xFF	; 255
    394c:	80 81       	ld	r24, Z
    394e:	91 81       	ldd	r25, Z+1	; 0x01
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	f1 f7       	brne	.-4      	; 0x3950 <LCD_voidInit+0x398>
    3954:	fe 01       	movw	r30, r28
    3956:	ee 58       	subi	r30, 0x8E	; 142
    3958:	ff 4f       	sbci	r31, 0xFF	; 255
    395a:	91 83       	std	Z+1, r25	; 0x01
    395c:	80 83       	st	Z, r24
    395e:	22 c0       	rjmp	.+68     	; 0x39a4 <LCD_voidInit+0x3ec>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3960:	8e 01       	movw	r16, r28
    3962:	00 58       	subi	r16, 0x80	; 128
    3964:	1f 4f       	sbci	r17, 0xFF	; 255
    3966:	fe 01       	movw	r30, r28
    3968:	ef 57       	subi	r30, 0x7F	; 127
    396a:	ff 4f       	sbci	r31, 0xFF	; 255
    396c:	60 81       	ld	r22, Z
    396e:	71 81       	ldd	r23, Z+1	; 0x01
    3970:	82 81       	ldd	r24, Z+2	; 0x02
    3972:	93 81       	ldd	r25, Z+3	; 0x03
    3974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	f8 01       	movw	r30, r16
    397e:	80 83       	st	Z, r24
    3980:	de 01       	movw	r26, r28
    3982:	af 58       	subi	r26, 0x8F	; 143
    3984:	bf 4f       	sbci	r27, 0xFF	; 255
    3986:	fe 01       	movw	r30, r28
    3988:	e0 58       	subi	r30, 0x80	; 128
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	80 81       	ld	r24, Z
    398e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3990:	fe 01       	movw	r30, r28
    3992:	ef 58       	subi	r30, 0x8F	; 143
    3994:	ff 4f       	sbci	r31, 0xFF	; 255
    3996:	80 81       	ld	r24, Z
    3998:	8a 95       	dec	r24
    399a:	f1 f7       	brne	.-4      	; 0x3998 <LCD_voidInit+0x3e0>
    399c:	fe 01       	movw	r30, r28
    399e:	ef 58       	subi	r30, 0x8F	; 143
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	80 83       	st	Z, r24
	_delay_us(1);

	LCD_voidSendNibble(3);   // Function Set
    39a4:	83 e0       	ldi	r24, 0x03	; 3
    39a6:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <LCD_voidSendNibble>
    39aa:	fe 01       	movw	r30, r28
    39ac:	e3 59       	subi	r30, 0x93	; 147
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	a0 ea       	ldi	r26, 0xA0	; 160
    39b6:	b0 e4       	ldi	r27, 0x40	; 64
    39b8:	80 83       	st	Z, r24
    39ba:	91 83       	std	Z+1, r25	; 0x01
    39bc:	a2 83       	std	Z+2, r26	; 0x02
    39be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c0:	8e 01       	movw	r16, r28
    39c2:	07 59       	subi	r16, 0x97	; 151
    39c4:	1f 4f       	sbci	r17, 0xFF	; 255
    39c6:	fe 01       	movw	r30, r28
    39c8:	e3 59       	subi	r30, 0x93	; 147
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	60 81       	ld	r22, Z
    39ce:	71 81       	ldd	r23, Z+1	; 0x01
    39d0:	82 81       	ldd	r24, Z+2	; 0x02
    39d2:	93 81       	ldd	r25, Z+3	; 0x03
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	4a ef       	ldi	r20, 0xFA	; 250
    39da:	54 e4       	ldi	r21, 0x44	; 68
    39dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	f8 01       	movw	r30, r16
    39e6:	80 83       	st	Z, r24
    39e8:	91 83       	std	Z+1, r25	; 0x01
    39ea:	a2 83       	std	Z+2, r26	; 0x02
    39ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39ee:	fe 01       	movw	r30, r28
    39f0:	e7 59       	subi	r30, 0x97	; 151
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	60 81       	ld	r22, Z
    39f6:	71 81       	ldd	r23, Z+1	; 0x01
    39f8:	82 81       	ldd	r24, Z+2	; 0x02
    39fa:	93 81       	ldd	r25, Z+3	; 0x03
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e8       	ldi	r20, 0x80	; 128
    3a02:	5f e3       	ldi	r21, 0x3F	; 63
    3a04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a08:	88 23       	and	r24, r24
    3a0a:	44 f4       	brge	.+16     	; 0x3a1c <LCD_voidInit+0x464>
		__ticks = 1;
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	e9 59       	subi	r30, 0x99	; 153
    3a10:	ff 4f       	sbci	r31, 0xFF	; 255
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	91 83       	std	Z+1, r25	; 0x01
    3a18:	80 83       	st	Z, r24
    3a1a:	64 c0       	rjmp	.+200    	; 0x3ae4 <LCD_voidInit+0x52c>
	else if (__tmp > 65535)
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	e7 59       	subi	r30, 0x97	; 151
    3a20:	ff 4f       	sbci	r31, 0xFF	; 255
    3a22:	60 81       	ld	r22, Z
    3a24:	71 81       	ldd	r23, Z+1	; 0x01
    3a26:	82 81       	ldd	r24, Z+2	; 0x02
    3a28:	93 81       	ldd	r25, Z+3	; 0x03
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	3f ef       	ldi	r19, 0xFF	; 255
    3a2e:	4f e7       	ldi	r20, 0x7F	; 127
    3a30:	57 e4       	ldi	r21, 0x47	; 71
    3a32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a36:	18 16       	cp	r1, r24
    3a38:	0c f0       	brlt	.+2      	; 0x3a3c <LCD_voidInit+0x484>
    3a3a:	43 c0       	rjmp	.+134    	; 0x3ac2 <LCD_voidInit+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	e3 59       	subi	r30, 0x93	; 147
    3a40:	ff 4f       	sbci	r31, 0xFF	; 255
    3a42:	60 81       	ld	r22, Z
    3a44:	71 81       	ldd	r23, Z+1	; 0x01
    3a46:	82 81       	ldd	r24, Z+2	; 0x02
    3a48:	93 81       	ldd	r25, Z+3	; 0x03
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e2       	ldi	r20, 0x20	; 32
    3a50:	51 e4       	ldi	r21, 0x41	; 65
    3a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	8e 01       	movw	r16, r28
    3a5c:	09 59       	subi	r16, 0x99	; 153
    3a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a60:	bc 01       	movw	r22, r24
    3a62:	cd 01       	movw	r24, r26
    3a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	f8 01       	movw	r30, r16
    3a6e:	91 83       	std	Z+1, r25	; 0x01
    3a70:	80 83       	st	Z, r24
    3a72:	1f c0       	rjmp	.+62     	; 0x3ab2 <LCD_voidInit+0x4fa>
    3a74:	fe 01       	movw	r30, r28
    3a76:	eb 59       	subi	r30, 0x9B	; 155
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	88 ec       	ldi	r24, 0xC8	; 200
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	91 83       	std	Z+1, r25	; 0x01
    3a80:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a82:	fe 01       	movw	r30, r28
    3a84:	eb 59       	subi	r30, 0x9B	; 155
    3a86:	ff 4f       	sbci	r31, 0xFF	; 255
    3a88:	80 81       	ld	r24, Z
    3a8a:	91 81       	ldd	r25, Z+1	; 0x01
    3a8c:	01 97       	sbiw	r24, 0x01	; 1
    3a8e:	f1 f7       	brne	.-4      	; 0x3a8c <LCD_voidInit+0x4d4>
    3a90:	fe 01       	movw	r30, r28
    3a92:	eb 59       	subi	r30, 0x9B	; 155
    3a94:	ff 4f       	sbci	r31, 0xFF	; 255
    3a96:	91 83       	std	Z+1, r25	; 0x01
    3a98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9a:	de 01       	movw	r26, r28
    3a9c:	a9 59       	subi	r26, 0x99	; 153
    3a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e9 59       	subi	r30, 0x99	; 153
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	80 81       	ld	r24, Z
    3aa8:	91 81       	ldd	r25, Z+1	; 0x01
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	11 96       	adiw	r26, 0x01	; 1
    3aae:	9c 93       	st	X, r25
    3ab0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab2:	fe 01       	movw	r30, r28
    3ab4:	e9 59       	subi	r30, 0x99	; 153
    3ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab8:	80 81       	ld	r24, Z
    3aba:	91 81       	ldd	r25, Z+1	; 0x01
    3abc:	00 97       	sbiw	r24, 0x00	; 0
    3abe:	d1 f6       	brne	.-76     	; 0x3a74 <LCD_voidInit+0x4bc>
    3ac0:	27 c0       	rjmp	.+78     	; 0x3b10 <LCD_voidInit+0x558>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac2:	8e 01       	movw	r16, r28
    3ac4:	09 59       	subi	r16, 0x99	; 153
    3ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac8:	fe 01       	movw	r30, r28
    3aca:	e7 59       	subi	r30, 0x97	; 151
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	60 81       	ld	r22, Z
    3ad0:	71 81       	ldd	r23, Z+1	; 0x01
    3ad2:	82 81       	ldd	r24, Z+2	; 0x02
    3ad4:	93 81       	ldd	r25, Z+3	; 0x03
    3ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ada:	dc 01       	movw	r26, r24
    3adc:	cb 01       	movw	r24, r22
    3ade:	f8 01       	movw	r30, r16
    3ae0:	91 83       	std	Z+1, r25	; 0x01
    3ae2:	80 83       	st	Z, r24
    3ae4:	de 01       	movw	r26, r28
    3ae6:	ad 59       	subi	r26, 0x9D	; 157
    3ae8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aea:	fe 01       	movw	r30, r28
    3aec:	e9 59       	subi	r30, 0x99	; 153
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	80 81       	ld	r24, Z
    3af2:	91 81       	ldd	r25, Z+1	; 0x01
    3af4:	8d 93       	st	X+, r24
    3af6:	9c 93       	st	X, r25
    3af8:	fe 01       	movw	r30, r28
    3afa:	ed 59       	subi	r30, 0x9D	; 157
    3afc:	ff 4f       	sbci	r31, 0xFF	; 255
    3afe:	80 81       	ld	r24, Z
    3b00:	91 81       	ldd	r25, Z+1	; 0x01
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	f1 f7       	brne	.-4      	; 0x3b02 <LCD_voidInit+0x54a>
    3b06:	fe 01       	movw	r30, r28
    3b08:	ed 59       	subi	r30, 0x9D	; 157
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	91 83       	std	Z+1, r25	; 0x01
    3b0e:	80 83       	st	Z, r24
	_delay_ms(5);

	LCD_voidSendNibble(3);   // Function Set
    3b10:	83 e0       	ldi	r24, 0x03	; 3
    3b12:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <LCD_voidSendNibble>
    3b16:	fe 01       	movw	r30, r28
    3b18:	e1 5a       	subi	r30, 0xA1	; 161
    3b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	a0 ea       	ldi	r26, 0xA0	; 160
    3b22:	b0 e4       	ldi	r27, 0x40	; 64
    3b24:	80 83       	st	Z, r24
    3b26:	91 83       	std	Z+1, r25	; 0x01
    3b28:	a2 83       	std	Z+2, r26	; 0x02
    3b2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b2c:	8e 01       	movw	r16, r28
    3b2e:	05 5a       	subi	r16, 0xA5	; 165
    3b30:	1f 4f       	sbci	r17, 0xFF	; 255
    3b32:	fe 01       	movw	r30, r28
    3b34:	e1 5a       	subi	r30, 0xA1	; 161
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	60 81       	ld	r22, Z
    3b3a:	71 81       	ldd	r23, Z+1	; 0x01
    3b3c:	82 81       	ldd	r24, Z+2	; 0x02
    3b3e:	93 81       	ldd	r25, Z+3	; 0x03
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	4a ef       	ldi	r20, 0xFA	; 250
    3b46:	54 e4       	ldi	r21, 0x44	; 68
    3b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	f8 01       	movw	r30, r16
    3b52:	80 83       	st	Z, r24
    3b54:	91 83       	std	Z+1, r25	; 0x01
    3b56:	a2 83       	std	Z+2, r26	; 0x02
    3b58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	e5 5a       	subi	r30, 0xA5	; 165
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	60 81       	ld	r22, Z
    3b62:	71 81       	ldd	r23, Z+1	; 0x01
    3b64:	82 81       	ldd	r24, Z+2	; 0x02
    3b66:	93 81       	ldd	r25, Z+3	; 0x03
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	40 e8       	ldi	r20, 0x80	; 128
    3b6e:	5f e3       	ldi	r21, 0x3F	; 63
    3b70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b74:	88 23       	and	r24, r24
    3b76:	44 f4       	brge	.+16     	; 0x3b88 <LCD_voidInit+0x5d0>
		__ticks = 1;
    3b78:	fe 01       	movw	r30, r28
    3b7a:	e7 5a       	subi	r30, 0xA7	; 167
    3b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	91 83       	std	Z+1, r25	; 0x01
    3b84:	80 83       	st	Z, r24
    3b86:	64 c0       	rjmp	.+200    	; 0x3c50 <LCD_voidInit+0x698>
	else if (__tmp > 65535)
    3b88:	fe 01       	movw	r30, r28
    3b8a:	e5 5a       	subi	r30, 0xA5	; 165
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	60 81       	ld	r22, Z
    3b90:	71 81       	ldd	r23, Z+1	; 0x01
    3b92:	82 81       	ldd	r24, Z+2	; 0x02
    3b94:	93 81       	ldd	r25, Z+3	; 0x03
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	3f ef       	ldi	r19, 0xFF	; 255
    3b9a:	4f e7       	ldi	r20, 0x7F	; 127
    3b9c:	57 e4       	ldi	r21, 0x47	; 71
    3b9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ba2:	18 16       	cp	r1, r24
    3ba4:	0c f0       	brlt	.+2      	; 0x3ba8 <LCD_voidInit+0x5f0>
    3ba6:	43 c0       	rjmp	.+134    	; 0x3c2e <LCD_voidInit+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba8:	fe 01       	movw	r30, r28
    3baa:	e1 5a       	subi	r30, 0xA1	; 161
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	60 81       	ld	r22, Z
    3bb0:	71 81       	ldd	r23, Z+1	; 0x01
    3bb2:	82 81       	ldd	r24, Z+2	; 0x02
    3bb4:	93 81       	ldd	r25, Z+3	; 0x03
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	40 e2       	ldi	r20, 0x20	; 32
    3bbc:	51 e4       	ldi	r21, 0x41	; 65
    3bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	8e 01       	movw	r16, r28
    3bc8:	07 5a       	subi	r16, 0xA7	; 167
    3bca:	1f 4f       	sbci	r17, 0xFF	; 255
    3bcc:	bc 01       	movw	r22, r24
    3bce:	cd 01       	movw	r24, r26
    3bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	f8 01       	movw	r30, r16
    3bda:	91 83       	std	Z+1, r25	; 0x01
    3bdc:	80 83       	st	Z, r24
    3bde:	1f c0       	rjmp	.+62     	; 0x3c1e <LCD_voidInit+0x666>
    3be0:	fe 01       	movw	r30, r28
    3be2:	e9 5a       	subi	r30, 0xA9	; 169
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	88 ec       	ldi	r24, 0xC8	; 200
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	91 83       	std	Z+1, r25	; 0x01
    3bec:	80 83       	st	Z, r24
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e9 5a       	subi	r30, 0xA9	; 169
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	80 81       	ld	r24, Z
    3bf6:	91 81       	ldd	r25, Z+1	; 0x01
    3bf8:	01 97       	sbiw	r24, 0x01	; 1
    3bfa:	f1 f7       	brne	.-4      	; 0x3bf8 <LCD_voidInit+0x640>
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	e9 5a       	subi	r30, 0xA9	; 169
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	91 83       	std	Z+1, r25	; 0x01
    3c04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c06:	de 01       	movw	r26, r28
    3c08:	a7 5a       	subi	r26, 0xA7	; 167
    3c0a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	e7 5a       	subi	r30, 0xA7	; 167
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	80 81       	ld	r24, Z
    3c14:	91 81       	ldd	r25, Z+1	; 0x01
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	11 96       	adiw	r26, 0x01	; 1
    3c1a:	9c 93       	st	X, r25
    3c1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c1e:	fe 01       	movw	r30, r28
    3c20:	e7 5a       	subi	r30, 0xA7	; 167
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	80 81       	ld	r24, Z
    3c26:	91 81       	ldd	r25, Z+1	; 0x01
    3c28:	00 97       	sbiw	r24, 0x00	; 0
    3c2a:	d1 f6       	brne	.-76     	; 0x3be0 <LCD_voidInit+0x628>
    3c2c:	27 c0       	rjmp	.+78     	; 0x3c7c <LCD_voidInit+0x6c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c2e:	8e 01       	movw	r16, r28
    3c30:	07 5a       	subi	r16, 0xA7	; 167
    3c32:	1f 4f       	sbci	r17, 0xFF	; 255
    3c34:	fe 01       	movw	r30, r28
    3c36:	e5 5a       	subi	r30, 0xA5	; 165
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	60 81       	ld	r22, Z
    3c3c:	71 81       	ldd	r23, Z+1	; 0x01
    3c3e:	82 81       	ldd	r24, Z+2	; 0x02
    3c40:	93 81       	ldd	r25, Z+3	; 0x03
    3c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	f8 01       	movw	r30, r16
    3c4c:	91 83       	std	Z+1, r25	; 0x01
    3c4e:	80 83       	st	Z, r24
    3c50:	de 01       	movw	r26, r28
    3c52:	ab 5a       	subi	r26, 0xAB	; 171
    3c54:	bf 4f       	sbci	r27, 0xFF	; 255
    3c56:	fe 01       	movw	r30, r28
    3c58:	e7 5a       	subi	r30, 0xA7	; 167
    3c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5c:	80 81       	ld	r24, Z
    3c5e:	91 81       	ldd	r25, Z+1	; 0x01
    3c60:	8d 93       	st	X+, r24
    3c62:	9c 93       	st	X, r25
    3c64:	fe 01       	movw	r30, r28
    3c66:	eb 5a       	subi	r30, 0xAB	; 171
    3c68:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6a:	80 81       	ld	r24, Z
    3c6c:	91 81       	ldd	r25, Z+1	; 0x01
    3c6e:	01 97       	sbiw	r24, 0x01	; 1
    3c70:	f1 f7       	brne	.-4      	; 0x3c6e <LCD_voidInit+0x6b6>
    3c72:	fe 01       	movw	r30, r28
    3c74:	eb 5a       	subi	r30, 0xAB	; 171
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	91 83       	std	Z+1, r25	; 0x01
    3c7a:	80 83       	st	Z, r24
	_delay_ms(5);

	LCD_voidSendNibble(3);   // Function Set
    3c7c:	83 e0       	ldi	r24, 0x03	; 3
    3c7e:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <LCD_voidSendNibble>
    3c82:	fe 01       	movw	r30, r28
    3c84:	ef 5a       	subi	r30, 0xAF	; 175
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	a0 ea       	ldi	r26, 0xA0	; 160
    3c8e:	b0 e4       	ldi	r27, 0x40	; 64
    3c90:	80 83       	st	Z, r24
    3c92:	91 83       	std	Z+1, r25	; 0x01
    3c94:	a2 83       	std	Z+2, r26	; 0x02
    3c96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c98:	8e 01       	movw	r16, r28
    3c9a:	03 5b       	subi	r16, 0xB3	; 179
    3c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c9e:	fe 01       	movw	r30, r28
    3ca0:	ef 5a       	subi	r30, 0xAF	; 175
    3ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca4:	60 81       	ld	r22, Z
    3ca6:	71 81       	ldd	r23, Z+1	; 0x01
    3ca8:	82 81       	ldd	r24, Z+2	; 0x02
    3caa:	93 81       	ldd	r25, Z+3	; 0x03
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	4a ef       	ldi	r20, 0xFA	; 250
    3cb2:	54 e4       	ldi	r21, 0x44	; 68
    3cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	f8 01       	movw	r30, r16
    3cbe:	80 83       	st	Z, r24
    3cc0:	91 83       	std	Z+1, r25	; 0x01
    3cc2:	a2 83       	std	Z+2, r26	; 0x02
    3cc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	e3 5b       	subi	r30, 0xB3	; 179
    3cca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ccc:	60 81       	ld	r22, Z
    3cce:	71 81       	ldd	r23, Z+1	; 0x01
    3cd0:	82 81       	ldd	r24, Z+2	; 0x02
    3cd2:	93 81       	ldd	r25, Z+3	; 0x03
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e8       	ldi	r20, 0x80	; 128
    3cda:	5f e3       	ldi	r21, 0x3F	; 63
    3cdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce0:	88 23       	and	r24, r24
    3ce2:	44 f4       	brge	.+16     	; 0x3cf4 <LCD_voidInit+0x73c>
		__ticks = 1;
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	e5 5b       	subi	r30, 0xB5	; 181
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	91 83       	std	Z+1, r25	; 0x01
    3cf0:	80 83       	st	Z, r24
    3cf2:	64 c0       	rjmp	.+200    	; 0x3dbc <LCD_voidInit+0x804>
	else if (__tmp > 65535)
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	e3 5b       	subi	r30, 0xB3	; 179
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	60 81       	ld	r22, Z
    3cfc:	71 81       	ldd	r23, Z+1	; 0x01
    3cfe:	82 81       	ldd	r24, Z+2	; 0x02
    3d00:	93 81       	ldd	r25, Z+3	; 0x03
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	3f ef       	ldi	r19, 0xFF	; 255
    3d06:	4f e7       	ldi	r20, 0x7F	; 127
    3d08:	57 e4       	ldi	r21, 0x47	; 71
    3d0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d0e:	18 16       	cp	r1, r24
    3d10:	0c f0       	brlt	.+2      	; 0x3d14 <LCD_voidInit+0x75c>
    3d12:	43 c0       	rjmp	.+134    	; 0x3d9a <LCD_voidInit+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d14:	fe 01       	movw	r30, r28
    3d16:	ef 5a       	subi	r30, 0xAF	; 175
    3d18:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1a:	60 81       	ld	r22, Z
    3d1c:	71 81       	ldd	r23, Z+1	; 0x01
    3d1e:	82 81       	ldd	r24, Z+2	; 0x02
    3d20:	93 81       	ldd	r25, Z+3	; 0x03
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	40 e2       	ldi	r20, 0x20	; 32
    3d28:	51 e4       	ldi	r21, 0x41	; 65
    3d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	8e 01       	movw	r16, r28
    3d34:	05 5b       	subi	r16, 0xB5	; 181
    3d36:	1f 4f       	sbci	r17, 0xFF	; 255
    3d38:	bc 01       	movw	r22, r24
    3d3a:	cd 01       	movw	r24, r26
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	f8 01       	movw	r30, r16
    3d46:	91 83       	std	Z+1, r25	; 0x01
    3d48:	80 83       	st	Z, r24
    3d4a:	1f c0       	rjmp	.+62     	; 0x3d8a <LCD_voidInit+0x7d2>
    3d4c:	fe 01       	movw	r30, r28
    3d4e:	e7 5b       	subi	r30, 0xB7	; 183
    3d50:	ff 4f       	sbci	r31, 0xFF	; 255
    3d52:	88 ec       	ldi	r24, 0xC8	; 200
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	91 83       	std	Z+1, r25	; 0x01
    3d58:	80 83       	st	Z, r24
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	e7 5b       	subi	r30, 0xB7	; 183
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	80 81       	ld	r24, Z
    3d62:	91 81       	ldd	r25, Z+1	; 0x01
    3d64:	01 97       	sbiw	r24, 0x01	; 1
    3d66:	f1 f7       	brne	.-4      	; 0x3d64 <LCD_voidInit+0x7ac>
    3d68:	fe 01       	movw	r30, r28
    3d6a:	e7 5b       	subi	r30, 0xB7	; 183
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	91 83       	std	Z+1, r25	; 0x01
    3d70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d72:	de 01       	movw	r26, r28
    3d74:	a5 5b       	subi	r26, 0xB5	; 181
    3d76:	bf 4f       	sbci	r27, 0xFF	; 255
    3d78:	fe 01       	movw	r30, r28
    3d7a:	e5 5b       	subi	r30, 0xB5	; 181
    3d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7e:	80 81       	ld	r24, Z
    3d80:	91 81       	ldd	r25, Z+1	; 0x01
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	11 96       	adiw	r26, 0x01	; 1
    3d86:	9c 93       	st	X, r25
    3d88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	e5 5b       	subi	r30, 0xB5	; 181
    3d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d90:	80 81       	ld	r24, Z
    3d92:	91 81       	ldd	r25, Z+1	; 0x01
    3d94:	00 97       	sbiw	r24, 0x00	; 0
    3d96:	d1 f6       	brne	.-76     	; 0x3d4c <LCD_voidInit+0x794>
    3d98:	27 c0       	rjmp	.+78     	; 0x3de8 <LCD_voidInit+0x830>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d9a:	8e 01       	movw	r16, r28
    3d9c:	05 5b       	subi	r16, 0xB5	; 181
    3d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3da0:	fe 01       	movw	r30, r28
    3da2:	e3 5b       	subi	r30, 0xB3	; 179
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	60 81       	ld	r22, Z
    3da8:	71 81       	ldd	r23, Z+1	; 0x01
    3daa:	82 81       	ldd	r24, Z+2	; 0x02
    3dac:	93 81       	ldd	r25, Z+3	; 0x03
    3dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	f8 01       	movw	r30, r16
    3db8:	91 83       	std	Z+1, r25	; 0x01
    3dba:	80 83       	st	Z, r24
    3dbc:	de 01       	movw	r26, r28
    3dbe:	a9 5b       	subi	r26, 0xB9	; 185
    3dc0:	bf 4f       	sbci	r27, 0xFF	; 255
    3dc2:	fe 01       	movw	r30, r28
    3dc4:	e5 5b       	subi	r30, 0xB5	; 181
    3dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc8:	80 81       	ld	r24, Z
    3dca:	91 81       	ldd	r25, Z+1	; 0x01
    3dcc:	8d 93       	st	X+, r24
    3dce:	9c 93       	st	X, r25
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	e9 5b       	subi	r30, 0xB9	; 185
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	80 81       	ld	r24, Z
    3dd8:	91 81       	ldd	r25, Z+1	; 0x01
    3dda:	01 97       	sbiw	r24, 0x01	; 1
    3ddc:	f1 f7       	brne	.-4      	; 0x3dda <LCD_voidInit+0x822>
    3dde:	fe 01       	movw	r30, r28
    3de0:	e9 5b       	subi	r30, 0xB9	; 185
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	91 83       	std	Z+1, r25	; 0x01
    3de6:	80 83       	st	Z, r24
	_delay_ms(5);

	LCD_voidSendNibble(2);
    3de8:	82 e0       	ldi	r24, 0x02	; 2
    3dea:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <LCD_voidSendNibble>
    3dee:	fe 01       	movw	r30, r28
    3df0:	ed 5b       	subi	r30, 0xBD	; 189
    3df2:	ff 4f       	sbci	r31, 0xFF	; 255
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	ac e5       	ldi	r26, 0x5C	; 92
    3dfa:	b2 e4       	ldi	r27, 0x42	; 66
    3dfc:	80 83       	st	Z, r24
    3dfe:	91 83       	std	Z+1, r25	; 0x01
    3e00:	a2 83       	std	Z+2, r26	; 0x02
    3e02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e04:	8e 01       	movw	r16, r28
    3e06:	01 5c       	subi	r16, 0xC1	; 193
    3e08:	1f 4f       	sbci	r17, 0xFF	; 255
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	ed 5b       	subi	r30, 0xBD	; 189
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	60 81       	ld	r22, Z
    3e12:	71 81       	ldd	r23, Z+1	; 0x01
    3e14:	82 81       	ldd	r24, Z+2	; 0x02
    3e16:	93 81       	ldd	r25, Z+3	; 0x03
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	4a ef       	ldi	r20, 0xFA	; 250
    3e1e:	54 e4       	ldi	r21, 0x44	; 68
    3e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	f8 01       	movw	r30, r16
    3e2a:	80 83       	st	Z, r24
    3e2c:	91 83       	std	Z+1, r25	; 0x01
    3e2e:	a2 83       	std	Z+2, r26	; 0x02
    3e30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e32:	fe 01       	movw	r30, r28
    3e34:	ff 96       	adiw	r30, 0x3f	; 63
    3e36:	60 81       	ld	r22, Z
    3e38:	71 81       	ldd	r23, Z+1	; 0x01
    3e3a:	82 81       	ldd	r24, Z+2	; 0x02
    3e3c:	93 81       	ldd	r25, Z+3	; 0x03
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	40 e8       	ldi	r20, 0x80	; 128
    3e44:	5f e3       	ldi	r21, 0x3F	; 63
    3e46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e4a:	88 23       	and	r24, r24
    3e4c:	2c f4       	brge	.+10     	; 0x3e58 <LCD_voidInit+0x8a0>
		__ticks = 1;
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	9e af       	std	Y+62, r25	; 0x3e
    3e54:	8d af       	std	Y+61, r24	; 0x3d
    3e56:	46 c0       	rjmp	.+140    	; 0x3ee4 <LCD_voidInit+0x92c>
	else if (__tmp > 65535)
    3e58:	fe 01       	movw	r30, r28
    3e5a:	ff 96       	adiw	r30, 0x3f	; 63
    3e5c:	60 81       	ld	r22, Z
    3e5e:	71 81       	ldd	r23, Z+1	; 0x01
    3e60:	82 81       	ldd	r24, Z+2	; 0x02
    3e62:	93 81       	ldd	r25, Z+3	; 0x03
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	3f ef       	ldi	r19, 0xFF	; 255
    3e68:	4f e7       	ldi	r20, 0x7F	; 127
    3e6a:	57 e4       	ldi	r21, 0x47	; 71
    3e6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e70:	18 16       	cp	r1, r24
    3e72:	64 f5       	brge	.+88     	; 0x3ecc <LCD_voidInit+0x914>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e74:	fe 01       	movw	r30, r28
    3e76:	ed 5b       	subi	r30, 0xBD	; 189
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	60 81       	ld	r22, Z
    3e7c:	71 81       	ldd	r23, Z+1	; 0x01
    3e7e:	82 81       	ldd	r24, Z+2	; 0x02
    3e80:	93 81       	ldd	r25, Z+3	; 0x03
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	40 e2       	ldi	r20, 0x20	; 32
    3e88:	51 e4       	ldi	r21, 0x41	; 65
    3e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	bc 01       	movw	r22, r24
    3e94:	cd 01       	movw	r24, r26
    3e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	9e af       	std	Y+62, r25	; 0x3e
    3ea0:	8d af       	std	Y+61, r24	; 0x3d
    3ea2:	0f c0       	rjmp	.+30     	; 0x3ec2 <LCD_voidInit+0x90a>
    3ea4:	88 ec       	ldi	r24, 0xC8	; 200
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	9c af       	std	Y+60, r25	; 0x3c
    3eaa:	8b af       	std	Y+59, r24	; 0x3b
    3eac:	8b ad       	ldd	r24, Y+59	; 0x3b
    3eae:	9c ad       	ldd	r25, Y+60	; 0x3c
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	f1 f7       	brne	.-4      	; 0x3eb0 <LCD_voidInit+0x8f8>
    3eb4:	9c af       	std	Y+60, r25	; 0x3c
    3eb6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    3eba:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ebc:	01 97       	sbiw	r24, 0x01	; 1
    3ebe:	9e af       	std	Y+62, r25	; 0x3e
    3ec0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ec4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ec6:	00 97       	sbiw	r24, 0x00	; 0
    3ec8:	69 f7       	brne	.-38     	; 0x3ea4 <LCD_voidInit+0x8ec>
    3eca:	16 c0       	rjmp	.+44     	; 0x3ef8 <LCD_voidInit+0x940>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ecc:	fe 01       	movw	r30, r28
    3ece:	ff 96       	adiw	r30, 0x3f	; 63
    3ed0:	60 81       	ld	r22, Z
    3ed2:	71 81       	ldd	r23, Z+1	; 0x01
    3ed4:	82 81       	ldd	r24, Z+2	; 0x02
    3ed6:	93 81       	ldd	r25, Z+3	; 0x03
    3ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	9e af       	std	Y+62, r25	; 0x3e
    3ee2:	8d af       	std	Y+61, r24	; 0x3d
    3ee4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ee6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ee8:	9a af       	std	Y+58, r25	; 0x3a
    3eea:	89 af       	std	Y+57, r24	; 0x39
    3eec:	89 ad       	ldd	r24, Y+57	; 0x39
    3eee:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ef0:	01 97       	sbiw	r24, 0x01	; 1
    3ef2:	f1 f7       	brne	.-4      	; 0x3ef0 <LCD_voidInit+0x938>
    3ef4:	9a af       	std	Y+58, r25	; 0x3a
    3ef6:	89 af       	std	Y+57, r24	; 0x39
//	LCD_voidSendCommand(0b00001100);  // Display ON/OFF
//
//	LCD_voidSendCommand(0b00000001);  // Display Clear

	  _delay_ms(55);
	  LCD_voidSendCommand(0x28);
    3ef8:	88 e2       	ldi	r24, 0x28	; 40
    3efa:	0e 94 1c 23 	call	0x4638	; 0x4638 <LCD_voidSendCommand>
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	a8 e4       	ldi	r26, 0x48	; 72
    3f04:	b2 e4       	ldi	r27, 0x42	; 66
    3f06:	8d ab       	std	Y+53, r24	; 0x35
    3f08:	9e ab       	std	Y+54, r25	; 0x36
    3f0a:	af ab       	std	Y+55, r26	; 0x37
    3f0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f0e:	6d a9       	ldd	r22, Y+53	; 0x35
    3f10:	7e a9       	ldd	r23, Y+54	; 0x36
    3f12:	8f a9       	ldd	r24, Y+55	; 0x37
    3f14:	98 ad       	ldd	r25, Y+56	; 0x38
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	4a ef       	ldi	r20, 0xFA	; 250
    3f1c:	54 e4       	ldi	r21, 0x44	; 68
    3f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	89 ab       	std	Y+49, r24	; 0x31
    3f28:	9a ab       	std	Y+50, r25	; 0x32
    3f2a:	ab ab       	std	Y+51, r26	; 0x33
    3f2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f2e:	69 a9       	ldd	r22, Y+49	; 0x31
    3f30:	7a a9       	ldd	r23, Y+50	; 0x32
    3f32:	8b a9       	ldd	r24, Y+51	; 0x33
    3f34:	9c a9       	ldd	r25, Y+52	; 0x34
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	40 e8       	ldi	r20, 0x80	; 128
    3f3c:	5f e3       	ldi	r21, 0x3F	; 63
    3f3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f42:	88 23       	and	r24, r24
    3f44:	2c f4       	brge	.+10     	; 0x3f50 <LCD_voidInit+0x998>
		__ticks = 1;
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	98 ab       	std	Y+48, r25	; 0x30
    3f4c:	8f a7       	std	Y+47, r24	; 0x2f
    3f4e:	3f c0       	rjmp	.+126    	; 0x3fce <LCD_voidInit+0xa16>
	else if (__tmp > 65535)
    3f50:	69 a9       	ldd	r22, Y+49	; 0x31
    3f52:	7a a9       	ldd	r23, Y+50	; 0x32
    3f54:	8b a9       	ldd	r24, Y+51	; 0x33
    3f56:	9c a9       	ldd	r25, Y+52	; 0x34
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	3f ef       	ldi	r19, 0xFF	; 255
    3f5c:	4f e7       	ldi	r20, 0x7F	; 127
    3f5e:	57 e4       	ldi	r21, 0x47	; 71
    3f60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f64:	18 16       	cp	r1, r24
    3f66:	4c f5       	brge	.+82     	; 0x3fba <LCD_voidInit+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f68:	6d a9       	ldd	r22, Y+53	; 0x35
    3f6a:	7e a9       	ldd	r23, Y+54	; 0x36
    3f6c:	8f a9       	ldd	r24, Y+55	; 0x37
    3f6e:	98 ad       	ldd	r25, Y+56	; 0x38
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	40 e2       	ldi	r20, 0x20	; 32
    3f76:	51 e4       	ldi	r21, 0x41	; 65
    3f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	bc 01       	movw	r22, r24
    3f82:	cd 01       	movw	r24, r26
    3f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	98 ab       	std	Y+48, r25	; 0x30
    3f8e:	8f a7       	std	Y+47, r24	; 0x2f
    3f90:	0f c0       	rjmp	.+30     	; 0x3fb0 <LCD_voidInit+0x9f8>
    3f92:	88 ec       	ldi	r24, 0xC8	; 200
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	9e a7       	std	Y+46, r25	; 0x2e
    3f98:	8d a7       	std	Y+45, r24	; 0x2d
    3f9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f9e:	01 97       	sbiw	r24, 0x01	; 1
    3fa0:	f1 f7       	brne	.-4      	; 0x3f9e <LCD_voidInit+0x9e6>
    3fa2:	9e a7       	std	Y+46, r25	; 0x2e
    3fa4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fa8:	98 a9       	ldd	r25, Y+48	; 0x30
    3faa:	01 97       	sbiw	r24, 0x01	; 1
    3fac:	98 ab       	std	Y+48, r25	; 0x30
    3fae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fb2:	98 a9       	ldd	r25, Y+48	; 0x30
    3fb4:	00 97       	sbiw	r24, 0x00	; 0
    3fb6:	69 f7       	brne	.-38     	; 0x3f92 <LCD_voidInit+0x9da>
    3fb8:	14 c0       	rjmp	.+40     	; 0x3fe2 <LCD_voidInit+0xa2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fba:	69 a9       	ldd	r22, Y+49	; 0x31
    3fbc:	7a a9       	ldd	r23, Y+50	; 0x32
    3fbe:	8b a9       	ldd	r24, Y+51	; 0x33
    3fc0:	9c a9       	ldd	r25, Y+52	; 0x34
    3fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	cb 01       	movw	r24, r22
    3fca:	98 ab       	std	Y+48, r25	; 0x30
    3fcc:	8f a7       	std	Y+47, r24	; 0x2f
    3fce:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fd0:	98 a9       	ldd	r25, Y+48	; 0x30
    3fd2:	9c a7       	std	Y+44, r25	; 0x2c
    3fd4:	8b a7       	std	Y+43, r24	; 0x2b
    3fd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	f1 f7       	brne	.-4      	; 0x3fda <LCD_voidInit+0xa22>
    3fde:	9c a7       	std	Y+44, r25	; 0x2c
    3fe0:	8b a7       	std	Y+43, r24	; 0x2b
	  _delay_ms(50);
	  LCD_voidSendCommand(0x0C);
    3fe2:	8c e0       	ldi	r24, 0x0C	; 12
    3fe4:	0e 94 1c 23 	call	0x4638	; 0x4638 <LCD_voidSendCommand>
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	a8 ec       	ldi	r26, 0xC8	; 200
    3fee:	b2 e4       	ldi	r27, 0x42	; 66
    3ff0:	8f a3       	std	Y+39, r24	; 0x27
    3ff2:	98 a7       	std	Y+40, r25	; 0x28
    3ff4:	a9 a7       	std	Y+41, r26	; 0x29
    3ff6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff8:	6f a1       	ldd	r22, Y+39	; 0x27
    3ffa:	78 a5       	ldd	r23, Y+40	; 0x28
    3ffc:	89 a5       	ldd	r24, Y+41	; 0x29
    3ffe:	9a a5       	ldd	r25, Y+42	; 0x2a
    4000:	20 e0       	ldi	r18, 0x00	; 0
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	4a ef       	ldi	r20, 0xFA	; 250
    4006:	54 e4       	ldi	r21, 0x44	; 68
    4008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    400c:	dc 01       	movw	r26, r24
    400e:	cb 01       	movw	r24, r22
    4010:	8b a3       	std	Y+35, r24	; 0x23
    4012:	9c a3       	std	Y+36, r25	; 0x24
    4014:	ad a3       	std	Y+37, r26	; 0x25
    4016:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4018:	6b a1       	ldd	r22, Y+35	; 0x23
    401a:	7c a1       	ldd	r23, Y+36	; 0x24
    401c:	8d a1       	ldd	r24, Y+37	; 0x25
    401e:	9e a1       	ldd	r25, Y+38	; 0x26
    4020:	20 e0       	ldi	r18, 0x00	; 0
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	40 e8       	ldi	r20, 0x80	; 128
    4026:	5f e3       	ldi	r21, 0x3F	; 63
    4028:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    402c:	88 23       	and	r24, r24
    402e:	2c f4       	brge	.+10     	; 0x403a <LCD_voidInit+0xa82>
		__ticks = 1;
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	9a a3       	std	Y+34, r25	; 0x22
    4036:	89 a3       	std	Y+33, r24	; 0x21
    4038:	3f c0       	rjmp	.+126    	; 0x40b8 <LCD_voidInit+0xb00>
	else if (__tmp > 65535)
    403a:	6b a1       	ldd	r22, Y+35	; 0x23
    403c:	7c a1       	ldd	r23, Y+36	; 0x24
    403e:	8d a1       	ldd	r24, Y+37	; 0x25
    4040:	9e a1       	ldd	r25, Y+38	; 0x26
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	3f ef       	ldi	r19, 0xFF	; 255
    4046:	4f e7       	ldi	r20, 0x7F	; 127
    4048:	57 e4       	ldi	r21, 0x47	; 71
    404a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    404e:	18 16       	cp	r1, r24
    4050:	4c f5       	brge	.+82     	; 0x40a4 <LCD_voidInit+0xaec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4052:	6f a1       	ldd	r22, Y+39	; 0x27
    4054:	78 a5       	ldd	r23, Y+40	; 0x28
    4056:	89 a5       	ldd	r24, Y+41	; 0x29
    4058:	9a a5       	ldd	r25, Y+42	; 0x2a
    405a:	20 e0       	ldi	r18, 0x00	; 0
    405c:	30 e0       	ldi	r19, 0x00	; 0
    405e:	40 e2       	ldi	r20, 0x20	; 32
    4060:	51 e4       	ldi	r21, 0x41	; 65
    4062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4066:	dc 01       	movw	r26, r24
    4068:	cb 01       	movw	r24, r22
    406a:	bc 01       	movw	r22, r24
    406c:	cd 01       	movw	r24, r26
    406e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	9a a3       	std	Y+34, r25	; 0x22
    4078:	89 a3       	std	Y+33, r24	; 0x21
    407a:	0f c0       	rjmp	.+30     	; 0x409a <LCD_voidInit+0xae2>
    407c:	88 ec       	ldi	r24, 0xC8	; 200
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	98 a3       	std	Y+32, r25	; 0x20
    4082:	8f 8f       	std	Y+31, r24	; 0x1f
    4084:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4086:	98 a1       	ldd	r25, Y+32	; 0x20
    4088:	01 97       	sbiw	r24, 0x01	; 1
    408a:	f1 f7       	brne	.-4      	; 0x4088 <LCD_voidInit+0xad0>
    408c:	98 a3       	std	Y+32, r25	; 0x20
    408e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4090:	89 a1       	ldd	r24, Y+33	; 0x21
    4092:	9a a1       	ldd	r25, Y+34	; 0x22
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	9a a3       	std	Y+34, r25	; 0x22
    4098:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    409a:	89 a1       	ldd	r24, Y+33	; 0x21
    409c:	9a a1       	ldd	r25, Y+34	; 0x22
    409e:	00 97       	sbiw	r24, 0x00	; 0
    40a0:	69 f7       	brne	.-38     	; 0x407c <LCD_voidInit+0xac4>
    40a2:	14 c0       	rjmp	.+40     	; 0x40cc <LCD_voidInit+0xb14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a4:	6b a1       	ldd	r22, Y+35	; 0x23
    40a6:	7c a1       	ldd	r23, Y+36	; 0x24
    40a8:	8d a1       	ldd	r24, Y+37	; 0x25
    40aa:	9e a1       	ldd	r25, Y+38	; 0x26
    40ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b0:	dc 01       	movw	r26, r24
    40b2:	cb 01       	movw	r24, r22
    40b4:	9a a3       	std	Y+34, r25	; 0x22
    40b6:	89 a3       	std	Y+33, r24	; 0x21
    40b8:	89 a1       	ldd	r24, Y+33	; 0x21
    40ba:	9a a1       	ldd	r25, Y+34	; 0x22
    40bc:	9e 8f       	std	Y+30, r25	; 0x1e
    40be:	8d 8f       	std	Y+29, r24	; 0x1d
    40c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	f1 f7       	brne	.-4      	; 0x40c4 <LCD_voidInit+0xb0c>
    40c8:	9e 8f       	std	Y+30, r25	; 0x1e
    40ca:	8d 8f       	std	Y+29, r24	; 0x1d
	  _delay_ms(100);
	  LCD_voidSendCommand(0x06);
    40cc:	86 e0       	ldi	r24, 0x06	; 6
    40ce:	0e 94 1c 23 	call	0x4638	; 0x4638 <LCD_voidSendCommand>
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	a8 e4       	ldi	r26, 0x48	; 72
    40d8:	b2 e4       	ldi	r27, 0x42	; 66
    40da:	89 8f       	std	Y+25, r24	; 0x19
    40dc:	9a 8f       	std	Y+26, r25	; 0x1a
    40de:	ab 8f       	std	Y+27, r26	; 0x1b
    40e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40e2:	69 8d       	ldd	r22, Y+25	; 0x19
    40e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40ea:	20 e0       	ldi	r18, 0x00	; 0
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	4a ef       	ldi	r20, 0xFA	; 250
    40f0:	54 e4       	ldi	r21, 0x44	; 68
    40f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	8d 8b       	std	Y+21, r24	; 0x15
    40fc:	9e 8b       	std	Y+22, r25	; 0x16
    40fe:	af 8b       	std	Y+23, r26	; 0x17
    4100:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4102:	6d 89       	ldd	r22, Y+21	; 0x15
    4104:	7e 89       	ldd	r23, Y+22	; 0x16
    4106:	8f 89       	ldd	r24, Y+23	; 0x17
    4108:	98 8d       	ldd	r25, Y+24	; 0x18
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	40 e8       	ldi	r20, 0x80	; 128
    4110:	5f e3       	ldi	r21, 0x3F	; 63
    4112:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4116:	88 23       	and	r24, r24
    4118:	2c f4       	brge	.+10     	; 0x4124 <LCD_voidInit+0xb6c>
		__ticks = 1;
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	9c 8b       	std	Y+20, r25	; 0x14
    4120:	8b 8b       	std	Y+19, r24	; 0x13
    4122:	3f c0       	rjmp	.+126    	; 0x41a2 <LCD_voidInit+0xbea>
	else if (__tmp > 65535)
    4124:	6d 89       	ldd	r22, Y+21	; 0x15
    4126:	7e 89       	ldd	r23, Y+22	; 0x16
    4128:	8f 89       	ldd	r24, Y+23	; 0x17
    412a:	98 8d       	ldd	r25, Y+24	; 0x18
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	3f ef       	ldi	r19, 0xFF	; 255
    4130:	4f e7       	ldi	r20, 0x7F	; 127
    4132:	57 e4       	ldi	r21, 0x47	; 71
    4134:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4138:	18 16       	cp	r1, r24
    413a:	4c f5       	brge	.+82     	; 0x418e <LCD_voidInit+0xbd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    413c:	69 8d       	ldd	r22, Y+25	; 0x19
    413e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4140:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4142:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	40 e2       	ldi	r20, 0x20	; 32
    414a:	51 e4       	ldi	r21, 0x41	; 65
    414c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	bc 01       	movw	r22, r24
    4156:	cd 01       	movw	r24, r26
    4158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
    4160:	9c 8b       	std	Y+20, r25	; 0x14
    4162:	8b 8b       	std	Y+19, r24	; 0x13
    4164:	0f c0       	rjmp	.+30     	; 0x4184 <LCD_voidInit+0xbcc>
    4166:	88 ec       	ldi	r24, 0xC8	; 200
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	9a 8b       	std	Y+18, r25	; 0x12
    416c:	89 8b       	std	Y+17, r24	; 0x11
    416e:	89 89       	ldd	r24, Y+17	; 0x11
    4170:	9a 89       	ldd	r25, Y+18	; 0x12
    4172:	01 97       	sbiw	r24, 0x01	; 1
    4174:	f1 f7       	brne	.-4      	; 0x4172 <LCD_voidInit+0xbba>
    4176:	9a 8b       	std	Y+18, r25	; 0x12
    4178:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    417a:	8b 89       	ldd	r24, Y+19	; 0x13
    417c:	9c 89       	ldd	r25, Y+20	; 0x14
    417e:	01 97       	sbiw	r24, 0x01	; 1
    4180:	9c 8b       	std	Y+20, r25	; 0x14
    4182:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4184:	8b 89       	ldd	r24, Y+19	; 0x13
    4186:	9c 89       	ldd	r25, Y+20	; 0x14
    4188:	00 97       	sbiw	r24, 0x00	; 0
    418a:	69 f7       	brne	.-38     	; 0x4166 <LCD_voidInit+0xbae>
    418c:	14 c0       	rjmp	.+40     	; 0x41b6 <LCD_voidInit+0xbfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    418e:	6d 89       	ldd	r22, Y+21	; 0x15
    4190:	7e 89       	ldd	r23, Y+22	; 0x16
    4192:	8f 89       	ldd	r24, Y+23	; 0x17
    4194:	98 8d       	ldd	r25, Y+24	; 0x18
    4196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	9c 8b       	std	Y+20, r25	; 0x14
    41a0:	8b 8b       	std	Y+19, r24	; 0x13
    41a2:	8b 89       	ldd	r24, Y+19	; 0x13
    41a4:	9c 89       	ldd	r25, Y+20	; 0x14
    41a6:	98 8b       	std	Y+16, r25	; 0x10
    41a8:	8f 87       	std	Y+15, r24	; 0x0f
    41aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ac:	98 89       	ldd	r25, Y+16	; 0x10
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	f1 f7       	brne	.-4      	; 0x41ae <LCD_voidInit+0xbf6>
    41b2:	98 8b       	std	Y+16, r25	; 0x10
    41b4:	8f 87       	std	Y+15, r24	; 0x0f
	  _delay_ms(50);
	  LCD_voidSendCommand(0x0C);
    41b6:	8c e0       	ldi	r24, 0x0C	; 12
    41b8:	0e 94 1c 23 	call	0x4638	; 0x4638 <LCD_voidSendCommand>
    41bc:	80 e0       	ldi	r24, 0x00	; 0
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	a8 ec       	ldi	r26, 0xC8	; 200
    41c2:	b2 e4       	ldi	r27, 0x42	; 66
    41c4:	8b 87       	std	Y+11, r24	; 0x0b
    41c6:	9c 87       	std	Y+12, r25	; 0x0c
    41c8:	ad 87       	std	Y+13, r26	; 0x0d
    41ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    41d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	4a ef       	ldi	r20, 0xFA	; 250
    41da:	54 e4       	ldi	r21, 0x44	; 68
    41dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e0:	dc 01       	movw	r26, r24
    41e2:	cb 01       	movw	r24, r22
    41e4:	8f 83       	std	Y+7, r24	; 0x07
    41e6:	98 87       	std	Y+8, r25	; 0x08
    41e8:	a9 87       	std	Y+9, r26	; 0x09
    41ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41ec:	6f 81       	ldd	r22, Y+7	; 0x07
    41ee:	78 85       	ldd	r23, Y+8	; 0x08
    41f0:	89 85       	ldd	r24, Y+9	; 0x09
    41f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41f4:	20 e0       	ldi	r18, 0x00	; 0
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	40 e8       	ldi	r20, 0x80	; 128
    41fa:	5f e3       	ldi	r21, 0x3F	; 63
    41fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4200:	88 23       	and	r24, r24
    4202:	2c f4       	brge	.+10     	; 0x420e <LCD_voidInit+0xc56>
		__ticks = 1;
    4204:	81 e0       	ldi	r24, 0x01	; 1
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	9e 83       	std	Y+6, r25	; 0x06
    420a:	8d 83       	std	Y+5, r24	; 0x05
    420c:	3f c0       	rjmp	.+126    	; 0x428c <LCD_voidInit+0xcd4>
	else if (__tmp > 65535)
    420e:	6f 81       	ldd	r22, Y+7	; 0x07
    4210:	78 85       	ldd	r23, Y+8	; 0x08
    4212:	89 85       	ldd	r24, Y+9	; 0x09
    4214:	9a 85       	ldd	r25, Y+10	; 0x0a
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	3f ef       	ldi	r19, 0xFF	; 255
    421a:	4f e7       	ldi	r20, 0x7F	; 127
    421c:	57 e4       	ldi	r21, 0x47	; 71
    421e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4222:	18 16       	cp	r1, r24
    4224:	4c f5       	brge	.+82     	; 0x4278 <LCD_voidInit+0xcc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4226:	6b 85       	ldd	r22, Y+11	; 0x0b
    4228:	7c 85       	ldd	r23, Y+12	; 0x0c
    422a:	8d 85       	ldd	r24, Y+13	; 0x0d
    422c:	9e 85       	ldd	r25, Y+14	; 0x0e
    422e:	20 e0       	ldi	r18, 0x00	; 0
    4230:	30 e0       	ldi	r19, 0x00	; 0
    4232:	40 e2       	ldi	r20, 0x20	; 32
    4234:	51 e4       	ldi	r21, 0x41	; 65
    4236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    423a:	dc 01       	movw	r26, r24
    423c:	cb 01       	movw	r24, r22
    423e:	bc 01       	movw	r22, r24
    4240:	cd 01       	movw	r24, r26
    4242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4246:	dc 01       	movw	r26, r24
    4248:	cb 01       	movw	r24, r22
    424a:	9e 83       	std	Y+6, r25	; 0x06
    424c:	8d 83       	std	Y+5, r24	; 0x05
    424e:	0f c0       	rjmp	.+30     	; 0x426e <LCD_voidInit+0xcb6>
    4250:	88 ec       	ldi	r24, 0xC8	; 200
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	9c 83       	std	Y+4, r25	; 0x04
    4256:	8b 83       	std	Y+3, r24	; 0x03
    4258:	8b 81       	ldd	r24, Y+3	; 0x03
    425a:	9c 81       	ldd	r25, Y+4	; 0x04
    425c:	01 97       	sbiw	r24, 0x01	; 1
    425e:	f1 f7       	brne	.-4      	; 0x425c <LCD_voidInit+0xca4>
    4260:	9c 83       	std	Y+4, r25	; 0x04
    4262:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4264:	8d 81       	ldd	r24, Y+5	; 0x05
    4266:	9e 81       	ldd	r25, Y+6	; 0x06
    4268:	01 97       	sbiw	r24, 0x01	; 1
    426a:	9e 83       	std	Y+6, r25	; 0x06
    426c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    426e:	8d 81       	ldd	r24, Y+5	; 0x05
    4270:	9e 81       	ldd	r25, Y+6	; 0x06
    4272:	00 97       	sbiw	r24, 0x00	; 0
    4274:	69 f7       	brne	.-38     	; 0x4250 <LCD_voidInit+0xc98>
    4276:	14 c0       	rjmp	.+40     	; 0x42a0 <LCD_voidInit+0xce8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4278:	6f 81       	ldd	r22, Y+7	; 0x07
    427a:	78 85       	ldd	r23, Y+8	; 0x08
    427c:	89 85       	ldd	r24, Y+9	; 0x09
    427e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	9e 83       	std	Y+6, r25	; 0x06
    428a:	8d 83       	std	Y+5, r24	; 0x05
    428c:	8d 81       	ldd	r24, Y+5	; 0x05
    428e:	9e 81       	ldd	r25, Y+6	; 0x06
    4290:	9a 83       	std	Y+2, r25	; 0x02
    4292:	89 83       	std	Y+1, r24	; 0x01
    4294:	89 81       	ldd	r24, Y+1	; 0x01
    4296:	9a 81       	ldd	r25, Y+2	; 0x02
    4298:	01 97       	sbiw	r24, 0x01	; 1
    429a:	f1 f7       	brne	.-4      	; 0x4298 <LCD_voidInit+0xce0>
    429c:	9a 83       	std	Y+2, r25	; 0x02
    429e:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(100);



}
    42a0:	ca 56       	subi	r28, 0x6A	; 106
    42a2:	df 4f       	sbci	r29, 0xFF	; 255
    42a4:	0f b6       	in	r0, 0x3f	; 63
    42a6:	f8 94       	cli
    42a8:	de bf       	out	0x3e, r29	; 62
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	cd bf       	out	0x3d, r28	; 61
    42ae:	cf 91       	pop	r28
    42b0:	df 91       	pop	r29
    42b2:	1f 91       	pop	r17
    42b4:	0f 91       	pop	r16
    42b6:	08 95       	ret

000042b8 <LCD_voidSendNibble>:

void LCD_voidSendNibble(u8 COPY_u8Data)
{
    42b8:	df 93       	push	r29
    42ba:	cf 93       	push	r28
    42bc:	cd b7       	in	r28, 0x3d	; 61
    42be:	de b7       	in	r29, 0x3e	; 62
    42c0:	6d 97       	sbiw	r28, 0x1d	; 29
    42c2:	0f b6       	in	r0, 0x3f	; 63
    42c4:	f8 94       	cli
    42c6:	de bf       	out	0x3e, r29	; 62
    42c8:	0f be       	out	0x3f, r0	; 63
    42ca:	cd bf       	out	0x3d, r28	; 61
    42cc:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_voidSetPinValue(LCD_PORT,LCD_RW,Low);
    42ce:	80 e0       	ldi	r24, 0x00	; 0
    42d0:	65 e0       	ldi	r22, 0x05	; 5
    42d2:	40 e0       	ldi	r20, 0x00	; 0
    42d4:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
    42d8:	80 e0       	ldi	r24, 0x00	; 0
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	a0 e8       	ldi	r26, 0x80	; 128
    42de:	bf e3       	ldi	r27, 0x3F	; 63
    42e0:	89 8f       	std	Y+25, r24	; 0x19
    42e2:	9a 8f       	std	Y+26, r25	; 0x1a
    42e4:	ab 8f       	std	Y+27, r26	; 0x1b
    42e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42e8:	69 8d       	ldd	r22, Y+25	; 0x19
    42ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42f0:	20 e0       	ldi	r18, 0x00	; 0
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	4a ef       	ldi	r20, 0xFA	; 250
    42f6:	54 e4       	ldi	r21, 0x44	; 68
    42f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42fc:	dc 01       	movw	r26, r24
    42fe:	cb 01       	movw	r24, r22
    4300:	8d 8b       	std	Y+21, r24	; 0x15
    4302:	9e 8b       	std	Y+22, r25	; 0x16
    4304:	af 8b       	std	Y+23, r26	; 0x17
    4306:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4308:	6d 89       	ldd	r22, Y+21	; 0x15
    430a:	7e 89       	ldd	r23, Y+22	; 0x16
    430c:	8f 89       	ldd	r24, Y+23	; 0x17
    430e:	98 8d       	ldd	r25, Y+24	; 0x18
    4310:	20 e0       	ldi	r18, 0x00	; 0
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	40 e8       	ldi	r20, 0x80	; 128
    4316:	5f e3       	ldi	r21, 0x3F	; 63
    4318:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    431c:	88 23       	and	r24, r24
    431e:	2c f4       	brge	.+10     	; 0x432a <LCD_voidSendNibble+0x72>
		__ticks = 1;
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	9c 8b       	std	Y+20, r25	; 0x14
    4326:	8b 8b       	std	Y+19, r24	; 0x13
    4328:	3f c0       	rjmp	.+126    	; 0x43a8 <LCD_voidSendNibble+0xf0>
	else if (__tmp > 65535)
    432a:	6d 89       	ldd	r22, Y+21	; 0x15
    432c:	7e 89       	ldd	r23, Y+22	; 0x16
    432e:	8f 89       	ldd	r24, Y+23	; 0x17
    4330:	98 8d       	ldd	r25, Y+24	; 0x18
    4332:	20 e0       	ldi	r18, 0x00	; 0
    4334:	3f ef       	ldi	r19, 0xFF	; 255
    4336:	4f e7       	ldi	r20, 0x7F	; 127
    4338:	57 e4       	ldi	r21, 0x47	; 71
    433a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    433e:	18 16       	cp	r1, r24
    4340:	4c f5       	brge	.+82     	; 0x4394 <LCD_voidSendNibble+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4342:	69 8d       	ldd	r22, Y+25	; 0x19
    4344:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4346:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4348:	9c 8d       	ldd	r25, Y+28	; 0x1c
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	40 e2       	ldi	r20, 0x20	; 32
    4350:	51 e4       	ldi	r21, 0x41	; 65
    4352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4356:	dc 01       	movw	r26, r24
    4358:	cb 01       	movw	r24, r22
    435a:	bc 01       	movw	r22, r24
    435c:	cd 01       	movw	r24, r26
    435e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	9c 8b       	std	Y+20, r25	; 0x14
    4368:	8b 8b       	std	Y+19, r24	; 0x13
    436a:	0f c0       	rjmp	.+30     	; 0x438a <LCD_voidSendNibble+0xd2>
    436c:	88 ec       	ldi	r24, 0xC8	; 200
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	9a 8b       	std	Y+18, r25	; 0x12
    4372:	89 8b       	std	Y+17, r24	; 0x11
    4374:	89 89       	ldd	r24, Y+17	; 0x11
    4376:	9a 89       	ldd	r25, Y+18	; 0x12
    4378:	01 97       	sbiw	r24, 0x01	; 1
    437a:	f1 f7       	brne	.-4      	; 0x4378 <LCD_voidSendNibble+0xc0>
    437c:	9a 8b       	std	Y+18, r25	; 0x12
    437e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4380:	8b 89       	ldd	r24, Y+19	; 0x13
    4382:	9c 89       	ldd	r25, Y+20	; 0x14
    4384:	01 97       	sbiw	r24, 0x01	; 1
    4386:	9c 8b       	std	Y+20, r25	; 0x14
    4388:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    438a:	8b 89       	ldd	r24, Y+19	; 0x13
    438c:	9c 89       	ldd	r25, Y+20	; 0x14
    438e:	00 97       	sbiw	r24, 0x00	; 0
    4390:	69 f7       	brne	.-38     	; 0x436c <LCD_voidSendNibble+0xb4>
    4392:	14 c0       	rjmp	.+40     	; 0x43bc <LCD_voidSendNibble+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4394:	6d 89       	ldd	r22, Y+21	; 0x15
    4396:	7e 89       	ldd	r23, Y+22	; 0x16
    4398:	8f 89       	ldd	r24, Y+23	; 0x17
    439a:	98 8d       	ldd	r25, Y+24	; 0x18
    439c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a0:	dc 01       	movw	r26, r24
    43a2:	cb 01       	movw	r24, r22
    43a4:	9c 8b       	std	Y+20, r25	; 0x14
    43a6:	8b 8b       	std	Y+19, r24	; 0x13
    43a8:	8b 89       	ldd	r24, Y+19	; 0x13
    43aa:	9c 89       	ldd	r25, Y+20	; 0x14
    43ac:	98 8b       	std	Y+16, r25	; 0x10
    43ae:	8f 87       	std	Y+15, r24	; 0x0f
    43b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    43b2:	98 89       	ldd	r25, Y+16	; 0x10
    43b4:	01 97       	sbiw	r24, 0x01	; 1
    43b6:	f1 f7       	brne	.-4      	; 0x43b4 <LCD_voidSendNibble+0xfc>
    43b8:	98 8b       	std	Y+16, r25	; 0x10
    43ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	DIO_voidSetPinValue(LCD_PORT,LCD_D4, (COPY_u8Data) & 1   	  );
    43bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43be:	98 2f       	mov	r25, r24
    43c0:	91 70       	andi	r25, 0x01	; 1
    43c2:	80 e0       	ldi	r24, 0x00	; 0
    43c4:	60 e0       	ldi	r22, 0x00	; 0
    43c6:	49 2f       	mov	r20, r25
    43c8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT,LCD_D5, (COPY_u8Data >> 1) & 1   );
    43cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43ce:	86 95       	lsr	r24
    43d0:	98 2f       	mov	r25, r24
    43d2:	91 70       	andi	r25, 0x01	; 1
    43d4:	80 e0       	ldi	r24, 0x00	; 0
    43d6:	61 e0       	ldi	r22, 0x01	; 1
    43d8:	49 2f       	mov	r20, r25
    43da:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT,LCD_D6, (COPY_u8Data >> 2) & 1   );
    43de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43e0:	86 95       	lsr	r24
    43e2:	86 95       	lsr	r24
    43e4:	98 2f       	mov	r25, r24
    43e6:	91 70       	andi	r25, 0x01	; 1
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	62 e0       	ldi	r22, 0x02	; 2
    43ec:	49 2f       	mov	r20, r25
    43ee:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT,LCD_D7, (COPY_u8Data >> 3) & 1   );
    43f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43f4:	86 95       	lsr	r24
    43f6:	86 95       	lsr	r24
    43f8:	86 95       	lsr	r24
    43fa:	98 2f       	mov	r25, r24
    43fc:	91 70       	andi	r25, 0x01	; 1
    43fe:	80 e0       	ldi	r24, 0x00	; 0
    4400:	63 e0       	ldi	r22, 0x03	; 3
    4402:	49 2f       	mov	r20, r25
    4404:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>


	DIO_voidSetPinValue(LCD_PORT,LCD_E,High);
    4408:	80 e0       	ldi	r24, 0x00	; 0
    440a:	66 e0       	ldi	r22, 0x06	; 6
    440c:	41 e0       	ldi	r20, 0x01	; 1
    440e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
    4412:	80 e0       	ldi	r24, 0x00	; 0
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	a0 e8       	ldi	r26, 0x80	; 128
    4418:	bf e3       	ldi	r27, 0x3F	; 63
    441a:	8b 87       	std	Y+11, r24	; 0x0b
    441c:	9c 87       	std	Y+12, r25	; 0x0c
    441e:	ad 87       	std	Y+13, r26	; 0x0d
    4420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4422:	6b 85       	ldd	r22, Y+11	; 0x0b
    4424:	7c 85       	ldd	r23, Y+12	; 0x0c
    4426:	8d 85       	ldd	r24, Y+13	; 0x0d
    4428:	9e 85       	ldd	r25, Y+14	; 0x0e
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	4a ef       	ldi	r20, 0xFA	; 250
    4430:	54 e4       	ldi	r21, 0x44	; 68
    4432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	8f 83       	std	Y+7, r24	; 0x07
    443c:	98 87       	std	Y+8, r25	; 0x08
    443e:	a9 87       	std	Y+9, r26	; 0x09
    4440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4442:	6f 81       	ldd	r22, Y+7	; 0x07
    4444:	78 85       	ldd	r23, Y+8	; 0x08
    4446:	89 85       	ldd	r24, Y+9	; 0x09
    4448:	9a 85       	ldd	r25, Y+10	; 0x0a
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	40 e8       	ldi	r20, 0x80	; 128
    4450:	5f e3       	ldi	r21, 0x3F	; 63
    4452:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4456:	88 23       	and	r24, r24
    4458:	2c f4       	brge	.+10     	; 0x4464 <LCD_voidSendNibble+0x1ac>
		__ticks = 1;
    445a:	81 e0       	ldi	r24, 0x01	; 1
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	9e 83       	std	Y+6, r25	; 0x06
    4460:	8d 83       	std	Y+5, r24	; 0x05
    4462:	3f c0       	rjmp	.+126    	; 0x44e2 <LCD_voidSendNibble+0x22a>
	else if (__tmp > 65535)
    4464:	6f 81       	ldd	r22, Y+7	; 0x07
    4466:	78 85       	ldd	r23, Y+8	; 0x08
    4468:	89 85       	ldd	r24, Y+9	; 0x09
    446a:	9a 85       	ldd	r25, Y+10	; 0x0a
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	3f ef       	ldi	r19, 0xFF	; 255
    4470:	4f e7       	ldi	r20, 0x7F	; 127
    4472:	57 e4       	ldi	r21, 0x47	; 71
    4474:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4478:	18 16       	cp	r1, r24
    447a:	4c f5       	brge	.+82     	; 0x44ce <LCD_voidSendNibble+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447c:	6b 85       	ldd	r22, Y+11	; 0x0b
    447e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4480:	8d 85       	ldd	r24, Y+13	; 0x0d
    4482:	9e 85       	ldd	r25, Y+14	; 0x0e
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	40 e2       	ldi	r20, 0x20	; 32
    448a:	51 e4       	ldi	r21, 0x41	; 65
    448c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	bc 01       	movw	r22, r24
    4496:	cd 01       	movw	r24, r26
    4498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	9e 83       	std	Y+6, r25	; 0x06
    44a2:	8d 83       	std	Y+5, r24	; 0x05
    44a4:	0f c0       	rjmp	.+30     	; 0x44c4 <LCD_voidSendNibble+0x20c>
    44a6:	88 ec       	ldi	r24, 0xC8	; 200
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	9c 83       	std	Y+4, r25	; 0x04
    44ac:	8b 83       	std	Y+3, r24	; 0x03
    44ae:	8b 81       	ldd	r24, Y+3	; 0x03
    44b0:	9c 81       	ldd	r25, Y+4	; 0x04
    44b2:	01 97       	sbiw	r24, 0x01	; 1
    44b4:	f1 f7       	brne	.-4      	; 0x44b2 <LCD_voidSendNibble+0x1fa>
    44b6:	9c 83       	std	Y+4, r25	; 0x04
    44b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ba:	8d 81       	ldd	r24, Y+5	; 0x05
    44bc:	9e 81       	ldd	r25, Y+6	; 0x06
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	9e 83       	std	Y+6, r25	; 0x06
    44c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c4:	8d 81       	ldd	r24, Y+5	; 0x05
    44c6:	9e 81       	ldd	r25, Y+6	; 0x06
    44c8:	00 97       	sbiw	r24, 0x00	; 0
    44ca:	69 f7       	brne	.-38     	; 0x44a6 <LCD_voidSendNibble+0x1ee>
    44cc:	14 c0       	rjmp	.+40     	; 0x44f6 <LCD_voidSendNibble+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ce:	6f 81       	ldd	r22, Y+7	; 0x07
    44d0:	78 85       	ldd	r23, Y+8	; 0x08
    44d2:	89 85       	ldd	r24, Y+9	; 0x09
    44d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44da:	dc 01       	movw	r26, r24
    44dc:	cb 01       	movw	r24, r22
    44de:	9e 83       	std	Y+6, r25	; 0x06
    44e0:	8d 83       	std	Y+5, r24	; 0x05
    44e2:	8d 81       	ldd	r24, Y+5	; 0x05
    44e4:	9e 81       	ldd	r25, Y+6	; 0x06
    44e6:	9a 83       	std	Y+2, r25	; 0x02
    44e8:	89 83       	std	Y+1, r24	; 0x01
    44ea:	89 81       	ldd	r24, Y+1	; 0x01
    44ec:	9a 81       	ldd	r25, Y+2	; 0x02
    44ee:	01 97       	sbiw	r24, 0x01	; 1
    44f0:	f1 f7       	brne	.-4      	; 0x44ee <LCD_voidSendNibble+0x236>
    44f2:	9a 83       	std	Y+2, r25	; 0x02
    44f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_PORT,LCD_E,Low);
    44f6:	80 e0       	ldi	r24, 0x00	; 0
    44f8:	66 e0       	ldi	r22, 0x06	; 6
    44fa:	40 e0       	ldi	r20, 0x00	; 0
    44fc:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>

}
    4500:	6d 96       	adiw	r28, 0x1d	; 29
    4502:	0f b6       	in	r0, 0x3f	; 63
    4504:	f8 94       	cli
    4506:	de bf       	out	0x3e, r29	; 62
    4508:	0f be       	out	0x3f, r0	; 63
    450a:	cd bf       	out	0x3d, r28	; 61
    450c:	cf 91       	pop	r28
    450e:	df 91       	pop	r29
    4510:	08 95       	ret

00004512 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 COPY_u8Data )
{
    4512:	df 93       	push	r29
    4514:	cf 93       	push	r28
    4516:	cd b7       	in	r28, 0x3d	; 61
    4518:	de b7       	in	r29, 0x3e	; 62
    451a:	2f 97       	sbiw	r28, 0x0f	; 15
    451c:	0f b6       	in	r0, 0x3f	; 63
    451e:	f8 94       	cli
    4520:	de bf       	out	0x3e, r29	; 62
    4522:	0f be       	out	0x3f, r0	; 63
    4524:	cd bf       	out	0x3d, r28	; 61
    4526:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_PORT,LCD_RS,High);
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	64 e0       	ldi	r22, 0x04	; 4
    452c:	41 e0       	ldi	r20, 0x01	; 1
    452e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	a0 ea       	ldi	r26, 0xA0	; 160
    4538:	b0 e4       	ldi	r27, 0x40	; 64
    453a:	8b 87       	std	Y+11, r24	; 0x0b
    453c:	9c 87       	std	Y+12, r25	; 0x0c
    453e:	ad 87       	std	Y+13, r26	; 0x0d
    4540:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4542:	6b 85       	ldd	r22, Y+11	; 0x0b
    4544:	7c 85       	ldd	r23, Y+12	; 0x0c
    4546:	8d 85       	ldd	r24, Y+13	; 0x0d
    4548:	9e 85       	ldd	r25, Y+14	; 0x0e
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	4a ef       	ldi	r20, 0xFA	; 250
    4550:	54 e4       	ldi	r21, 0x44	; 68
    4552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4556:	dc 01       	movw	r26, r24
    4558:	cb 01       	movw	r24, r22
    455a:	8f 83       	std	Y+7, r24	; 0x07
    455c:	98 87       	std	Y+8, r25	; 0x08
    455e:	a9 87       	std	Y+9, r26	; 0x09
    4560:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4562:	6f 81       	ldd	r22, Y+7	; 0x07
    4564:	78 85       	ldd	r23, Y+8	; 0x08
    4566:	89 85       	ldd	r24, Y+9	; 0x09
    4568:	9a 85       	ldd	r25, Y+10	; 0x0a
    456a:	20 e0       	ldi	r18, 0x00	; 0
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	40 e8       	ldi	r20, 0x80	; 128
    4570:	5f e3       	ldi	r21, 0x3F	; 63
    4572:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4576:	88 23       	and	r24, r24
    4578:	2c f4       	brge	.+10     	; 0x4584 <LCD_voidSendChar+0x72>
		__ticks = 1;
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	9e 83       	std	Y+6, r25	; 0x06
    4580:	8d 83       	std	Y+5, r24	; 0x05
    4582:	3f c0       	rjmp	.+126    	; 0x4602 <LCD_voidSendChar+0xf0>
	else if (__tmp > 65535)
    4584:	6f 81       	ldd	r22, Y+7	; 0x07
    4586:	78 85       	ldd	r23, Y+8	; 0x08
    4588:	89 85       	ldd	r24, Y+9	; 0x09
    458a:	9a 85       	ldd	r25, Y+10	; 0x0a
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	3f ef       	ldi	r19, 0xFF	; 255
    4590:	4f e7       	ldi	r20, 0x7F	; 127
    4592:	57 e4       	ldi	r21, 0x47	; 71
    4594:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4598:	18 16       	cp	r1, r24
    459a:	4c f5       	brge	.+82     	; 0x45ee <LCD_voidSendChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    459c:	6b 85       	ldd	r22, Y+11	; 0x0b
    459e:	7c 85       	ldd	r23, Y+12	; 0x0c
    45a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    45a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	40 e2       	ldi	r20, 0x20	; 32
    45aa:	51 e4       	ldi	r21, 0x41	; 65
    45ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	bc 01       	movw	r22, r24
    45b6:	cd 01       	movw	r24, r26
    45b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	9e 83       	std	Y+6, r25	; 0x06
    45c2:	8d 83       	std	Y+5, r24	; 0x05
    45c4:	0f c0       	rjmp	.+30     	; 0x45e4 <LCD_voidSendChar+0xd2>
    45c6:	88 ec       	ldi	r24, 0xC8	; 200
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	9c 83       	std	Y+4, r25	; 0x04
    45cc:	8b 83       	std	Y+3, r24	; 0x03
    45ce:	8b 81       	ldd	r24, Y+3	; 0x03
    45d0:	9c 81       	ldd	r25, Y+4	; 0x04
    45d2:	01 97       	sbiw	r24, 0x01	; 1
    45d4:	f1 f7       	brne	.-4      	; 0x45d2 <LCD_voidSendChar+0xc0>
    45d6:	9c 83       	std	Y+4, r25	; 0x04
    45d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45da:	8d 81       	ldd	r24, Y+5	; 0x05
    45dc:	9e 81       	ldd	r25, Y+6	; 0x06
    45de:	01 97       	sbiw	r24, 0x01	; 1
    45e0:	9e 83       	std	Y+6, r25	; 0x06
    45e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45e4:	8d 81       	ldd	r24, Y+5	; 0x05
    45e6:	9e 81       	ldd	r25, Y+6	; 0x06
    45e8:	00 97       	sbiw	r24, 0x00	; 0
    45ea:	69 f7       	brne	.-38     	; 0x45c6 <LCD_voidSendChar+0xb4>
    45ec:	14 c0       	rjmp	.+40     	; 0x4616 <LCD_voidSendChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ee:	6f 81       	ldd	r22, Y+7	; 0x07
    45f0:	78 85       	ldd	r23, Y+8	; 0x08
    45f2:	89 85       	ldd	r24, Y+9	; 0x09
    45f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	9e 83       	std	Y+6, r25	; 0x06
    4600:	8d 83       	std	Y+5, r24	; 0x05
    4602:	8d 81       	ldd	r24, Y+5	; 0x05
    4604:	9e 81       	ldd	r25, Y+6	; 0x06
    4606:	9a 83       	std	Y+2, r25	; 0x02
    4608:	89 83       	std	Y+1, r24	; 0x01
    460a:	89 81       	ldd	r24, Y+1	; 0x01
    460c:	9a 81       	ldd	r25, Y+2	; 0x02
    460e:	01 97       	sbiw	r24, 0x01	; 1
    4610:	f1 f7       	brne	.-4      	; 0x460e <LCD_voidSendChar+0xfc>
    4612:	9a 83       	std	Y+2, r25	; 0x02
    4614:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);

	LCD_voidSendNibble(COPY_u8Data>>4);
    4616:	8f 85       	ldd	r24, Y+15	; 0x0f
    4618:	82 95       	swap	r24
    461a:	8f 70       	andi	r24, 0x0F	; 15
    461c:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <LCD_voidSendNibble>
	LCD_voidSendNibble(COPY_u8Data);
    4620:	8f 85       	ldd	r24, Y+15	; 0x0f
    4622:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <LCD_voidSendNibble>


}
    4626:	2f 96       	adiw	r28, 0x0f	; 15
    4628:	0f b6       	in	r0, 0x3f	; 63
    462a:	f8 94       	cli
    462c:	de bf       	out	0x3e, r29	; 62
    462e:	0f be       	out	0x3f, r0	; 63
    4630:	cd bf       	out	0x3d, r28	; 61
    4632:	cf 91       	pop	r28
    4634:	df 91       	pop	r29
    4636:	08 95       	ret

00004638 <LCD_voidSendCommand>:
void LCD_voidSendCommand(u8 COPY_u8command)
{
    4638:	df 93       	push	r29
    463a:	cf 93       	push	r28
    463c:	cd b7       	in	r28, 0x3d	; 61
    463e:	de b7       	in	r29, 0x3e	; 62
    4640:	2f 97       	sbiw	r28, 0x0f	; 15
    4642:	0f b6       	in	r0, 0x3f	; 63
    4644:	f8 94       	cli
    4646:	de bf       	out	0x3e, r29	; 62
    4648:	0f be       	out	0x3f, r0	; 63
    464a:	cd bf       	out	0x3d, r28	; 61
    464c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_PORT,LCD_RS,Low);
    464e:	80 e0       	ldi	r24, 0x00	; 0
    4650:	64 e0       	ldi	r22, 0x04	; 4
    4652:	40 e0       	ldi	r20, 0x00	; 0
    4654:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_voidSetPinValue>
    4658:	80 e0       	ldi	r24, 0x00	; 0
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	a0 ea       	ldi	r26, 0xA0	; 160
    465e:	b0 e4       	ldi	r27, 0x40	; 64
    4660:	8b 87       	std	Y+11, r24	; 0x0b
    4662:	9c 87       	std	Y+12, r25	; 0x0c
    4664:	ad 87       	std	Y+13, r26	; 0x0d
    4666:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4668:	6b 85       	ldd	r22, Y+11	; 0x0b
    466a:	7c 85       	ldd	r23, Y+12	; 0x0c
    466c:	8d 85       	ldd	r24, Y+13	; 0x0d
    466e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	4a ef       	ldi	r20, 0xFA	; 250
    4676:	54 e4       	ldi	r21, 0x44	; 68
    4678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	8f 83       	std	Y+7, r24	; 0x07
    4682:	98 87       	std	Y+8, r25	; 0x08
    4684:	a9 87       	std	Y+9, r26	; 0x09
    4686:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4688:	6f 81       	ldd	r22, Y+7	; 0x07
    468a:	78 85       	ldd	r23, Y+8	; 0x08
    468c:	89 85       	ldd	r24, Y+9	; 0x09
    468e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	30 e0       	ldi	r19, 0x00	; 0
    4694:	40 e8       	ldi	r20, 0x80	; 128
    4696:	5f e3       	ldi	r21, 0x3F	; 63
    4698:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    469c:	88 23       	and	r24, r24
    469e:	2c f4       	brge	.+10     	; 0x46aa <LCD_voidSendCommand+0x72>
		__ticks = 1;
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	9e 83       	std	Y+6, r25	; 0x06
    46a6:	8d 83       	std	Y+5, r24	; 0x05
    46a8:	3f c0       	rjmp	.+126    	; 0x4728 <LCD_voidSendCommand+0xf0>
	else if (__tmp > 65535)
    46aa:	6f 81       	ldd	r22, Y+7	; 0x07
    46ac:	78 85       	ldd	r23, Y+8	; 0x08
    46ae:	89 85       	ldd	r24, Y+9	; 0x09
    46b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	3f ef       	ldi	r19, 0xFF	; 255
    46b6:	4f e7       	ldi	r20, 0x7F	; 127
    46b8:	57 e4       	ldi	r21, 0x47	; 71
    46ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46be:	18 16       	cp	r1, r24
    46c0:	4c f5       	brge	.+82     	; 0x4714 <LCD_voidSendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    46c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    46c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    46c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	40 e2       	ldi	r20, 0x20	; 32
    46d0:	51 e4       	ldi	r21, 0x41	; 65
    46d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d6:	dc 01       	movw	r26, r24
    46d8:	cb 01       	movw	r24, r22
    46da:	bc 01       	movw	r22, r24
    46dc:	cd 01       	movw	r24, r26
    46de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e2:	dc 01       	movw	r26, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	9e 83       	std	Y+6, r25	; 0x06
    46e8:	8d 83       	std	Y+5, r24	; 0x05
    46ea:	0f c0       	rjmp	.+30     	; 0x470a <LCD_voidSendCommand+0xd2>
    46ec:	88 ec       	ldi	r24, 0xC8	; 200
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	9c 83       	std	Y+4, r25	; 0x04
    46f2:	8b 83       	std	Y+3, r24	; 0x03
    46f4:	8b 81       	ldd	r24, Y+3	; 0x03
    46f6:	9c 81       	ldd	r25, Y+4	; 0x04
    46f8:	01 97       	sbiw	r24, 0x01	; 1
    46fa:	f1 f7       	brne	.-4      	; 0x46f8 <LCD_voidSendCommand+0xc0>
    46fc:	9c 83       	std	Y+4, r25	; 0x04
    46fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4700:	8d 81       	ldd	r24, Y+5	; 0x05
    4702:	9e 81       	ldd	r25, Y+6	; 0x06
    4704:	01 97       	sbiw	r24, 0x01	; 1
    4706:	9e 83       	std	Y+6, r25	; 0x06
    4708:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    470a:	8d 81       	ldd	r24, Y+5	; 0x05
    470c:	9e 81       	ldd	r25, Y+6	; 0x06
    470e:	00 97       	sbiw	r24, 0x00	; 0
    4710:	69 f7       	brne	.-38     	; 0x46ec <LCD_voidSendCommand+0xb4>
    4712:	14 c0       	rjmp	.+40     	; 0x473c <LCD_voidSendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4714:	6f 81       	ldd	r22, Y+7	; 0x07
    4716:	78 85       	ldd	r23, Y+8	; 0x08
    4718:	89 85       	ldd	r24, Y+9	; 0x09
    471a:	9a 85       	ldd	r25, Y+10	; 0x0a
    471c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4720:	dc 01       	movw	r26, r24
    4722:	cb 01       	movw	r24, r22
    4724:	9e 83       	std	Y+6, r25	; 0x06
    4726:	8d 83       	std	Y+5, r24	; 0x05
    4728:	8d 81       	ldd	r24, Y+5	; 0x05
    472a:	9e 81       	ldd	r25, Y+6	; 0x06
    472c:	9a 83       	std	Y+2, r25	; 0x02
    472e:	89 83       	std	Y+1, r24	; 0x01
    4730:	89 81       	ldd	r24, Y+1	; 0x01
    4732:	9a 81       	ldd	r25, Y+2	; 0x02
    4734:	01 97       	sbiw	r24, 0x01	; 1
    4736:	f1 f7       	brne	.-4      	; 0x4734 <LCD_voidSendCommand+0xfc>
    4738:	9a 83       	std	Y+2, r25	; 0x02
    473a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);


	LCD_voidSendNibble(COPY_u8command>>4);
    473c:	8f 85       	ldd	r24, Y+15	; 0x0f
    473e:	82 95       	swap	r24
    4740:	8f 70       	andi	r24, 0x0F	; 15
    4742:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <LCD_voidSendNibble>
	LCD_voidSendNibble(COPY_u8command);
    4746:	8f 85       	ldd	r24, Y+15	; 0x0f
    4748:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <LCD_voidSendNibble>


}
    474c:	2f 96       	adiw	r28, 0x0f	; 15
    474e:	0f b6       	in	r0, 0x3f	; 63
    4750:	f8 94       	cli
    4752:	de bf       	out	0x3e, r29	; 62
    4754:	0f be       	out	0x3f, r0	; 63
    4756:	cd bf       	out	0x3d, r28	; 61
    4758:	cf 91       	pop	r28
    475a:	df 91       	pop	r29
    475c:	08 95       	ret

0000475e <LCD_voidSendStr>:

void LCD_voidSendStr(u8 * COPY_u8Ptr)
{
    475e:	df 93       	push	r29
    4760:	cf 93       	push	r28
    4762:	00 d0       	rcall	.+0      	; 0x4764 <LCD_voidSendStr+0x6>
    4764:	0f 92       	push	r0
    4766:	cd b7       	in	r28, 0x3d	; 61
    4768:	de b7       	in	r29, 0x3e	; 62
    476a:	9b 83       	std	Y+3, r25	; 0x03
    476c:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8Iterator=0;
    476e:	19 82       	std	Y+1, r1	; 0x01
    4770:	0e c0       	rjmp	.+28     	; 0x478e <LCD_voidSendStr+0x30>

	while( COPY_u8Ptr[LOC_u8Iterator] )
	{
		LCD_voidSendChar( COPY_u8Ptr[LOC_u8Iterator] );
    4772:	89 81       	ldd	r24, Y+1	; 0x01
    4774:	28 2f       	mov	r18, r24
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	8a 81       	ldd	r24, Y+2	; 0x02
    477a:	9b 81       	ldd	r25, Y+3	; 0x03
    477c:	fc 01       	movw	r30, r24
    477e:	e2 0f       	add	r30, r18
    4780:	f3 1f       	adc	r31, r19
    4782:	80 81       	ld	r24, Z
    4784:	0e 94 89 22 	call	0x4512	; 0x4512 <LCD_voidSendChar>
		LOC_u8Iterator++;
    4788:	89 81       	ldd	r24, Y+1	; 0x01
    478a:	8f 5f       	subi	r24, 0xFF	; 255
    478c:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendStr(u8 * COPY_u8Ptr)
{
	u8 LOC_u8Iterator=0;

	while( COPY_u8Ptr[LOC_u8Iterator] )
    478e:	89 81       	ldd	r24, Y+1	; 0x01
    4790:	28 2f       	mov	r18, r24
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	8a 81       	ldd	r24, Y+2	; 0x02
    4796:	9b 81       	ldd	r25, Y+3	; 0x03
    4798:	fc 01       	movw	r30, r24
    479a:	e2 0f       	add	r30, r18
    479c:	f3 1f       	adc	r31, r19
    479e:	80 81       	ld	r24, Z
    47a0:	88 23       	and	r24, r24
    47a2:	39 f7       	brne	.-50     	; 0x4772 <LCD_voidSendStr+0x14>
	{
		LCD_voidSendChar( COPY_u8Ptr[LOC_u8Iterator] );
		LOC_u8Iterator++;
	}

}
    47a4:	0f 90       	pop	r0
    47a6:	0f 90       	pop	r0
    47a8:	0f 90       	pop	r0
    47aa:	cf 91       	pop	r28
    47ac:	df 91       	pop	r29
    47ae:	08 95       	ret

000047b0 <LCD_voidClear>:

void LCD_voidClear(void)
{
    47b0:	df 93       	push	r29
    47b2:	cf 93       	push	r28
    47b4:	cd b7       	in	r28, 0x3d	; 61
    47b6:	de b7       	in	r29, 0x3e	; 62

	LCD_voidSendCommand(1);
    47b8:	81 e0       	ldi	r24, 0x01	; 1
    47ba:	0e 94 1c 23 	call	0x4638	; 0x4638 <LCD_voidSendCommand>

}
    47be:	cf 91       	pop	r28
    47c0:	df 91       	pop	r29
    47c2:	08 95       	ret

000047c4 <LCD_voidSendNumber>:


void LCD_voidSendNumber(u32 COPY_u32Number )
{
    47c4:	df 93       	push	r29
    47c6:	cf 93       	push	r28
    47c8:	cd b7       	in	r28, 0x3d	; 61
    47ca:	de b7       	in	r29, 0x3e	; 62
    47cc:	28 97       	sbiw	r28, 0x08	; 8
    47ce:	0f b6       	in	r0, 0x3f	; 63
    47d0:	f8 94       	cli
    47d2:	de bf       	out	0x3e, r29	; 62
    47d4:	0f be       	out	0x3f, r0	; 63
    47d6:	cd bf       	out	0x3d, r28	; 61
    47d8:	6d 83       	std	Y+5, r22	; 0x05
    47da:	7e 83       	std	Y+6, r23	; 0x06
    47dc:	8f 83       	std	Y+7, r24	; 0x07
    47de:	98 87       	std	Y+8, r25	; 0x08
	if(COPY_u32Number == 0)
    47e0:	8d 81       	ldd	r24, Y+5	; 0x05
    47e2:	9e 81       	ldd	r25, Y+6	; 0x06
    47e4:	af 81       	ldd	r26, Y+7	; 0x07
    47e6:	b8 85       	ldd	r27, Y+8	; 0x08
    47e8:	00 97       	sbiw	r24, 0x00	; 0
    47ea:	a1 05       	cpc	r26, r1
    47ec:	b1 05       	cpc	r27, r1
    47ee:	19 f4       	brne	.+6      	; 0x47f6 <LCD_voidSendNumber+0x32>
		LCD_voidSendChar(48);
    47f0:	80 e3       	ldi	r24, 0x30	; 48
    47f2:	0e 94 89 22 	call	0x4512	; 0x4512 <LCD_voidSendChar>


	u32 LOC_u32Var=1;
    47f6:	81 e0       	ldi	r24, 0x01	; 1
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	a0 e0       	ldi	r26, 0x00	; 0
    47fc:	b0 e0       	ldi	r27, 0x00	; 0
    47fe:	89 83       	std	Y+1, r24	; 0x01
    4800:	9a 83       	std	Y+2, r25	; 0x02
    4802:	ab 83       	std	Y+3, r26	; 0x03
    4804:	bc 83       	std	Y+4, r27	; 0x04
    4806:	40 c0       	rjmp	.+128    	; 0x4888 <LCD_voidSendNumber+0xc4>
	while(COPY_u32Number > 0)
	{
		LOC_u32Var*=10;
    4808:	89 81       	ldd	r24, Y+1	; 0x01
    480a:	9a 81       	ldd	r25, Y+2	; 0x02
    480c:	ab 81       	ldd	r26, Y+3	; 0x03
    480e:	bc 81       	ldd	r27, Y+4	; 0x04
    4810:	2a e0       	ldi	r18, 0x0A	; 10
    4812:	30 e0       	ldi	r19, 0x00	; 0
    4814:	40 e0       	ldi	r20, 0x00	; 0
    4816:	50 e0       	ldi	r21, 0x00	; 0
    4818:	bc 01       	movw	r22, r24
    481a:	cd 01       	movw	r24, r26
    481c:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__mulsi3>
    4820:	dc 01       	movw	r26, r24
    4822:	cb 01       	movw	r24, r22
    4824:	89 83       	std	Y+1, r24	; 0x01
    4826:	9a 83       	std	Y+2, r25	; 0x02
    4828:	ab 83       	std	Y+3, r26	; 0x03
    482a:	bc 83       	std	Y+4, r27	; 0x04
		LOC_u32Var+=( COPY_u32Number%10 );
    482c:	8d 81       	ldd	r24, Y+5	; 0x05
    482e:	9e 81       	ldd	r25, Y+6	; 0x06
    4830:	af 81       	ldd	r26, Y+7	; 0x07
    4832:	b8 85       	ldd	r27, Y+8	; 0x08
    4834:	2a e0       	ldi	r18, 0x0A	; 10
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	40 e0       	ldi	r20, 0x00	; 0
    483a:	50 e0       	ldi	r21, 0x00	; 0
    483c:	bc 01       	movw	r22, r24
    483e:	cd 01       	movw	r24, r26
    4840:	0e 94 57 25 	call	0x4aae	; 0x4aae <__udivmodsi4>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	9c 01       	movw	r18, r24
    484a:	ad 01       	movw	r20, r26
    484c:	89 81       	ldd	r24, Y+1	; 0x01
    484e:	9a 81       	ldd	r25, Y+2	; 0x02
    4850:	ab 81       	ldd	r26, Y+3	; 0x03
    4852:	bc 81       	ldd	r27, Y+4	; 0x04
    4854:	82 0f       	add	r24, r18
    4856:	93 1f       	adc	r25, r19
    4858:	a4 1f       	adc	r26, r20
    485a:	b5 1f       	adc	r27, r21
    485c:	89 83       	std	Y+1, r24	; 0x01
    485e:	9a 83       	std	Y+2, r25	; 0x02
    4860:	ab 83       	std	Y+3, r26	; 0x03
    4862:	bc 83       	std	Y+4, r27	; 0x04

		COPY_u32Number/=10;
    4864:	8d 81       	ldd	r24, Y+5	; 0x05
    4866:	9e 81       	ldd	r25, Y+6	; 0x06
    4868:	af 81       	ldd	r26, Y+7	; 0x07
    486a:	b8 85       	ldd	r27, Y+8	; 0x08
    486c:	2a e0       	ldi	r18, 0x0A	; 10
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	40 e0       	ldi	r20, 0x00	; 0
    4872:	50 e0       	ldi	r21, 0x00	; 0
    4874:	bc 01       	movw	r22, r24
    4876:	cd 01       	movw	r24, r26
    4878:	0e 94 57 25 	call	0x4aae	; 0x4aae <__udivmodsi4>
    487c:	da 01       	movw	r26, r20
    487e:	c9 01       	movw	r24, r18
    4880:	8d 83       	std	Y+5, r24	; 0x05
    4882:	9e 83       	std	Y+6, r25	; 0x06
    4884:	af 83       	std	Y+7, r26	; 0x07
    4886:	b8 87       	std	Y+8, r27	; 0x08
	if(COPY_u32Number == 0)
		LCD_voidSendChar(48);


	u32 LOC_u32Var=1;
	while(COPY_u32Number > 0)
    4888:	8d 81       	ldd	r24, Y+5	; 0x05
    488a:	9e 81       	ldd	r25, Y+6	; 0x06
    488c:	af 81       	ldd	r26, Y+7	; 0x07
    488e:	b8 85       	ldd	r27, Y+8	; 0x08
    4890:	00 97       	sbiw	r24, 0x00	; 0
    4892:	a1 05       	cpc	r26, r1
    4894:	b1 05       	cpc	r27, r1
    4896:	09 f0       	breq	.+2      	; 0x489a <LCD_voidSendNumber+0xd6>
    4898:	b7 cf       	rjmp	.-146    	; 0x4808 <LCD_voidSendNumber+0x44>
    489a:	23 c0       	rjmp	.+70     	; 0x48e2 <LCD_voidSendNumber+0x11e>
		COPY_u32Number/=10;
	}

	while(LOC_u32Var > 1)
	{
		LCD_voidSendChar( LOC_u32Var % 10 + 48);
    489c:	89 81       	ldd	r24, Y+1	; 0x01
    489e:	9a 81       	ldd	r25, Y+2	; 0x02
    48a0:	ab 81       	ldd	r26, Y+3	; 0x03
    48a2:	bc 81       	ldd	r27, Y+4	; 0x04
    48a4:	2a e0       	ldi	r18, 0x0A	; 10
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	40 e0       	ldi	r20, 0x00	; 0
    48aa:	50 e0       	ldi	r21, 0x00	; 0
    48ac:	bc 01       	movw	r22, r24
    48ae:	cd 01       	movw	r24, r26
    48b0:	0e 94 57 25 	call	0x4aae	; 0x4aae <__udivmodsi4>
    48b4:	dc 01       	movw	r26, r24
    48b6:	cb 01       	movw	r24, r22
    48b8:	80 5d       	subi	r24, 0xD0	; 208
    48ba:	0e 94 89 22 	call	0x4512	; 0x4512 <LCD_voidSendChar>
		LOC_u32Var /= 10;
    48be:	89 81       	ldd	r24, Y+1	; 0x01
    48c0:	9a 81       	ldd	r25, Y+2	; 0x02
    48c2:	ab 81       	ldd	r26, Y+3	; 0x03
    48c4:	bc 81       	ldd	r27, Y+4	; 0x04
    48c6:	2a e0       	ldi	r18, 0x0A	; 10
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	40 e0       	ldi	r20, 0x00	; 0
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	bc 01       	movw	r22, r24
    48d0:	cd 01       	movw	r24, r26
    48d2:	0e 94 57 25 	call	0x4aae	; 0x4aae <__udivmodsi4>
    48d6:	da 01       	movw	r26, r20
    48d8:	c9 01       	movw	r24, r18
    48da:	89 83       	std	Y+1, r24	; 0x01
    48dc:	9a 83       	std	Y+2, r25	; 0x02
    48de:	ab 83       	std	Y+3, r26	; 0x03
    48e0:	bc 83       	std	Y+4, r27	; 0x04
		LOC_u32Var+=( COPY_u32Number%10 );

		COPY_u32Number/=10;
	}

	while(LOC_u32Var > 1)
    48e2:	89 81       	ldd	r24, Y+1	; 0x01
    48e4:	9a 81       	ldd	r25, Y+2	; 0x02
    48e6:	ab 81       	ldd	r26, Y+3	; 0x03
    48e8:	bc 81       	ldd	r27, Y+4	; 0x04
    48ea:	82 30       	cpi	r24, 0x02	; 2
    48ec:	91 05       	cpc	r25, r1
    48ee:	a1 05       	cpc	r26, r1
    48f0:	b1 05       	cpc	r27, r1
    48f2:	a0 f6       	brcc	.-88     	; 0x489c <LCD_voidSendNumber+0xd8>
	{
		LCD_voidSendChar( LOC_u32Var % 10 + 48);
		LOC_u32Var /= 10;
	}

}
    48f4:	28 96       	adiw	r28, 0x08	; 8
    48f6:	0f b6       	in	r0, 0x3f	; 63
    48f8:	f8 94       	cli
    48fa:	de bf       	out	0x3e, r29	; 62
    48fc:	0f be       	out	0x3f, r0	; 63
    48fe:	cd bf       	out	0x3d, r28	; 61
    4900:	cf 91       	pop	r28
    4902:	df 91       	pop	r29
    4904:	08 95       	ret

00004906 <LCD_voidgoto>:

void LCD_voidgoto( u8 COPY_u8Row , u8 COPY_u8Col)
{
    4906:	df 93       	push	r29
    4908:	cf 93       	push	r28
    490a:	00 d0       	rcall	.+0      	; 0x490c <LCD_voidgoto+0x6>
    490c:	cd b7       	in	r28, 0x3d	; 61
    490e:	de b7       	in	r29, 0x3e	; 62
    4910:	89 83       	std	Y+1, r24	; 0x01
    4912:	6a 83       	std	Y+2, r22	; 0x02

	if( COPY_u8Row == 1 )
    4914:	89 81       	ldd	r24, Y+1	; 0x01
    4916:	81 30       	cpi	r24, 0x01	; 1
    4918:	29 f4       	brne	.+10     	; 0x4924 <LCD_voidgoto+0x1e>
	{
		LCD_voidSendCommand( COPY_u8Col + 0x80 -1  );  //0x80 + col-1
    491a:	8a 81       	ldd	r24, Y+2	; 0x02
    491c:	81 58       	subi	r24, 0x81	; 129
    491e:	0e 94 1c 23 	call	0x4638	; 0x4638 <LCD_voidSendCommand>
    4922:	07 c0       	rjmp	.+14     	; 0x4932 <LCD_voidgoto+0x2c>
	}
	else if (COPY_u8Row == 2)
    4924:	89 81       	ldd	r24, Y+1	; 0x01
    4926:	82 30       	cpi	r24, 0x02	; 2
    4928:	21 f4       	brne	.+8      	; 0x4932 <LCD_voidgoto+0x2c>
	{
		LCD_voidSendCommand( COPY_u8Col + 0xc0 - 1 );
    492a:	8a 81       	ldd	r24, Y+2	; 0x02
    492c:	81 54       	subi	r24, 0x41	; 65
    492e:	0e 94 1c 23 	call	0x4638	; 0x4638 <LCD_voidSendCommand>

	}

}
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	cf 91       	pop	r28
    4938:	df 91       	pop	r29
    493a:	08 95       	ret

0000493c <main>:
#include "services/CalcLib/Calc_interface.h"

u8 EquaBtn[16]={'7','8','9','/','4','5','6','*','1','2','3','-','%','0','=','+'};

int main(void)
{
    493c:	df 93       	push	r29
    493e:	cf 93       	push	r28
    4940:	cd b7       	in	r28, 0x3d	; 61
    4942:	de b7       	in	r29, 0x3e	; 62
    4944:	69 97       	sbiw	r28, 0x19	; 25
    4946:	0f b6       	in	r0, 0x3f	; 63
    4948:	f8 94       	cli
    494a:	de bf       	out	0x3e, r29	; 62
    494c:	0f be       	out	0x3f, r0	; 63
    494e:	cd bf       	out	0x3d, r28	; 61

	KEYPAD_voidInit();
    4950:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <KEYPAD_voidInit>
	LCD_voidInit();
    4954:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <LCD_voidInit>
	u8 Expression[16]={0};
    4958:	80 e1       	ldi	r24, 0x10	; 16
    495a:	fe 01       	movw	r30, r28
    495c:	3a 96       	adiw	r30, 0x0a	; 10
    495e:	df 01       	movw	r26, r30
    4960:	98 2f       	mov	r25, r24
    4962:	1d 92       	st	X+, r1
    4964:	9a 95       	dec	r25
    4966:	e9 f7       	brne	.-6      	; 0x4962 <main+0x26>
	u8 Iterator=0;
    4968:	19 86       	std	Y+9, r1	; 0x09
	u8 OperationDone=0;
    496a:	18 86       	std	Y+8, r1	; 0x08

	while(1)
	{

		u8 Num = KEYPAD_u8ReadButton();
    496c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <KEYPAD_u8ReadButton>
    4970:	8f 83       	std	Y+7, r24	; 0x07

		if(OperationDone == 1)
    4972:	88 85       	ldd	r24, Y+8	; 0x08
    4974:	81 30       	cpi	r24, 0x01	; 1
    4976:	e9 f4       	brne	.+58     	; 0x49b2 <main+0x76>
		{
			LCD_voidClear();
    4978:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <LCD_voidClear>
			Iterator = 0;
    497c:	19 86       	std	Y+9, r1	; 0x09
			OperationDone = 0;
    497e:	18 86       	std	Y+8, r1	; 0x08
    4980:	0c c0       	rjmp	.+24     	; 0x499a <main+0x5e>
			while(Expression[Iterator])
			{
				Expression[Iterator] = 0;
    4982:	89 85       	ldd	r24, Y+9	; 0x09
    4984:	28 2f       	mov	r18, r24
    4986:	30 e0       	ldi	r19, 0x00	; 0
    4988:	ce 01       	movw	r24, r28
    498a:	0a 96       	adiw	r24, 0x0a	; 10
    498c:	fc 01       	movw	r30, r24
    498e:	e2 0f       	add	r30, r18
    4990:	f3 1f       	adc	r31, r19
    4992:	10 82       	st	Z, r1
				Iterator++;
    4994:	89 85       	ldd	r24, Y+9	; 0x09
    4996:	8f 5f       	subi	r24, 0xFF	; 255
    4998:	89 87       	std	Y+9, r24	; 0x09
		if(OperationDone == 1)
		{
			LCD_voidClear();
			Iterator = 0;
			OperationDone = 0;
			while(Expression[Iterator])
    499a:	89 85       	ldd	r24, Y+9	; 0x09
    499c:	28 2f       	mov	r18, r24
    499e:	30 e0       	ldi	r19, 0x00	; 0
    49a0:	ce 01       	movw	r24, r28
    49a2:	0a 96       	adiw	r24, 0x0a	; 10
    49a4:	fc 01       	movw	r30, r24
    49a6:	e2 0f       	add	r30, r18
    49a8:	f3 1f       	adc	r31, r19
    49aa:	80 81       	ld	r24, Z
    49ac:	88 23       	and	r24, r24
    49ae:	49 f7       	brne	.-46     	; 0x4982 <main+0x46>
			{
				Expression[Iterator] = 0;
				Iterator++;
			}
			Iterator = 0;
    49b0:	19 86       	std	Y+9, r1	; 0x09
		}

		if(EquaBtn[Num-1] == '=')
    49b2:	8f 81       	ldd	r24, Y+7	; 0x07
    49b4:	88 2f       	mov	r24, r24
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	01 97       	sbiw	r24, 0x01	; 1
    49ba:	fc 01       	movw	r30, r24
    49bc:	e4 59       	subi	r30, 0x94	; 148
    49be:	ff 4f       	sbci	r31, 0xFF	; 255
    49c0:	80 81       	ld	r24, Z
    49c2:	8d 33       	cpi	r24, 0x3D	; 61
    49c4:	11 f5       	brne	.+68     	; 0x4a0a <main+0xce>
		{
			u8 * Parssed = ParseExpression(Expression);
    49c6:	ce 01       	movw	r24, r28
    49c8:	0a 96       	adiw	r24, 0x0a	; 10
    49ca:	0e 94 f0 06 	call	0xde0	; 0xde0 <ParseExpression>
    49ce:	9e 83       	std	Y+6, r25	; 0x06
    49d0:	8d 83       	std	Y+5, r24	; 0x05
			LCD_voidgoto(2,1);
    49d2:	82 e0       	ldi	r24, 0x02	; 2
    49d4:	61 e0       	ldi	r22, 0x01	; 1
    49d6:	0e 94 83 24 	call	0x4906	; 0x4906 <LCD_voidgoto>
			u8 * PostFix = ChangeToPostFix(Parssed);
    49da:	8d 81       	ldd	r24, Y+5	; 0x05
    49dc:	9e 81       	ldd	r25, Y+6	; 0x06
    49de:	0e 94 c3 07 	call	0xf86	; 0xf86 <ChangeToPostFix>
    49e2:	9c 83       	std	Y+4, r25	; 0x04
    49e4:	8b 83       	std	Y+3, r24	; 0x03

			u16  Answer  = CalcExpression(PostFix);
    49e6:	8b 81       	ldd	r24, Y+3	; 0x03
    49e8:	9c 81       	ldd	r25, Y+4	; 0x04
    49ea:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <CalcExpression>
    49ee:	9a 83       	std	Y+2, r25	; 0x02
    49f0:	89 83       	std	Y+1, r24	; 0x01

			LCD_voidSendNumber(Answer);
    49f2:	89 81       	ldd	r24, Y+1	; 0x01
    49f4:	9a 81       	ldd	r25, Y+2	; 0x02
    49f6:	cc 01       	movw	r24, r24
    49f8:	a0 e0       	ldi	r26, 0x00	; 0
    49fa:	b0 e0       	ldi	r27, 0x00	; 0
    49fc:	bc 01       	movw	r22, r24
    49fe:	cd 01       	movw	r24, r26
    4a00:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <LCD_voidSendNumber>

			OperationDone=1;
    4a04:	81 e0       	ldi	r24, 0x01	; 1
    4a06:	88 87       	std	Y+8, r24	; 0x08
    4a08:	b1 cf       	rjmp	.-158    	; 0x496c <main+0x30>
			continue;
		}

		Expression[Iterator++]=EquaBtn[Num-1];
    4a0a:	89 85       	ldd	r24, Y+9	; 0x09
    4a0c:	48 2f       	mov	r20, r24
    4a0e:	50 e0       	ldi	r21, 0x00	; 0
    4a10:	8f 81       	ldd	r24, Y+7	; 0x07
    4a12:	88 2f       	mov	r24, r24
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	01 97       	sbiw	r24, 0x01	; 1
    4a18:	fc 01       	movw	r30, r24
    4a1a:	e4 59       	subi	r30, 0x94	; 148
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	20 81       	ld	r18, Z
    4a20:	ce 01       	movw	r24, r28
    4a22:	0a 96       	adiw	r24, 0x0a	; 10
    4a24:	fc 01       	movw	r30, r24
    4a26:	e4 0f       	add	r30, r20
    4a28:	f5 1f       	adc	r31, r21
    4a2a:	20 83       	st	Z, r18
    4a2c:	89 85       	ldd	r24, Y+9	; 0x09
    4a2e:	8f 5f       	subi	r24, 0xFF	; 255
    4a30:	89 87       	std	Y+9, r24	; 0x09
		LCD_voidSendChar(EquaBtn[Num-1]);
    4a32:	8f 81       	ldd	r24, Y+7	; 0x07
    4a34:	88 2f       	mov	r24, r24
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	01 97       	sbiw	r24, 0x01	; 1
    4a3a:	fc 01       	movw	r30, r24
    4a3c:	e4 59       	subi	r30, 0x94	; 148
    4a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a40:	80 81       	ld	r24, Z
    4a42:	0e 94 89 22 	call	0x4512	; 0x4512 <LCD_voidSendChar>
    4a46:	92 cf       	rjmp	.-220    	; 0x496c <main+0x30>

00004a48 <__mulsi3>:
    4a48:	62 9f       	mul	r22, r18
    4a4a:	d0 01       	movw	r26, r0
    4a4c:	73 9f       	mul	r23, r19
    4a4e:	f0 01       	movw	r30, r0
    4a50:	82 9f       	mul	r24, r18
    4a52:	e0 0d       	add	r30, r0
    4a54:	f1 1d       	adc	r31, r1
    4a56:	64 9f       	mul	r22, r20
    4a58:	e0 0d       	add	r30, r0
    4a5a:	f1 1d       	adc	r31, r1
    4a5c:	92 9f       	mul	r25, r18
    4a5e:	f0 0d       	add	r31, r0
    4a60:	83 9f       	mul	r24, r19
    4a62:	f0 0d       	add	r31, r0
    4a64:	74 9f       	mul	r23, r20
    4a66:	f0 0d       	add	r31, r0
    4a68:	65 9f       	mul	r22, r21
    4a6a:	f0 0d       	add	r31, r0
    4a6c:	99 27       	eor	r25, r25
    4a6e:	72 9f       	mul	r23, r18
    4a70:	b0 0d       	add	r27, r0
    4a72:	e1 1d       	adc	r30, r1
    4a74:	f9 1f       	adc	r31, r25
    4a76:	63 9f       	mul	r22, r19
    4a78:	b0 0d       	add	r27, r0
    4a7a:	e1 1d       	adc	r30, r1
    4a7c:	f9 1f       	adc	r31, r25
    4a7e:	bd 01       	movw	r22, r26
    4a80:	cf 01       	movw	r24, r30
    4a82:	11 24       	eor	r1, r1
    4a84:	08 95       	ret

00004a86 <__udivmodhi4>:
    4a86:	aa 1b       	sub	r26, r26
    4a88:	bb 1b       	sub	r27, r27
    4a8a:	51 e1       	ldi	r21, 0x11	; 17
    4a8c:	07 c0       	rjmp	.+14     	; 0x4a9c <__udivmodhi4_ep>

00004a8e <__udivmodhi4_loop>:
    4a8e:	aa 1f       	adc	r26, r26
    4a90:	bb 1f       	adc	r27, r27
    4a92:	a6 17       	cp	r26, r22
    4a94:	b7 07       	cpc	r27, r23
    4a96:	10 f0       	brcs	.+4      	; 0x4a9c <__udivmodhi4_ep>
    4a98:	a6 1b       	sub	r26, r22
    4a9a:	b7 0b       	sbc	r27, r23

00004a9c <__udivmodhi4_ep>:
    4a9c:	88 1f       	adc	r24, r24
    4a9e:	99 1f       	adc	r25, r25
    4aa0:	5a 95       	dec	r21
    4aa2:	a9 f7       	brne	.-22     	; 0x4a8e <__udivmodhi4_loop>
    4aa4:	80 95       	com	r24
    4aa6:	90 95       	com	r25
    4aa8:	bc 01       	movw	r22, r24
    4aaa:	cd 01       	movw	r24, r26
    4aac:	08 95       	ret

00004aae <__udivmodsi4>:
    4aae:	a1 e2       	ldi	r26, 0x21	; 33
    4ab0:	1a 2e       	mov	r1, r26
    4ab2:	aa 1b       	sub	r26, r26
    4ab4:	bb 1b       	sub	r27, r27
    4ab6:	fd 01       	movw	r30, r26
    4ab8:	0d c0       	rjmp	.+26     	; 0x4ad4 <__udivmodsi4_ep>

00004aba <__udivmodsi4_loop>:
    4aba:	aa 1f       	adc	r26, r26
    4abc:	bb 1f       	adc	r27, r27
    4abe:	ee 1f       	adc	r30, r30
    4ac0:	ff 1f       	adc	r31, r31
    4ac2:	a2 17       	cp	r26, r18
    4ac4:	b3 07       	cpc	r27, r19
    4ac6:	e4 07       	cpc	r30, r20
    4ac8:	f5 07       	cpc	r31, r21
    4aca:	20 f0       	brcs	.+8      	; 0x4ad4 <__udivmodsi4_ep>
    4acc:	a2 1b       	sub	r26, r18
    4ace:	b3 0b       	sbc	r27, r19
    4ad0:	e4 0b       	sbc	r30, r20
    4ad2:	f5 0b       	sbc	r31, r21

00004ad4 <__udivmodsi4_ep>:
    4ad4:	66 1f       	adc	r22, r22
    4ad6:	77 1f       	adc	r23, r23
    4ad8:	88 1f       	adc	r24, r24
    4ada:	99 1f       	adc	r25, r25
    4adc:	1a 94       	dec	r1
    4ade:	69 f7       	brne	.-38     	; 0x4aba <__udivmodsi4_loop>
    4ae0:	60 95       	com	r22
    4ae2:	70 95       	com	r23
    4ae4:	80 95       	com	r24
    4ae6:	90 95       	com	r25
    4ae8:	9b 01       	movw	r18, r22
    4aea:	ac 01       	movw	r20, r24
    4aec:	bd 01       	movw	r22, r26
    4aee:	cf 01       	movw	r24, r30
    4af0:	08 95       	ret

00004af2 <__prologue_saves__>:
    4af2:	2f 92       	push	r2
    4af4:	3f 92       	push	r3
    4af6:	4f 92       	push	r4
    4af8:	5f 92       	push	r5
    4afa:	6f 92       	push	r6
    4afc:	7f 92       	push	r7
    4afe:	8f 92       	push	r8
    4b00:	9f 92       	push	r9
    4b02:	af 92       	push	r10
    4b04:	bf 92       	push	r11
    4b06:	cf 92       	push	r12
    4b08:	df 92       	push	r13
    4b0a:	ef 92       	push	r14
    4b0c:	ff 92       	push	r15
    4b0e:	0f 93       	push	r16
    4b10:	1f 93       	push	r17
    4b12:	cf 93       	push	r28
    4b14:	df 93       	push	r29
    4b16:	cd b7       	in	r28, 0x3d	; 61
    4b18:	de b7       	in	r29, 0x3e	; 62
    4b1a:	ca 1b       	sub	r28, r26
    4b1c:	db 0b       	sbc	r29, r27
    4b1e:	0f b6       	in	r0, 0x3f	; 63
    4b20:	f8 94       	cli
    4b22:	de bf       	out	0x3e, r29	; 62
    4b24:	0f be       	out	0x3f, r0	; 63
    4b26:	cd bf       	out	0x3d, r28	; 61
    4b28:	09 94       	ijmp

00004b2a <__epilogue_restores__>:
    4b2a:	2a 88       	ldd	r2, Y+18	; 0x12
    4b2c:	39 88       	ldd	r3, Y+17	; 0x11
    4b2e:	48 88       	ldd	r4, Y+16	; 0x10
    4b30:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b32:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b34:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b36:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b38:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b3a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b3c:	b9 84       	ldd	r11, Y+9	; 0x09
    4b3e:	c8 84       	ldd	r12, Y+8	; 0x08
    4b40:	df 80       	ldd	r13, Y+7	; 0x07
    4b42:	ee 80       	ldd	r14, Y+6	; 0x06
    4b44:	fd 80       	ldd	r15, Y+5	; 0x05
    4b46:	0c 81       	ldd	r16, Y+4	; 0x04
    4b48:	1b 81       	ldd	r17, Y+3	; 0x03
    4b4a:	aa 81       	ldd	r26, Y+2	; 0x02
    4b4c:	b9 81       	ldd	r27, Y+1	; 0x01
    4b4e:	ce 0f       	add	r28, r30
    4b50:	d1 1d       	adc	r29, r1
    4b52:	0f b6       	in	r0, 0x3f	; 63
    4b54:	f8 94       	cli
    4b56:	de bf       	out	0x3e, r29	; 62
    4b58:	0f be       	out	0x3f, r0	; 63
    4b5a:	cd bf       	out	0x3d, r28	; 61
    4b5c:	ed 01       	movw	r28, r26
    4b5e:	08 95       	ret

00004b60 <_exit>:
    4b60:	f8 94       	cli

00004b62 <__stop_program>:
    4b62:	ff cf       	rjmp	.-2      	; 0x4b62 <__stop_program>
